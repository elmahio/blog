{
    "docs": [
        {
            "location": "/bulk-managing-users-in-an-organisation/", 
            "text": "Bulk managing users in an organisation\n\n\nThomas Ardal\n, August 10, 2016\n\n\nA little over a month ago, we introduced the highly requested feature \nOrganisations\n. With organisations, you can manage all of the users within your company at the organisation level, rather than having to add the same user multiple times.\n\n\nToday we introduce a new drop down on the organisation settings, which will allow for even easier administration of the users in your organisation. When adding a new user to the organisation, you probably want to assign the user to the logs inside your organisation, right? Using the new drop down, you will be able to both add and remove the user from all logs:\n\n\n\n\nPlease let us know what you think about the new bulk actions, as well as the organisation support on elmah.io.", 
            "title": "Bulk managing users in an organisation"
        }, 
        {
            "location": "/bulk-managing-users-in-an-organisation/#bulk-managing-users-in-an-organisation", 
            "text": "", 
            "title": "Bulk managing users in an organisation"
        }, 
        {
            "location": "/bulk-managing-users-in-an-organisation/#thomas-ardal-august-10-2016", 
            "text": "A little over a month ago, we introduced the highly requested feature  Organisations . With organisations, you can manage all of the users within your company at the organisation level, rather than having to add the same user multiple times.  Today we introduce a new drop down on the organisation settings, which will allow for even easier administration of the users in your organisation. When adding a new user to the organisation, you probably want to assign the user to the logs inside your organisation, right? Using the new drop down, you will be able to both add and remove the user from all logs:   Please let us know what you think about the new bulk actions, as well as the organisation support on elmah.io.", 
            "title": "Thomas Ardal, August 10, 2016"
        }, 
        {
            "location": "/filtering-errors-by-ip-addresses/", 
            "text": "Filtering Errors by IP Addresses\n\n\nThomas Ardal\n, August 8, 2016\n\n\nEver wanted to ignore errors from your own IP, a range of known addresses from crawlers or what about localhost? With elmah.io's business rule feature, this has been possible from the day it was \nborn\n. Until today, setting up IP filtering has been a somehow manual thing that would require you to know about the internals of elmah.io. That's why we've ported this to an app in the elmah.io \nApp Store\n.\n\n\nTo ignore one or more IP addresses, add the new IP Filter app to your log(s):\n\n\n\n\nIn the demo, a range of addresses are ignored. If you want to ignore a single IP only, add that IP in both the \nFrom\n and \nTo\n fields.", 
            "title": "Filtering Errors by IP Addresses"
        }, 
        {
            "location": "/filtering-errors-by-ip-addresses/#filtering-errors-by-ip-addresses", 
            "text": "", 
            "title": "Filtering Errors by IP Addresses"
        }, 
        {
            "location": "/filtering-errors-by-ip-addresses/#thomas-ardal-august-8-2016", 
            "text": "Ever wanted to ignore errors from your own IP, a range of known addresses from crawlers or what about localhost? With elmah.io's business rule feature, this has been possible from the day it was  born . Until today, setting up IP filtering has been a somehow manual thing that would require you to know about the internals of elmah.io. That's why we've ported this to an app in the elmah.io  App Store .  To ignore one or more IP addresses, add the new IP Filter app to your log(s):   In the demo, a range of addresses are ignored. If you want to ignore a single IP only, add that IP in both the  From  and  To  fields.", 
            "title": "Thomas Ardal, August 8, 2016"
        }, 
        {
            "location": "/aspnet-core-status/", 
            "text": "ASP.NET Core Status\n\n\nThomas Ardal\n, August 3, 2016\n\n\nWe know that we talk a lot about our integration for ASP.NET Core. But things are moving (and changing) very fast at Microsoft, in the community and @ elmah.io. A month ago we \nreleased support for ASP.NET Core\n and today we take things a step further. The month old release contained an implementation of a logger for \nMicrosoft.Extensions.Logging\n, able to run on Windows, Linux and Mac. The amount of data logged where limited to a date, a title and a few other properties. With todays release, we offer almost the same experience for ASP.NET Core applications like good old MVC and Web API apps.\n\n\n\n\nBe aware that the integration still remains a prerelease. Both Elmah.Io.Extensions.Logger and Elmah.Io.AspNetCore contains an implementation of a Microsoft.Extensions.Logging logger. This will probably change in the future by using dependencies between the two packages.\n\n\n\n\nTo start logging, install the \nElmah.Io.AspNetCore\n:\n\n\nInstall-Package Elmah.Io.AspNetCore -Pre\n\n\n\n\nTell ASP.NET Core to use elmah.io:\n\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory fac)\n{\n    app.UseElmahIo(\nAPI_KEY\n, new Guid(\nLOG_ID\n));\n}\n\n\n\n\nFinally, register \nIHttpContextAccessor\n to make sure that elmah.io receives all of the data it needs to help you debug the errors later:\n\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    ...\n    services.AddSingleton\nIHttpContextAccessor, HttpContextAccessor\n();\n    ...\n}\n\n\n\n\nFor more information, check out the \nLogging from ASP.NET Core\n article and the \nexample project\n on GitHub.", 
            "title": "ASP.NET Core Status"
        }, 
        {
            "location": "/aspnet-core-status/#aspnet-core-status", 
            "text": "", 
            "title": "ASP.NET Core Status"
        }, 
        {
            "location": "/aspnet-core-status/#thomas-ardal-august-3-2016", 
            "text": "We know that we talk a lot about our integration for ASP.NET Core. But things are moving (and changing) very fast at Microsoft, in the community and @ elmah.io. A month ago we  released support for ASP.NET Core  and today we take things a step further. The month old release contained an implementation of a logger for  Microsoft.Extensions.Logging , able to run on Windows, Linux and Mac. The amount of data logged where limited to a date, a title and a few other properties. With todays release, we offer almost the same experience for ASP.NET Core applications like good old MVC and Web API apps.   Be aware that the integration still remains a prerelease. Both Elmah.Io.Extensions.Logger and Elmah.Io.AspNetCore contains an implementation of a Microsoft.Extensions.Logging logger. This will probably change in the future by using dependencies between the two packages.   To start logging, install the  Elmah.Io.AspNetCore :  Install-Package Elmah.Io.AspNetCore -Pre  Tell ASP.NET Core to use elmah.io:  public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory fac)\n{\n    app.UseElmahIo( API_KEY , new Guid( LOG_ID ));\n}  Finally, register  IHttpContextAccessor  to make sure that elmah.io receives all of the data it needs to help you debug the errors later:  public void ConfigureServices(IServiceCollection services)\n{\n    ...\n    services.AddSingleton IHttpContextAccessor, HttpContextAccessor ();\n    ...\n}  For more information, check out the  Logging from ASP.NET Core  article and the  example project  on GitHub.", 
            "title": "Thomas Ardal, August 3, 2016"
        }, 
        {
            "location": "/infinite-scroll-well-almost/", 
            "text": "Infinite Scroll (Well Almost)\n\n\nThomas Ardal\n, August 1, 2016\n\n\nLike a lot of people, we have been celebrating the nice concept of vacation during the last couple of weeks. Well sort of, since the support is always open. We hope that you've all had a nice vacation with great experiences, spending time with your families and of course lots of code!\n\n\nToday, we have launched a highly requested feature: infinite scroll on the search page. In fact we chose not to implement it as true infinite scroll, but as a \"Show more\" button to make it explicit whether or not you want additional search results added to the list:\n\n\n\n\nAs always, we would love to get your feedback on this new feature. Please use the comments section below or contact us through intercom with feedback, bug reports, features requests or if you want to discuss TV shows :)", 
            "title": "Infinite Scroll (Well Almost)"
        }, 
        {
            "location": "/infinite-scroll-well-almost/#infinite-scroll-well-almost", 
            "text": "", 
            "title": "Infinite Scroll (Well Almost)"
        }, 
        {
            "location": "/infinite-scroll-well-almost/#thomas-ardal-august-1-2016", 
            "text": "Like a lot of people, we have been celebrating the nice concept of vacation during the last couple of weeks. Well sort of, since the support is always open. We hope that you've all had a nice vacation with great experiences, spending time with your families and of course lots of code!  Today, we have launched a highly requested feature: infinite scroll on the search page. In fact we chose not to implement it as true infinite scroll, but as a \"Show more\" button to make it explicit whether or not you want additional search results added to the list:   As always, we would love to get your feedback on this new feature. Please use the comments section below or contact us through intercom with feedback, bug reports, features requests or if you want to discuss TV shows :)", 
            "title": "Thomas Ardal, August 1, 2016"
        }, 
        {
            "location": "/support-for-dotnet-and-aspnet-core/", 
            "text": "Support for .NET and ASP.NET Core\n\n\nThomas Ardal\n, July 8, 2016\n\n\nTime for another update on our support for .NET Core (and ASP.NET Core). As you may know, we have supported what where previously known as ASP.NET vNext for the last couple of months through the Elmah.Io.Framework.Logging package (no link cause this package will eventually die). As of today, we are ready with the first pre-release of an official .NET and ASP.NET Core support.\n\n\nTo sum up the differences between the different version of the .NET framework and ASP.NET, Scott Hanselman has a great illustration on his \nblog\n:\n\n\n\n\nSo what does this mean? Well first of all, there's a new release of the \nElmah.Io.Client\n package. This package contains the raw client for communicating with the \nelmah.io API\n. We've bumped the version number from 2.x to 3.0.0. Why? Well because it's using the new \nv3 API\n that isn't backwards compatible. Since the new API is documented with \nSwagger\n, parts of the new client can be auto-generated using the wonderful \nAutoRest\n code generator. Elmah.Io.Client v3 is available on NuGet and you can use it cross platform to log from Windows, Linux and Mac. Also, having a client package targeting .NET Core, you will be able to log from Xamarin, Windows Phone, Windows 10 apps and similar.\n\n\nWith the .NET Core client in place, we have a strong foundation for supporting ASP.NET Core (as well as native ASP.NET). Since ELMAH hasn't been ported to ASP.NET Core yet, we've extended the Elmah.Io.Framework.Logging package to support core as well. In fact, it's almost a re-write and since Microsoft chose to rename Microsoft.Framework.Logging to Microsoft.Extensions.Logging, we've done that as well. The new project is simply called \nElmah.Io.Extensions.Logging\n and it is available on GitHub and NuGet (as a prerelease).\n\n\nTo use the new package, we recommend you to check out the documentation article: \nLogging from ASP.NET Core\n.\n\n\nAs always, we love feedback. Please let us know what you think about the support for .NET Core and ASP.NET Core.", 
            "title": "Support for .NET and ASP.NET Core"
        }, 
        {
            "location": "/support-for-dotnet-and-aspnet-core/#support-for-net-and-aspnet-core", 
            "text": "", 
            "title": "Support for .NET and ASP.NET Core"
        }, 
        {
            "location": "/support-for-dotnet-and-aspnet-core/#thomas-ardal-july-8-2016", 
            "text": "Time for another update on our support for .NET Core (and ASP.NET Core). As you may know, we have supported what where previously known as ASP.NET vNext for the last couple of months through the Elmah.Io.Framework.Logging package (no link cause this package will eventually die). As of today, we are ready with the first pre-release of an official .NET and ASP.NET Core support.  To sum up the differences between the different version of the .NET framework and ASP.NET, Scott Hanselman has a great illustration on his  blog :   So what does this mean? Well first of all, there's a new release of the  Elmah.Io.Client  package. This package contains the raw client for communicating with the  elmah.io API . We've bumped the version number from 2.x to 3.0.0. Why? Well because it's using the new  v3 API  that isn't backwards compatible. Since the new API is documented with  Swagger , parts of the new client can be auto-generated using the wonderful  AutoRest  code generator. Elmah.Io.Client v3 is available on NuGet and you can use it cross platform to log from Windows, Linux and Mac. Also, having a client package targeting .NET Core, you will be able to log from Xamarin, Windows Phone, Windows 10 apps and similar.  With the .NET Core client in place, we have a strong foundation for supporting ASP.NET Core (as well as native ASP.NET). Since ELMAH hasn't been ported to ASP.NET Core yet, we've extended the Elmah.Io.Framework.Logging package to support core as well. In fact, it's almost a re-write and since Microsoft chose to rename Microsoft.Framework.Logging to Microsoft.Extensions.Logging, we've done that as well. The new project is simply called  Elmah.Io.Extensions.Logging  and it is available on GitHub and NuGet (as a prerelease).  To use the new package, we recommend you to check out the documentation article:  Logging from ASP.NET Core .  As always, we love feedback. Please let us know what you think about the support for .NET Core and ASP.NET Core.", 
            "title": "Thomas Ardal, July 8, 2016"
        }, 
        {
            "location": "/organization-support/", 
            "text": "Organization Support\n\n\nThomas Ardal\n, July 4, 2016\n\n\nWe are happy to report, that the heavily requested and much anticipated Organization support has been released. With this new feature, everyone inside your organization will be able to create logs. All users have been migrated into one or more auto-generated organizations. If you are the administrator of your company, you will probably want to rename the organization to something meaningful. This can be done directly from the dashboard.\n\n\nUnlike previous, user administration is no longer available on each log. When needing to add new users, navigate to the new organization settings view and add/remove users from the list:\n\n\n\n\nAll users within an organization, is available in the Users tab on each log settings. We have automatically migrated all users on your logs to the new organization, but you may want to run through the list to make sure that everyone is awarded the correct role. Making a user Administrator, will allow them to create new logs inside your organization.\n\n\nSo what\u2019s next? The organization feature is still pretty limited and we want to extend it heavily in the near future. Moving the subscription from your user to the organization is high on our list. Also auto-assigning users to logs when added to the organization is something that we want to implement. For now, we would love your input, when you start playing with the new feature.\n\n\nWe really hope that you will like the new organization feature as much as we have loved building it.", 
            "title": "Organization Support"
        }, 
        {
            "location": "/organization-support/#organization-support", 
            "text": "", 
            "title": "Organization Support"
        }, 
        {
            "location": "/organization-support/#thomas-ardal-july-4-2016", 
            "text": "We are happy to report, that the heavily requested and much anticipated Organization support has been released. With this new feature, everyone inside your organization will be able to create logs. All users have been migrated into one or more auto-generated organizations. If you are the administrator of your company, you will probably want to rename the organization to something meaningful. This can be done directly from the dashboard.  Unlike previous, user administration is no longer available on each log. When needing to add new users, navigate to the new organization settings view and add/remove users from the list:   All users within an organization, is available in the Users tab on each log settings. We have automatically migrated all users on your logs to the new organization, but you may want to run through the list to make sure that everyone is awarded the correct role. Making a user Administrator, will allow them to create new logs inside your organization.  So what\u2019s next? The organization feature is still pretty limited and we want to extend it heavily in the near future. Moving the subscription from your user to the organization is high on our list. Also auto-assigning users to logs when added to the organization is something that we want to implement. For now, we would love your input, when you start playing with the new feature.  We really hope that you will like the new organization feature as much as we have loved building it.", 
            "title": "Thomas Ardal, July 4, 2016"
        }, 
        {
            "location": "/dot-net-logging-tools-and-libraries/", 
            "text": ".NET Logging Tools and Libraries\n\n\nThomas Ardal\n, June 10, 2016\n\n\nIt's a jungle out there, as they say. The community around .NET logging tools and frameworks is growing every day and multiple options covering the same basic needs exists. This definitive guide will help you through the large offer of frameworks and make it possible for you to choose the right logging strategy.\n\n\nWhat's Logging?\n\n\nBefore we dig into the large number of logging frameworks, let's spend a bit of time discussing the terms related to logging. Logging as a single term, means storing messages from your application somewhere. These messages are often used for debugging errors, but I've seen log data used for multiple other purposes like creating a dashboard, monitoring updates, audit trails etc. The nice thing about logging is, that you're in control if a message should go into the log or not.\n\n\nAs mentioned, most people use logging frameworks for logging exceptions and other messages making it possible to debug errors in production. All of the frameworks mentioned in this post support error logging, while few actually build error management features on top of the log. Error management actually helps you monitor and deal with your errors in a more intelligent way than having to look through log files. More on that subject later.\n\n\nLogging Frameworks\n\n\nWe've compiled a list of logging frameworks for .NET. There's a great deal of options out there, but a lot of them are no longer maintained. The list provided in this section contains the popular choices.\n\n\nlog4net\n\n\nProbably the oldest logging framework on the block, \nlog4net\n have existed pretty much since .NET was introduced. log4net was originally an internal Apache log4j port developed by Neoworks Limited back in 2001. The project quickly moved to Sourceforge (the GitHub of 2001) and was released under the Apache license. Since that time, log4net has been one of the most popular choices in the .NET world for adding logging to applications.\n\n\nlog4net works with the concept of appenders, where log messages can be routed to different data stores. A lot of appenders have been implemented during the years, like logging to the file system, SQL Server, HTTP endpoints and even NoSQL databases. Being unstructured text messages, log4net and NoSQL don\u2019t exactly go hand in hand.\n\n\nELMAH\n\n\nBack in 2004, Atif Aziz spotted something important. Websites sometimes fails without we as web developers actually spotting the errors. That's why he decided to create \nELMAH\n. While ELMAH can be used as a logging framework, the focus is entirely upon errors. While we still see people misusing ELMAH to log debug messages, ELMAH is after 12 years still the best choice of logging uncaught errors in your websites.\n\n\nNLog\n\n\nWhile log4net quickly became the default choice, alternatives began to show up. Probably the first real competitor to log4net's dominance were \nNLog\n. Originally developed by Jarek Kowalski and with pull requests from almost 100 people, NLog is a great alternative. While log4net pretty much stood still from 2006, NLog just kept going. While Jarek seemed to pull the plug when starting at Google, the community seemed to step up and new releases are still flowing.\n\n\nLike log4net, NLog contains multiple log targets, and is able to log messages to various data stores.\n\n\nSerilog\n\n\nIn 2013, the .NET logging framework were taken by storm once again. When everyone else were logging text messages, Micholas Blumhardt did something new: structured logging. Unlike existing logging frameworks, \nSerilog\n introduced .NET developers to structured event data rather than dumb text messages. Serilog quickly became one of the fastest moving projects in the .NET community and still is. We really recommend you to look into Serilog for logging messages from your .NET apps.\n\n\nError Management\n\n\nWe wanted to put some words on the terms Error Management. We often talk to people that don't realize, that there's a big difference between Error Logging and Error Management. While log4net, NLog and Serilog are great choices for logging text-based or structured log messages to a text file or a database, this is simply not enough to monitor your websites and act on errors. Having a log file is one thing. Even with cool storage choices like Seq and Elasticsearch, having a system for monitoring and handling errors is an essential part of web application development today.\n\n\nA lot of choices showed up during the last few years. \nelmah.io\n, New Relic, Raygun and Stackify are all examples of popular choices for implementing error management. All run in the Cloud and provides easy integration with your .NET websites. When looking through the different solutions, some basic features work pretty much the same way, while others vary by product. Some focus on supporting a lot of different programming languages, others on integrating with logging frameworks and some on integrating with third party systems like Slack and GitHub.\n\n\nAt \nelmah.io\n, we are working hard to create the best error management system for .NET web applications. We support all the major logging frameworks and tools for .NET like ELMAH, log4net, NLog and Serilog. We also provide some unique features for .NET developers like Visual Studio integration and one-click installation through NuGet. We definitely want you to try out elmah.io for your error management needs in .NET.", 
            "title": ".NET Logging Tools and Libraries"
        }, 
        {
            "location": "/dot-net-logging-tools-and-libraries/#net-logging-tools-and-libraries", 
            "text": "", 
            "title": ".NET Logging Tools and Libraries"
        }, 
        {
            "location": "/dot-net-logging-tools-and-libraries/#thomas-ardal-june-10-2016", 
            "text": "It's a jungle out there, as they say. The community around .NET logging tools and frameworks is growing every day and multiple options covering the same basic needs exists. This definitive guide will help you through the large offer of frameworks and make it possible for you to choose the right logging strategy.", 
            "title": "Thomas Ardal, June 10, 2016"
        }, 
        {
            "location": "/dot-net-logging-tools-and-libraries/#whats-logging", 
            "text": "Before we dig into the large number of logging frameworks, let's spend a bit of time discussing the terms related to logging. Logging as a single term, means storing messages from your application somewhere. These messages are often used for debugging errors, but I've seen log data used for multiple other purposes like creating a dashboard, monitoring updates, audit trails etc. The nice thing about logging is, that you're in control if a message should go into the log or not.  As mentioned, most people use logging frameworks for logging exceptions and other messages making it possible to debug errors in production. All of the frameworks mentioned in this post support error logging, while few actually build error management features on top of the log. Error management actually helps you monitor and deal with your errors in a more intelligent way than having to look through log files. More on that subject later.", 
            "title": "What's Logging?"
        }, 
        {
            "location": "/dot-net-logging-tools-and-libraries/#logging-frameworks", 
            "text": "We've compiled a list of logging frameworks for .NET. There's a great deal of options out there, but a lot of them are no longer maintained. The list provided in this section contains the popular choices.", 
            "title": "Logging Frameworks"
        }, 
        {
            "location": "/dot-net-logging-tools-and-libraries/#log4net", 
            "text": "Probably the oldest logging framework on the block,  log4net  have existed pretty much since .NET was introduced. log4net was originally an internal Apache log4j port developed by Neoworks Limited back in 2001. The project quickly moved to Sourceforge (the GitHub of 2001) and was released under the Apache license. Since that time, log4net has been one of the most popular choices in the .NET world for adding logging to applications.  log4net works with the concept of appenders, where log messages can be routed to different data stores. A lot of appenders have been implemented during the years, like logging to the file system, SQL Server, HTTP endpoints and even NoSQL databases. Being unstructured text messages, log4net and NoSQL don\u2019t exactly go hand in hand.", 
            "title": "log4net"
        }, 
        {
            "location": "/dot-net-logging-tools-and-libraries/#elmah", 
            "text": "Back in 2004, Atif Aziz spotted something important. Websites sometimes fails without we as web developers actually spotting the errors. That's why he decided to create  ELMAH . While ELMAH can be used as a logging framework, the focus is entirely upon errors. While we still see people misusing ELMAH to log debug messages, ELMAH is after 12 years still the best choice of logging uncaught errors in your websites.", 
            "title": "ELMAH"
        }, 
        {
            "location": "/dot-net-logging-tools-and-libraries/#nlog", 
            "text": "While log4net quickly became the default choice, alternatives began to show up. Probably the first real competitor to log4net's dominance were  NLog . Originally developed by Jarek Kowalski and with pull requests from almost 100 people, NLog is a great alternative. While log4net pretty much stood still from 2006, NLog just kept going. While Jarek seemed to pull the plug when starting at Google, the community seemed to step up and new releases are still flowing.  Like log4net, NLog contains multiple log targets, and is able to log messages to various data stores.", 
            "title": "NLog"
        }, 
        {
            "location": "/dot-net-logging-tools-and-libraries/#serilog", 
            "text": "In 2013, the .NET logging framework were taken by storm once again. When everyone else were logging text messages, Micholas Blumhardt did something new: structured logging. Unlike existing logging frameworks,  Serilog  introduced .NET developers to structured event data rather than dumb text messages. Serilog quickly became one of the fastest moving projects in the .NET community and still is. We really recommend you to look into Serilog for logging messages from your .NET apps.", 
            "title": "Serilog"
        }, 
        {
            "location": "/dot-net-logging-tools-and-libraries/#error-management", 
            "text": "We wanted to put some words on the terms Error Management. We often talk to people that don't realize, that there's a big difference between Error Logging and Error Management. While log4net, NLog and Serilog are great choices for logging text-based or structured log messages to a text file or a database, this is simply not enough to monitor your websites and act on errors. Having a log file is one thing. Even with cool storage choices like Seq and Elasticsearch, having a system for monitoring and handling errors is an essential part of web application development today.  A lot of choices showed up during the last few years.  elmah.io , New Relic, Raygun and Stackify are all examples of popular choices for implementing error management. All run in the Cloud and provides easy integration with your .NET websites. When looking through the different solutions, some basic features work pretty much the same way, while others vary by product. Some focus on supporting a lot of different programming languages, others on integrating with logging frameworks and some on integrating with third party systems like Slack and GitHub.  At  elmah.io , we are working hard to create the best error management system for .NET web applications. We support all the major logging frameworks and tools for .NET like ELMAH, log4net, NLog and Serilog. We also provide some unique features for .NET developers like Visual Studio integration and one-click installation through NuGet. We definitely want you to try out elmah.io for your error management needs in .NET.", 
            "title": "Error Management"
        }, 
        {
            "location": "/installation-help-directly-inside-elmah-io/", 
            "text": "Installation Help Directly Inside elmah.io\n\n\nThomas Ardal\n, June 9, 2016\n\n\nError management without any errors, doesn't sound like a lot of fun, right? Without configuration on your website, nothing is shipped off to elmah.io. While installing elmah.io has always been as simple as installing a NuGet package, sometimes you get extra benefits by adding additional NuGet packages and configuration, depending on your web- and/or logging-framework of choice.\n\n\nWhile we've had our \ndocumentation site\n for quite some time now, we always wanted to provide something even better. Today, we are ready to introduce installation and configuration documentation directly in the elmah.io UI. When creating a new log, you are redirected to the installation page as previous, but now we provide even more help:\n\n\n\n\nNotice the new language and framework selector in the top. As default we show the generic and most simple installation steps as before, but for additional help setting up elmah.io on a specific web- or logging-framework, all you need to do is clicking one of the framework buttons. Let's say you want to use elmah.io from Serilog, simply click the Serilog button and the documentation is right there in the browser:\n\n\n\n\nBehind the three dotted button, additional frameworks are available.", 
            "title": "Installation Help Directly Inside elmah.io"
        }, 
        {
            "location": "/installation-help-directly-inside-elmah-io/#installation-help-directly-inside-elmahio", 
            "text": "", 
            "title": "Installation Help Directly Inside elmah.io"
        }, 
        {
            "location": "/installation-help-directly-inside-elmah-io/#thomas-ardal-june-9-2016", 
            "text": "Error management without any errors, doesn't sound like a lot of fun, right? Without configuration on your website, nothing is shipped off to elmah.io. While installing elmah.io has always been as simple as installing a NuGet package, sometimes you get extra benefits by adding additional NuGet packages and configuration, depending on your web- and/or logging-framework of choice.  While we've had our  documentation site  for quite some time now, we always wanted to provide something even better. Today, we are ready to introduce installation and configuration documentation directly in the elmah.io UI. When creating a new log, you are redirected to the installation page as previous, but now we provide even more help:   Notice the new language and framework selector in the top. As default we show the generic and most simple installation steps as before, but for additional help setting up elmah.io on a specific web- or logging-framework, all you need to do is clicking one of the framework buttons. Let's say you want to use elmah.io from Serilog, simply click the Serilog button and the documentation is right there in the browser:   Behind the three dotted button, additional frameworks are available.", 
            "title": "Thomas Ardal, June 9, 2016"
        }, 
        {
            "location": "/ignore-errors-generated-by-bots/", 
            "text": "Ignore Errors Generated by Bots\n\n\nThomas Ardal\n, May 13, 2016\n\n\nYou may not know the \nelmah.io AppStore\n, but in fact we offer integrations with a range of commonly used services like Slack, GitHub and Zapier. Today I want to introduce you to our recent app, with the awesome name BotBuster.\n\n\n\n\nIf you've ever logged uncaught errors with ELMAH, you know that crawlers, bots, spiders and similar causes a lot of errors. Robots that parses your website and requests resources that may or may not exist, appending weird query parameters and other funky stuff, may cause your website to throw errors. You may want to see these errors in your log, but chances are that you don't. If you're the later, BotBuster is for you.\n\n\nWhen enabled, BotBuster automatically ignores errors generated by a long list of known bots. This means that bots will still crawl your website as before, but any errors generated by bots, never hits your log. This makes it much easier for you to get an overview of your log and you don't need to deal with errors where no user is involved.\n\n\nTo enable BotBuster, go to your log settings, hit the Apps tab and install the BotBuster app.\n\n\nIf you're interested in the technology behind BotBuster, our founder (well that's me as well :) wrote a blog post about \nhow to analyze user agents to identify bots\n.", 
            "title": "Ignore Errors Generated by Bots"
        }, 
        {
            "location": "/ignore-errors-generated-by-bots/#ignore-errors-generated-by-bots", 
            "text": "", 
            "title": "Ignore Errors Generated by Bots"
        }, 
        {
            "location": "/ignore-errors-generated-by-bots/#thomas-ardal-may-13-2016", 
            "text": "You may not know the  elmah.io AppStore , but in fact we offer integrations with a range of commonly used services like Slack, GitHub and Zapier. Today I want to introduce you to our recent app, with the awesome name BotBuster.   If you've ever logged uncaught errors with ELMAH, you know that crawlers, bots, spiders and similar causes a lot of errors. Robots that parses your website and requests resources that may or may not exist, appending weird query parameters and other funky stuff, may cause your website to throw errors. You may want to see these errors in your log, but chances are that you don't. If you're the later, BotBuster is for you.  When enabled, BotBuster automatically ignores errors generated by a long list of known bots. This means that bots will still crawl your website as before, but any errors generated by bots, never hits your log. This makes it much easier for you to get an overview of your log and you don't need to deal with errors where no user is involved.  To enable BotBuster, go to your log settings, hit the Apps tab and install the BotBuster app.  If you're interested in the technology behind BotBuster, our founder (well that's me as well :) wrote a blog post about  how to analyze user agents to identify bots .", 
            "title": "Thomas Ardal, May 13, 2016"
        }, 
        {
            "location": "/redesigned-dashboard-with-drag-and-drop/", 
            "text": "Redesigned Dashboard with Drag and Drop\n\n\nThomas Ardal\n, April 14, 2016\n\n\nThe Dashboard, probably the first elmah.io page you saw after sign up. What we've tried to do in the Dashboard, is to show you an overall view of your logs. Thanks to you, the users, the dashboard have improved over time with both shortcut buttons, inline editing and custom colouring. With the latest bunch of improvements, the Dashboard have become even better.\n\n\nWe've received a lot of requests for ordering logs on the dashboard. While the custom colours gives some nice possibilities, being able to place related logs next to each other, means everything when having a lot of applications. That's why we've implemented just that using drag and drop:\n\n\n\n\nAnother request that we have heard from time to time, is the option to cancel editing a log. With the new log editor, there's a close button and we made it more visible which log you are editing, using a nice animation effect:\n\n\n\n\nWe hope that you will love the redesigned Dashboard as much as we have loved build it. As usual, ship off your comments on this post, \nTwitter\n, \nFacebook\n or \nGoogle+\n.", 
            "title": "Redesigned Dashboard with Drag and Drop"
        }, 
        {
            "location": "/redesigned-dashboard-with-drag-and-drop/#redesigned-dashboard-with-drag-and-drop", 
            "text": "", 
            "title": "Redesigned Dashboard with Drag and Drop"
        }, 
        {
            "location": "/redesigned-dashboard-with-drag-and-drop/#thomas-ardal-april-14-2016", 
            "text": "The Dashboard, probably the first elmah.io page you saw after sign up. What we've tried to do in the Dashboard, is to show you an overall view of your logs. Thanks to you, the users, the dashboard have improved over time with both shortcut buttons, inline editing and custom colouring. With the latest bunch of improvements, the Dashboard have become even better.  We've received a lot of requests for ordering logs on the dashboard. While the custom colours gives some nice possibilities, being able to place related logs next to each other, means everything when having a lot of applications. That's why we've implemented just that using drag and drop:   Another request that we have heard from time to time, is the option to cancel editing a log. With the new log editor, there's a close button and we made it more visible which log you are editing, using a nice animation effect:   We hope that you will love the redesigned Dashboard as much as we have loved build it. As usual, ship off your comments on this post,  Twitter ,  Facebook  or  Google+ .", 
            "title": "Thomas Ardal, April 14, 2016"
        }, 
        {
            "location": "/adding-version-information-to-your-log/", 
            "text": "Adding Version Information to your Log\n\n\nThomas Ardal\n, March 29, 2016\n\n\nTime for a new crisp feature on elmah.io. All software applications have a version number (or at least should have). Being able to distinguish one version from the other is important. That's why we have implemented version number support on elmah.io.\n\n\nBasically, there's a new version property on the message details:\n\n\n\n\nThe idea here is that you set this version number to the current version number of your application through appSettings, assembly version or similar.\n\n\nHaving a version number on all messages, lets you do funky searches like this:\n\n\n\n\nTo add a version number on all of the messages logged to elmah.io, add the following code somewhere during initialization:\n\n\nElmah.ErrorLog.GetDefault(null); // Forces creation of logger client\nvar logger = ErrorLog.Client;\nlogger.OnMessage += (sender, args) =\n\n{\n    args.Message.Version = \n1.2.3\n; // Requires elmah.io.core version \n= 2.0.26\n}\n\n\n\n\nI addition to setting the version number through the \nOnMessage\n event, there are alternatives as well as support for logging frameworks like log4net, NLog and Serilog. Check out the \nAdding Version Information\n article on our documentation site for more details.", 
            "title": "Adding Version Information to your Log"
        }, 
        {
            "location": "/adding-version-information-to-your-log/#adding-version-information-to-your-log", 
            "text": "", 
            "title": "Adding Version Information to your Log"
        }, 
        {
            "location": "/adding-version-information-to-your-log/#thomas-ardal-march-29-2016", 
            "text": "Time for a new crisp feature on elmah.io. All software applications have a version number (or at least should have). Being able to distinguish one version from the other is important. That's why we have implemented version number support on elmah.io.  Basically, there's a new version property on the message details:   The idea here is that you set this version number to the current version number of your application through appSettings, assembly version or similar.  Having a version number on all messages, lets you do funky searches like this:   To add a version number on all of the messages logged to elmah.io, add the following code somewhere during initialization:  Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client\nvar logger = ErrorLog.Client;\nlogger.OnMessage += (sender, args) = \n{\n    args.Message.Version =  1.2.3 ; // Requires elmah.io.core version  = 2.0.26\n}  I addition to setting the version number through the  OnMessage  event, there are alternatives as well as support for logging frameworks like log4net, NLog and Serilog. Check out the  Adding Version Information  article on our documentation site for more details.", 
            "title": "Thomas Ardal, March 29, 2016"
        }, 
        {
            "location": "/elmah-configuration-validator/", 
            "text": "ELMAH Configuration Validator\n\n\nThomas Ardal\n, March 15, 2016\n\n\n\n\nDisclamer: Configuring ELMAH (as well as elmah.io) happens through your application configuration file (like web.config). In the next version of ASP.NET, web.config files are removed, but web.config files will probably continue to exist for years to come.\n\n\n\n\nLet's face it, configuring ASP.NET applications in XML is sort of pain in the a... There's a trend towards fluent configuration in C# code, which is way easier to write and understand. But for now, ELMAH (as well as elmah.io) is configured in your web/app.config.\n\n\nTo ease writing ELMAH configuration, we \ncreated a GitHub repository\n a couple of days ago, with a XML schema for writing ELMAH config, originally created by Jeff Lingis. Today we take another step towards writing pain-free ELMAH config. Please welcome the \nELMAH Configuration Validator\n.\n\n\nThe ELMAH Configuration Validator lets you validate your web.config file for errors in your ELMAH config. It's not a validator for web.config files per se, but rather a piece of code looking for \nelmah\n elements and validating them against the ELMAH Schema.\n\n\n\n\nIn the example above, I have a typo in the \nerrorLog\n element, which the validator points out.\n\n\nLike the \nELMAH Security Validator\n, this new validator is free for anyone to use. Also make sure to check out the \nELMAH XML Schema\n to add IntelliSense to your ELMAH configuration.", 
            "title": "ELMAH Configuration Validator"
        }, 
        {
            "location": "/elmah-configuration-validator/#elmah-configuration-validator", 
            "text": "", 
            "title": "ELMAH Configuration Validator"
        }, 
        {
            "location": "/elmah-configuration-validator/#thomas-ardal-march-15-2016", 
            "text": "Disclamer: Configuring ELMAH (as well as elmah.io) happens through your application configuration file (like web.config). In the next version of ASP.NET, web.config files are removed, but web.config files will probably continue to exist for years to come.   Let's face it, configuring ASP.NET applications in XML is sort of pain in the a... There's a trend towards fluent configuration in C# code, which is way easier to write and understand. But for now, ELMAH (as well as elmah.io) is configured in your web/app.config.  To ease writing ELMAH configuration, we  created a GitHub repository  a couple of days ago, with a XML schema for writing ELMAH config, originally created by Jeff Lingis. Today we take another step towards writing pain-free ELMAH config. Please welcome the  ELMAH Configuration Validator .  The ELMAH Configuration Validator lets you validate your web.config file for errors in your ELMAH config. It's not a validator for web.config files per se, but rather a piece of code looking for  elmah  elements and validating them against the ELMAH Schema.   In the example above, I have a typo in the  errorLog  element, which the validator points out.  Like the  ELMAH Security Validator , this new validator is free for anyone to use. Also make sure to check out the  ELMAH XML Schema  to add IntelliSense to your ELMAH configuration.", 
            "title": "Thomas Ardal, March 15, 2016"
        }, 
        {
            "location": "/the-elmah-schema/", 
            "text": "The ELMAH Schema\n\n\nThomas Ardal\n, March 11, 2016\n\n\n\n\nDisclamer: Configuring ELMAH (as well as elmah.io) happens through your application configuration file (like web.config). In the next version of ASP.NET, web.config files are removed, but web.config files will probably continue to exist for years to come.\n\n\n\n\nBoth ELMAH and elmah.io automatically adds configuration to web.config during installation of the NuGet package, but you may want to edit the ELMAH configuration from time to time. Since Visual Studio doesn't provide IntelliSense for non-Microsoft configuration, you will need to look in the ELMAH documentation when needing to configure ELMAH.\n\n\nWe are happy to report that we've taken ownership of the ELMAH Configuration XML Schema. Drop the XML Schema anywhere in your project and add a namespace to your \nelmah\n element:\n\n\nelmah xmlns=\nhttp://Elmah.Configuration\n\n\n/elmah\n\n\n\n\n\nThat's it! Start adding some config:\n\n\n\n\nThe ELMAH XML Schema has \nits own repository on GitHub\n and we already started adding support for third-party error loggers for ELMAH. Please create a pull request if you want to add support for your error log extension.", 
            "title": "The ELMAH Schema"
        }, 
        {
            "location": "/the-elmah-schema/#the-elmah-schema", 
            "text": "", 
            "title": "The ELMAH Schema"
        }, 
        {
            "location": "/the-elmah-schema/#thomas-ardal-march-11-2016", 
            "text": "Disclamer: Configuring ELMAH (as well as elmah.io) happens through your application configuration file (like web.config). In the next version of ASP.NET, web.config files are removed, but web.config files will probably continue to exist for years to come.   Both ELMAH and elmah.io automatically adds configuration to web.config during installation of the NuGet package, but you may want to edit the ELMAH configuration from time to time. Since Visual Studio doesn't provide IntelliSense for non-Microsoft configuration, you will need to look in the ELMAH documentation when needing to configure ELMAH.  We are happy to report that we've taken ownership of the ELMAH Configuration XML Schema. Drop the XML Schema anywhere in your project and add a namespace to your  elmah  element:  elmah xmlns= http://Elmah.Configuration  /elmah   That's it! Start adding some config:   The ELMAH XML Schema has  its own repository on GitHub  and we already started adding support for third-party error loggers for ELMAH. Please create a pull request if you want to add support for your error log extension.", 
            "title": "Thomas Ardal, March 11, 2016"
        }, 
        {
            "location": "/ten-improvements-in-ten-days-roundup/", 
            "text": "10 Improvements in 10 Days Roundup\n\n\nThomas Ardal\n, March 8, 2018\n\n\nDuring the last two weeks, we have tried something new with our \n10 Improvements in 10 Days\n series. The idea were to implement a small improvement every week day. To sum up, a lot of good stuff have been added to elmah.io.\n\n\nThree new products have been added to the \nGoodie Bag\n, our discount bag for Business and Enterprise customers. Wednesday in week 1, \nProgramming Languages ABC++ and Release!\n were added, while \nMyGet\n were added Thursday in week 2.\n\n\nThe message details view have been heavily improved as well, with the \ncompact\n and \nimproved toolbar\n, a new \nstatus code view\n, \nnicely formatted dates\n and \nHTTP methods\n as well as the new \nuser agent view\n.\n\n\nTuesday in week 1, we \nincreased the session timeout\n and to round it all of, we implemented the new \nELMAH Security Validator\n, available for everyone to use.\n\n\nFocusing on the small things have been a great experience and definitely something that we want to do again.", 
            "title": "10 Improvements in 10 Days Roundup"
        }, 
        {
            "location": "/ten-improvements-in-ten-days-roundup/#10-improvements-in-10-days-roundup", 
            "text": "", 
            "title": "10 Improvements in 10 Days Roundup"
        }, 
        {
            "location": "/ten-improvements-in-ten-days-roundup/#thomas-ardal-march-8-2018", 
            "text": "During the last two weeks, we have tried something new with our  10 Improvements in 10 Days  series. The idea were to implement a small improvement every week day. To sum up, a lot of good stuff have been added to elmah.io.  Three new products have been added to the  Goodie Bag , our discount bag for Business and Enterprise customers. Wednesday in week 1,  Programming Languages ABC++ and Release!  were added, while  MyGet  were added Thursday in week 2.  The message details view have been heavily improved as well, with the  compact  and  improved toolbar , a new  status code view ,  nicely formatted dates  and  HTTP methods  as well as the new  user agent view .  Tuesday in week 1, we  increased the session timeout  and to round it all of, we implemented the new  ELMAH Security Validator , available for everyone to use.  Focusing on the small things have been a great experience and definitely something that we want to do again.", 
            "title": "Thomas Ardal, March 8, 2018"
        }, 
        {
            "location": "/improvement-ten-elmah-security-validator/", 
            "text": "Improvement #10 - ELMAH Security Validator\n\n\nThomas Ardal\n, March 4, 2016\n\n\nThis is the tenth and final post in the series \n10 improvements in 10 days\n. Yesterday we \ngave away a 15 % discount on MyGet\n. Today we wanted to end this series with a big bang.\n\n\nOne of the nice features in ELMAH is also one of the more dangerous. As default, access to your ELMAH logs (/elmah.axd) is available from localhost only. But using a small config change, you can actually browse your errors logs on a deployed website. Troy Hunt already \nproved why open ELMAH logs are very dangerous\n and can be easily exploited by hackers. To help you secure your ELMAH logs, we introduce the ELMAH Security Validator.\n\n\nThe ELMAH Security Validator lets you input your URL and seconds later you will be presented with the result of the scan:\n\n\n\n\nThe tool is available at \nhttps://elmah.io/tools/validator\n.\n\n\nWe'll do a follow up on all of the improvements next week. So for now, have a great weekend.", 
            "title": "ELMAH Security Validator"
        }, 
        {
            "location": "/improvement-ten-elmah-security-validator/#improvement-10-elmah-security-validator", 
            "text": "", 
            "title": "Improvement #10 - ELMAH Security Validator"
        }, 
        {
            "location": "/improvement-ten-elmah-security-validator/#thomas-ardal-march-4-2016", 
            "text": "This is the tenth and final post in the series  10 improvements in 10 days . Yesterday we  gave away a 15 % discount on MyGet . Today we wanted to end this series with a big bang.  One of the nice features in ELMAH is also one of the more dangerous. As default, access to your ELMAH logs (/elmah.axd) is available from localhost only. But using a small config change, you can actually browse your errors logs on a deployed website. Troy Hunt already  proved why open ELMAH logs are very dangerous  and can be easily exploited by hackers. To help you secure your ELMAH logs, we introduce the ELMAH Security Validator.  The ELMAH Security Validator lets you input your URL and seconds later you will be presented with the result of the scan:   The tool is available at  https://elmah.io/tools/validator .  We'll do a follow up on all of the improvements next week. So for now, have a great weekend.", 
            "title": "Thomas Ardal, March 4, 2016"
        }, 
        {
            "location": "/improvement-nine-myget-discount-available-in-the-goodie-bag/", 
            "text": "Improvement #9 - MyGet Discount Available in the Goodie Bag\n\n\nThomas Ardal\n, March 3, 2016\n\n\nThis is the ninth post in the series \n10 improvements in 10 days\n. Yesterday we \nimproved the toolbar\n even further. Today we are ready to announce a new discount in the elmah.io Goodie Bag:\n\n\n\n\nThat's right folks. Users eligibility for the goodie bag, now gets a 15 % discount the first year, when signing up for one of MyGets plans.\n\n\nIf you don't know MyGet you are in for a treat. Like elmah.io is logging in the cloud, MyGet is NuGet, npm, Bower and VSIX in the cloud. Create package sources online and upload of all your packages to MyGet.", 
            "title": "MyGet Discount Available in the Goodie Bag"
        }, 
        {
            "location": "/improvement-nine-myget-discount-available-in-the-goodie-bag/#improvement-9-myget-discount-available-in-the-goodie-bag", 
            "text": "", 
            "title": "Improvement #9 - MyGet Discount Available in the Goodie Bag"
        }, 
        {
            "location": "/improvement-nine-myget-discount-available-in-the-goodie-bag/#thomas-ardal-march-3-2016", 
            "text": "This is the ninth post in the series  10 improvements in 10 days . Yesterday we  improved the toolbar  even further. Today we are ready to announce a new discount in the elmah.io Goodie Bag:   That's right folks. Users eligibility for the goodie bag, now gets a 15 % discount the first year, when signing up for one of MyGets plans.  If you don't know MyGet you are in for a treat. Like elmah.io is logging in the cloud, MyGet is NuGet, npm, Bower and VSIX in the cloud. Create package sources online and upload of all your packages to MyGet.", 
            "title": "Thomas Ardal, March 3, 2016"
        }, 
        {
            "location": "/improvement-eight-an-even-better-toolbar/", 
            "text": "Improvement #8 - An Even Better Toolbar\n\n\nThomas Ardal\n, March 2, 2016\n\n\nThis is the eight post in the series \n10 improvements in 10 days\n. Yesterday we introduced a completely new feature called \nUser Agent View\n. Today we continue to improve the message details toolbar.\n\n\nRemember last week were we \ncompressed the toolbar\n in the message details? Well today you will start to see some advantages in doing so. As of now, the toolbar contains three additional buttons:\n\n\n\n\nThe burger icon opens the message overlay as previously, but the next three buttons are new. The first button triggers the \nExtended User Details\n view. The second button opens the new \nUser Agent View\n that we introduced yesterday. The third button opens the pimped \nStatus Code View\n introduced last week.\n\n\nIn fact no new features are triggered from these buttons, but we want to move everything clickable to the toolbar eventually. The Extended User Information feature has been available for some time, but it turned out that few of you actually knew about this awesome feature. Moving actions to the toolbar makes it explicit what can be clicked and what cannot.", 
            "title": "An Even Better Toolbar"
        }, 
        {
            "location": "/improvement-eight-an-even-better-toolbar/#improvement-8-an-even-better-toolbar", 
            "text": "", 
            "title": "Improvement #8 - An Even Better Toolbar"
        }, 
        {
            "location": "/improvement-eight-an-even-better-toolbar/#thomas-ardal-march-2-2016", 
            "text": "This is the eight post in the series  10 improvements in 10 days . Yesterday we introduced a completely new feature called  User Agent View . Today we continue to improve the message details toolbar.  Remember last week were we  compressed the toolbar  in the message details? Well today you will start to see some advantages in doing so. As of now, the toolbar contains three additional buttons:   The burger icon opens the message overlay as previously, but the next three buttons are new. The first button triggers the  Extended User Details  view. The second button opens the new  User Agent View  that we introduced yesterday. The third button opens the pimped  Status Code View  introduced last week.  In fact no new features are triggered from these buttons, but we want to move everything clickable to the toolbar eventually. The Extended User Information feature has been available for some time, but it turned out that few of you actually knew about this awesome feature. Moving actions to the toolbar makes it explicit what can be clicked and what cannot.", 
            "title": "Thomas Ardal, March 2, 2016"
        }, 
        {
            "location": "/improvement-seven-user-agent-view/", 
            "text": "Improvement #7 - User Agent View\n\n\nThomas Ardal\n, March 1, 2016\n\n\nThis is the seventh post in the series \n10 improvements in 10 days\n. Yesterday we \nimproved how dates are shown\n on elmah.io. Today we cheated a bit and used the occasion to finish a feature that we have been working on for some time.\n\n\nSince redesigning the message details last year, we've shown informative buttons:\n\n\n\n\nIn the example above, elmah.io shows us that the message is generated by Chrome on Windows. While the user icon to the left is clickable, the Browser and Operating system buttons have been informative only. Until now! With todays improvement, clicking one of the buttons will show the new User Agent View:\n\n\n\n\nThis nice new dialog shows a lot of detailed information about the browser generating this message. Icons in the top left corner tells you that this happened on a desktop Windows Chrome browser. Below, all of the information from the user agent are extracted and shown using friendly names. Finally, to the right you'll see a graph showing how affected your application is from this particular user agent.", 
            "title": "User Agent View"
        }, 
        {
            "location": "/improvement-seven-user-agent-view/#improvement-7-user-agent-view", 
            "text": "", 
            "title": "Improvement #7 - User Agent View"
        }, 
        {
            "location": "/improvement-seven-user-agent-view/#thomas-ardal-march-1-2016", 
            "text": "This is the seventh post in the series  10 improvements in 10 days . Yesterday we  improved how dates are shown  on elmah.io. Today we cheated a bit and used the occasion to finish a feature that we have been working on for some time.  Since redesigning the message details last year, we've shown informative buttons:   In the example above, elmah.io shows us that the message is generated by Chrome on Windows. While the user icon to the left is clickable, the Browser and Operating system buttons have been informative only. Until now! With todays improvement, clicking one of the buttons will show the new User Agent View:   This nice new dialog shows a lot of detailed information about the browser generating this message. Icons in the top left corner tells you that this happened on a desktop Windows Chrome browser. Below, all of the information from the user agent are extracted and shown using friendly names. Finally, to the right you'll see a graph showing how affected your application is from this particular user agent.", 
            "title": "Thomas Ardal, March 1, 2016"
        }, 
        {
            "location": "/improvement-six-nicely-formatted-dates/", 
            "text": "Improvement #6 - Nicely Formatted Dates\n\n\nThomas Ardal\n, February 29, 2016\n\n\nThis is the sixth post in the series \n10 improvements in 10 days\n. Last week, we made 5 nice little improvements to you. Today, we want to improve how dates as shown on elmah.io.\n\n\nAll messages shows the date and time when the message where logged to elmah.io. We use the excelent JavaScript framework Moment.js to show a nicely formatted date and time:\n\n\n\n\nIn the example above, the message where logged \n8 days ago\n. Sometimes, \n8 days ago\n simply doesn't provide enough information and you want to see the exact date and time of that particular message. We previously had a pretty awful ToString representation when hovering the date. With todays improvment, we generate a nicely formatted (browser locale aware) tooltip:\n\n\n\n\nThis change is available in both the list, the error details and in the error page available through the permalink.", 
            "title": "Nicely Formatted Dates"
        }, 
        {
            "location": "/improvement-six-nicely-formatted-dates/#improvement-6-nicely-formatted-dates", 
            "text": "", 
            "title": "Improvement #6 - Nicely Formatted Dates"
        }, 
        {
            "location": "/improvement-six-nicely-formatted-dates/#thomas-ardal-february-29-2016", 
            "text": "This is the sixth post in the series  10 improvements in 10 days . Last week, we made 5 nice little improvements to you. Today, we want to improve how dates as shown on elmah.io.  All messages shows the date and time when the message where logged to elmah.io. We use the excelent JavaScript framework Moment.js to show a nicely formatted date and time:   In the example above, the message where logged  8 days ago . Sometimes,  8 days ago  simply doesn't provide enough information and you want to see the exact date and time of that particular message. We previously had a pretty awful ToString representation when hovering the date. With todays improvment, we generate a nicely formatted (browser locale aware) tooltip:   This change is available in both the list, the error details and in the error page available through the permalink.", 
            "title": "Thomas Ardal, February 29, 2016"
        }, 
        {
            "location": "/improvement-five-status-codes-with-a-vengeance/", 
            "text": "Improvement #5 - Status Codes with a Vengeance\n\n\nThomas Ardal\n, February 26, 2016\n\n\nThis is the fifth post in the series \n10 improvements in 10 days\n. Yesterday we \nmade a compact toolbar\n. Today, we enrich the error details with yet another piece of helpful information.\n\n\nWe mainly focus on logging website errors (all major log frameworks are supported as well). All website error have a HTTP status code from the HTTP specification. All of us probably know the most common types of errors like 404 (Not Found) and 500 (Internal Server Error). But what happens when your website suddenly starts throwing 418's (I'm a teapot)? elmah.io to the rescue. With todays improvement, we start color coding HTTP status code with the severity of the particular code:\n\n\n\n\nIn the example above, the HTTP status code of 400 (Bad Request) is considered a warning and therefore yellow colored. What's even more cool is when you click the status code:\n\n\n\n\nClicking the status code shows a modal dialog with an explanation of the clicked status code. We have some ideas for improving this dialog even further, but for now it shows the code and description.\n\n\nThe first week of our two week improvement series has passed. A lot of good stuff went into elmah.io in the last 5 days. We cannot wait to implement more improvements next week. Have a great weekend everyone!", 
            "title": "Status Code with a Vengeance"
        }, 
        {
            "location": "/improvement-five-status-codes-with-a-vengeance/#improvement-5-status-codes-with-a-vengeance", 
            "text": "", 
            "title": "Improvement #5 - Status Codes with a Vengeance"
        }, 
        {
            "location": "/improvement-five-status-codes-with-a-vengeance/#thomas-ardal-february-26-2016", 
            "text": "This is the fifth post in the series  10 improvements in 10 days . Yesterday we  made a compact toolbar . Today, we enrich the error details with yet another piece of helpful information.  We mainly focus on logging website errors (all major log frameworks are supported as well). All website error have a HTTP status code from the HTTP specification. All of us probably know the most common types of errors like 404 (Not Found) and 500 (Internal Server Error). But what happens when your website suddenly starts throwing 418's (I'm a teapot)? elmah.io to the rescue. With todays improvement, we start color coding HTTP status code with the severity of the particular code:   In the example above, the HTTP status code of 400 (Bad Request) is considered a warning and therefore yellow colored. What's even more cool is when you click the status code:   Clicking the status code shows a modal dialog with an explanation of the clicked status code. We have some ideas for improving this dialog even further, but for now it shows the code and description.  The first week of our two week improvement series has passed. A lot of good stuff went into elmah.io in the last 5 days. We cannot wait to implement more improvements next week. Have a great weekend everyone!", 
            "title": "Thomas Ardal, February 26, 2016"
        }, 
        {
            "location": "/improvement-four-compact-toolbar/", 
            "text": "Improvement #4 - Compact Toolbar\n\n\nThomas Ardal\n, February 25, 2016\n\n\nThis is the fourth post in the series \n10 improvements in 10 days\n. Yesterday we \nadded two new products to the elmah.io Goodie Bag\n. Today, we wanted to improve both usage of space as well as usability on the error details.\n\n\nRemember the toolbar in the top right corner of every error message:\n\n\n\n\nWith todays improvement, the toolbar now looks like this:\n\n\n\n\nUsing icons instead of the long textual tool buttons, saves a lot of horizontal space. You may think \"Why change anything, since you already have a lot of empty space to the left\". Well, in fact the old toolbar made fewer pixels available for longer message titles. Also we are planning to put some additional buttons up there, which would take up even more precious space.", 
            "title": "Compact Toolbar"
        }, 
        {
            "location": "/improvement-four-compact-toolbar/#improvement-4-compact-toolbar", 
            "text": "", 
            "title": "Improvement #4 - Compact Toolbar"
        }, 
        {
            "location": "/improvement-four-compact-toolbar/#thomas-ardal-february-25-2016", 
            "text": "This is the fourth post in the series  10 improvements in 10 days . Yesterday we  added two new products to the elmah.io Goodie Bag . Today, we wanted to improve both usage of space as well as usability on the error details.  Remember the toolbar in the top right corner of every error message:   With todays improvement, the toolbar now looks like this:   Using icons instead of the long textual tool buttons, saves a lot of horizontal space. You may think \"Why change anything, since you already have a lot of empty space to the left\". Well, in fact the old toolbar made fewer pixels available for longer message titles. Also we are planning to put some additional buttons up there, which would take up even more precious space.", 
            "title": "Thomas Ardal, February 25, 2016"
        }, 
        {
            "location": "/improvement-three-two-new-and-fun-products-in-the-goodie-bag/", 
            "text": "Improvement #3 - Increased session timeout\n\n\nThomas Ardal\n, February 24, 2016\n\n\nThis is the third post in the series \n10 improvements in 10 days\n. Yesterday we \nincreased session timeout\n. Today, we are ready to present to new and fun products in the \nelmah.io Goodie Bag\n.\n\n\n40 % discount on Programming Languages ABC++\n\n\n\n\nIt's an alphabet book that aims to help us share what we do with the kids in our life, and spark children's interest in coding. The book follows the Bug, as it bumbles through the alphabet in colorful computer pun illustrations. Each page highlights a different language with a \u2018Hello World\u2019 program, and some factoids about the history of the language.\n\n\n40 % discount on Release!\n\n\n\n\nRelease! is a lightly themed game set in the world of software development. Creating software takes time, skill, the right team, and hard work. Release is a little quicker, and a lot more fun. Modeled on school trick taking games, Release! puts a spin on classic sensibilities with new scoring mechanics each round, and powerful special cards featuring some familiar faces from the industry.", 
            "title": "Two new and fun products in the Goodie bag"
        }, 
        {
            "location": "/improvement-three-two-new-and-fun-products-in-the-goodie-bag/#improvement-3-increased-session-timeout", 
            "text": "", 
            "title": "Improvement #3 - Increased session timeout"
        }, 
        {
            "location": "/improvement-three-two-new-and-fun-products-in-the-goodie-bag/#thomas-ardal-february-24-2016", 
            "text": "This is the third post in the series  10 improvements in 10 days . Yesterday we  increased session timeout . Today, we are ready to present to new and fun products in the  elmah.io Goodie Bag .", 
            "title": "Thomas Ardal, February 24, 2016"
        }, 
        {
            "location": "/improvement-three-two-new-and-fun-products-in-the-goodie-bag/#40-discount-on-programming-languages-abc", 
            "text": "It's an alphabet book that aims to help us share what we do with the kids in our life, and spark children's interest in coding. The book follows the Bug, as it bumbles through the alphabet in colorful computer pun illustrations. Each page highlights a different language with a \u2018Hello World\u2019 program, and some factoids about the history of the language.", 
            "title": "40 % discount on Programming Languages ABC++"
        }, 
        {
            "location": "/improvement-three-two-new-and-fun-products-in-the-goodie-bag/#40-discount-on-release", 
            "text": "Release! is a lightly themed game set in the world of software development. Creating software takes time, skill, the right team, and hard work. Release is a little quicker, and a lot more fun. Modeled on school trick taking games, Release! puts a spin on classic sensibilities with new scoring mechanics each round, and powerful special cards featuring some familiar faces from the industry.", 
            "title": "40 % discount on Release!"
        }, 
        {
            "location": "/improvement-two-increased-session-timeout/", 
            "text": "Improvement #2 - Increased session timeout\n\n\nThomas Ardal\n, February 23, 2016\n\n\nThis is the second post in the series \n10 improvements in 10 days\n. Yesterday we introduced a new feature named \nHTTP method on URLs\n. Today, we introduce an improvement which may not have required as much code, but on the other hand have been requested by a lot of you: Increased session timeout (to 60 minutes).\n\n\nWe are currently using a combination of ASP.NET Forms Authentication and the open source \nSimpleAuthentication\n library for authenticating against social providers. We may want to switch to ASP.NET Identity, but for now forms authentication is the framework of choice. Forms authentication defaults to a session timeout of 20 minutes, meaning that you will automatically be logged out, if you're inactive for 20 minutes. As of today, the timeout has been increased to 60 minutes.\n\n\nSome of you asked us to remove session timeout completely. While we see some benefits of doing so, removing session timeout also introduces security issues. Your error logs are a delicate thing and you dont want people outside your organization getting access to your logs. To learn more about why ELMAH logs should be kept a secret, check out Troy Hunts awesome blog post: \nASP.NET session hijacking with Google and ELMAH\n.", 
            "title": "Increased session timeout"
        }, 
        {
            "location": "/improvement-two-increased-session-timeout/#improvement-2-increased-session-timeout", 
            "text": "", 
            "title": "Improvement #2 - Increased session timeout"
        }, 
        {
            "location": "/improvement-two-increased-session-timeout/#thomas-ardal-february-23-2016", 
            "text": "This is the second post in the series  10 improvements in 10 days . Yesterday we introduced a new feature named  HTTP method on URLs . Today, we introduce an improvement which may not have required as much code, but on the other hand have been requested by a lot of you: Increased session timeout (to 60 minutes).  We are currently using a combination of ASP.NET Forms Authentication and the open source  SimpleAuthentication  library for authenticating against social providers. We may want to switch to ASP.NET Identity, but for now forms authentication is the framework of choice. Forms authentication defaults to a session timeout of 20 minutes, meaning that you will automatically be logged out, if you're inactive for 20 minutes. As of today, the timeout has been increased to 60 minutes.  Some of you asked us to remove session timeout completely. While we see some benefits of doing so, removing session timeout also introduces security issues. Your error logs are a delicate thing and you dont want people outside your organization getting access to your logs. To learn more about why ELMAH logs should be kept a secret, check out Troy Hunts awesome blog post:  ASP.NET session hijacking with Google and ELMAH .", 
            "title": "Thomas Ardal, February 23, 2016"
        }, 
        {
            "location": "/improvement-one-http-method-on-urls/", 
            "text": "Improvement #1 - HTTP method on URLs\n\n\nThomas Ardal\n, February 22, 2016\n\n\nThis is the first post in the series \n10 improvements in 10 days\n. Today, we wanted to improve the way URLs are shown on elmah.io. When dealing with web sites (especially Web APIs), not only the URL of an error is important, but also the HTTP method. A single resource URL can have multiple allowed methods. To make it more visible which resource that actually failed, we give you HTTP method on URLs:\n\n\n\n\nNotice the small label left of the URL in both the error details and the list? It may not look like much, but it makes a big difference when trying to get an overview on what's going on. Since HTTP method is now indexed in our Elasticsearch cluster as well, search for errors with a specific HTTP method is now possible:\n\n\n\n\nFinally, creating rules and apps on top of HTTP method is also open for anyone up for the challenge.\n\n\nTomorrow, we will implement a minor but often requested improvement to elmah.io.", 
            "title": "HTTP method on URLs"
        }, 
        {
            "location": "/improvement-one-http-method-on-urls/#improvement-1-http-method-on-urls", 
            "text": "", 
            "title": "Improvement #1 - HTTP method on URLs"
        }, 
        {
            "location": "/improvement-one-http-method-on-urls/#thomas-ardal-february-22-2016", 
            "text": "This is the first post in the series  10 improvements in 10 days . Today, we wanted to improve the way URLs are shown on elmah.io. When dealing with web sites (especially Web APIs), not only the URL of an error is important, but also the HTTP method. A single resource URL can have multiple allowed methods. To make it more visible which resource that actually failed, we give you HTTP method on URLs:   Notice the small label left of the URL in both the error details and the list? It may not look like much, but it makes a big difference when trying to get an overview on what's going on. Since HTTP method is now indexed in our Elasticsearch cluster as well, search for errors with a specific HTTP method is now possible:   Finally, creating rules and apps on top of HTTP method is also open for anyone up for the challenge.  Tomorrow, we will implement a minor but often requested improvement to elmah.io.", 
            "title": "Thomas Ardal, February 22, 2016"
        }, 
        {
            "location": "/ten-improvements-in-ten-days/", 
            "text": "10 improvements in 10 days\n\n\nThomas Ardal\n, February 15, 2016\n\n\nThe following 2 weeks, we want to try something new: making a daily improvement to elmah.io and blog about it. We constantly make adjustments to the UI and create small features, that aren't really highlighted anywhere. With an approach like this, you will be able to follow the daily work of making elmah.io the most crisp cloud logging experience out there.\n\n\nTo be honest, we didn't came up with this idea ourselves. One of our competitors did a similar thing last year and we liked the idea so much, that we are going to try it our for ourselves. If the series turns out a success, we may start blogging more about the small things. For now, you can expect 10 days of action-packed improvements to elmah.io, starting next Monday.", 
            "title": "10 Improvements in 10 Days"
        }, 
        {
            "location": "/ten-improvements-in-ten-days/#10-improvements-in-10-days", 
            "text": "", 
            "title": "10 improvements in 10 days"
        }, 
        {
            "location": "/ten-improvements-in-ten-days/#thomas-ardal-february-15-2016", 
            "text": "The following 2 weeks, we want to try something new: making a daily improvement to elmah.io and blog about it. We constantly make adjustments to the UI and create small features, that aren't really highlighted anywhere. With an approach like this, you will be able to follow the daily work of making elmah.io the most crisp cloud logging experience out there.  To be honest, we didn't came up with this idea ourselves. One of our competitors did a similar thing last year and we liked the idea so much, that we are going to try it our for ourselves. If the series turns out a success, we may start blogging more about the small things. For now, you can expect 10 days of action-packed improvements to elmah.io, starting next Monday.", 
            "title": "Thomas Ardal, February 15, 2016"
        }, 
        {
            "location": "/elmah-io-appstore/", 
            "text": "The elmah.io AppStore\n\n\nThomas Ardal\n, January 15, 2016\n\n\nWe have just started rolling out our new AppStore. Apps on elmah.io means integrations to different third-party systems, using a single click and a bit of configuration. As of today, we offer native integration with Slack, HipChat and RequestBin:\n\n\n\n\nThe AppStore is available beneath your log settings. To install a new App, simply hit install and input the App configuration in the App overlay:\n\n\n\n\nIn this initial beta version, Apps are backed by elmah.io Rules, which means that Ignore, Delete, Mail and HTTP Apps are supported only. In the future, we plan to extend this to support other types of integrations as well.\n\n\nIf you want to develop an app, please \ncontact us\n for details. We are currently working on documenting how to utilize the AppStore possibilities in elmah.io.", 
            "title": "The elmah.io AppStore"
        }, 
        {
            "location": "/elmah-io-appstore/#the-elmahio-appstore", 
            "text": "", 
            "title": "The elmah.io AppStore"
        }, 
        {
            "location": "/elmah-io-appstore/#thomas-ardal-january-15-2016", 
            "text": "We have just started rolling out our new AppStore. Apps on elmah.io means integrations to different third-party systems, using a single click and a bit of configuration. As of today, we offer native integration with Slack, HipChat and RequestBin:   The AppStore is available beneath your log settings. To install a new App, simply hit install and input the App configuration in the App overlay:   In this initial beta version, Apps are backed by elmah.io Rules, which means that Ignore, Delete, Mail and HTTP Apps are supported only. In the future, we plan to extend this to support other types of integrations as well.  If you want to develop an app, please  contact us  for details. We are currently working on documenting how to utilize the AppStore possibilities in elmah.io.", 
            "title": "Thomas Ardal, January 15, 2016"
        }, 
        {
            "location": "/discounts-on-popular-net-tools-with-the-elmah-io-goodie-bag/", 
            "text": "Discounts on popular .NET tools with the elmah.io Goodie Bag\n\n\nThomas Ardal\n, December 11, 2015\n\n\nLike you, we are .NET developers with a love for the possibilities in C# and all of the related technologies and frameworks around it. Let's face it, we wont get anywhere without great tooling around our everyday work. That's why we have chosen to give you guys an early Christmas present this year. Please welcome the \nelmah.io Goodie Bag\n!\n\n\nThe Goodie Bag is our attempt to help other .NET developer to get some nice discounts on popular .NET related tools. We have been in dialog with a lot of tool providers during the last couple of months and we are ready to present you with the first 4 deals.\n\n\n\n\nFeel assured that the deals doesn't stop here. We are in dialog with a range of additional companies in order to expand the goodie bag even further. Keep an eye on the \nGoodie Bag landing page\n and/or follow our \nTwitter\n, \nFacebook\n and \nGoogle+\n pages in order to be updated when new deals arrive.\n\n\nEveryone with an active Business or Enterprise subscription are entitled to redeem the offers in the goodie bag.", 
            "title": "Discounts on popular .NET tools with the elmah.io Goodie Bag"
        }, 
        {
            "location": "/discounts-on-popular-net-tools-with-the-elmah-io-goodie-bag/#discounts-on-popular-net-tools-with-the-elmahio-goodie-bag", 
            "text": "", 
            "title": "Discounts on popular .NET tools with the elmah.io Goodie Bag"
        }, 
        {
            "location": "/discounts-on-popular-net-tools-with-the-elmah-io-goodie-bag/#thomas-ardal-december-11-2015", 
            "text": "Like you, we are .NET developers with a love for the possibilities in C# and all of the related technologies and frameworks around it. Let's face it, we wont get anywhere without great tooling around our everyday work. That's why we have chosen to give you guys an early Christmas present this year. Please welcome the  elmah.io Goodie Bag !  The Goodie Bag is our attempt to help other .NET developer to get some nice discounts on popular .NET related tools. We have been in dialog with a lot of tool providers during the last couple of months and we are ready to present you with the first 4 deals.   Feel assured that the deals doesn't stop here. We are in dialog with a range of additional companies in order to expand the goodie bag even further. Keep an eye on the  Goodie Bag landing page  and/or follow our  Twitter ,  Facebook  and  Google+  pages in order to be updated when new deals arrive.  Everyone with an active Business or Enterprise subscription are entitled to redeem the offers in the goodie bag.", 
            "title": "Thomas Ardal, December 11, 2015"
        }, 
        {
            "location": "/elmah-io-technology-stack/", 
            "text": "elmah.io Technology Stack\n\n\nThomas Ardal\n, December 8, 2015\n\n\nWe often get this question:\n\n\n\n\nWhich technologies, tools and frameworks do you use to develop and host elmah.io?\n\n\n\n\nWe already revealed some of the \"secrets\" in the post \nDanish service provides maximum scaling and secures data on Azure\n. This post is a thorough walkthrough of the technologies in play in order to keep the elmah.io engine running.\n\n\nWindows Azure\n\n\nelmah.io runs entirely on Windows Azure. We use a combination of web apps, virtual machines, service bus and storage to host everything in the cloud.\n\n\nASP.NET MVC\n\n\nelmah.io is pretty much a single page application. All of the static HTML seen in the UI is served by ASP.NET MVC. We actually started out with simple HTML files, but quickly found out that MVC offers so much more than Razor (which we don't use).\n\n\nASP.NET Web API\n\n\nBoth our internal API for feeding the UI, as well as our public API are hosted by ASP.NET Web API. Web API may not be the coolest kid on the block, but it works great and actually got some nice features from v2.\n\n\nElasticsearch\n\n\nIf you ever wondered how elmah.io is able to provide instant search results when executing full text queries from the UI, Elasticsearch is the answer. This perfect NoSQL database is the foundation for most of the data access on elmah.io.\n\n\nRedis\n\n\nEveryone needs caching in order to provide a responsive product. Redis has turned out as the perfect choice for not only cache DB data, but also persist temporary statistics about which mails have been send etc.\n\n\nVisual Studio\n\n\nCouldn't really develop without it. Everything from the website to all of the backend code is developed in Visual Studio.\n\n\nReSharper\n\n\nWe'd love to tell you that we type fast enough to code without ReSharper. Unfortunately this is not that case. ReSharper provides us with so many nice features to speed up development time.\n\n\nTeamCity\n\n\nDeveloping a product in 2015 without a build server is wack. We use TeamCity to build and test our internal code. For the open source parts of elmah.io, we use a combination of TeamCity provided by CodeBetter and Appveyor.\n\n\nelmah.io\n\n\nOne of the goals for elmah.io, is to be able to work as a cloud logging platform for ... well elmah.io. We eat our own dog food and use all of the features in elmah.io ourselves. In parallel, we use Serilog and Elasticsearch to log a copy of all messages. If elmah.io goes down, we always have an external log telling us what went wrong.\n\n\nMandrill\n\n\nWe send a lot of transactional mails. Various features for sending emails from elmah.io are available and for that we use Mandrill. Mandrill provides some nice templating features that we blogged about as well: \nSending transactional emails using Mandrill and .NET\n.\n\n\nNew Relic\n\n\nWe want to provide the best performing cloud logging platform out there. To keep an eye on performance and to debug when something starts performing poorly, we monitor every web request with New Relic.\n\n\nPaymill\n\n\nWe wouldn't be anywhere if we weren't able to accept payments from our users. Paymill handles all of our transactions.\n\n\nMkDocs\n\n\nWe recently switched from Wordpress to MkDocs on all of our static stuff like documentation and blog. MkDocs is a nice little documentation tool written in Python. Every article and blog post are now written in Markdown and \navailable on GitHub\n.\n\n\nFrameworks\n\n\nBesides all of the larger products and SaaS services, we use a large range of .NET frameworks for implementing and testing the various elmah.io features. NUnit, Moq and Autofixture for unit testing. Autofac for dependency injection. A range of client side libraries for building the crisp elmah.io UI like Knockout, Bootstrap, jQuery and d3. For integrating with social providers, we use SimpleAuthentication, a lightweight framework for hooking up with Facebook etc. Topshelf runs a bunch of Windows Services, hosting different consumers of our service bus, sending out emails etc.\n\n\nThat's it. Or maybe we forgot something :) Please use the comments below to tell us what you think about our stack or maybe even share your own stack.", 
            "title": "elmah.io Technology Stack"
        }, 
        {
            "location": "/elmah-io-technology-stack/#elmahio-technology-stack", 
            "text": "", 
            "title": "elmah.io Technology Stack"
        }, 
        {
            "location": "/elmah-io-technology-stack/#thomas-ardal-december-8-2015", 
            "text": "We often get this question:   Which technologies, tools and frameworks do you use to develop and host elmah.io?   We already revealed some of the \"secrets\" in the post  Danish service provides maximum scaling and secures data on Azure . This post is a thorough walkthrough of the technologies in play in order to keep the elmah.io engine running.", 
            "title": "Thomas Ardal, December 8, 2015"
        }, 
        {
            "location": "/elmah-io-technology-stack/#windows-azure", 
            "text": "elmah.io runs entirely on Windows Azure. We use a combination of web apps, virtual machines, service bus and storage to host everything in the cloud.", 
            "title": "Windows Azure"
        }, 
        {
            "location": "/elmah-io-technology-stack/#aspnet-mvc", 
            "text": "elmah.io is pretty much a single page application. All of the static HTML seen in the UI is served by ASP.NET MVC. We actually started out with simple HTML files, but quickly found out that MVC offers so much more than Razor (which we don't use).", 
            "title": "ASP.NET MVC"
        }, 
        {
            "location": "/elmah-io-technology-stack/#aspnet-web-api", 
            "text": "Both our internal API for feeding the UI, as well as our public API are hosted by ASP.NET Web API. Web API may not be the coolest kid on the block, but it works great and actually got some nice features from v2.", 
            "title": "ASP.NET Web API"
        }, 
        {
            "location": "/elmah-io-technology-stack/#elasticsearch", 
            "text": "If you ever wondered how elmah.io is able to provide instant search results when executing full text queries from the UI, Elasticsearch is the answer. This perfect NoSQL database is the foundation for most of the data access on elmah.io.", 
            "title": "Elasticsearch"
        }, 
        {
            "location": "/elmah-io-technology-stack/#redis", 
            "text": "Everyone needs caching in order to provide a responsive product. Redis has turned out as the perfect choice for not only cache DB data, but also persist temporary statistics about which mails have been send etc.", 
            "title": "Redis"
        }, 
        {
            "location": "/elmah-io-technology-stack/#visual-studio", 
            "text": "Couldn't really develop without it. Everything from the website to all of the backend code is developed in Visual Studio.", 
            "title": "Visual Studio"
        }, 
        {
            "location": "/elmah-io-technology-stack/#resharper", 
            "text": "We'd love to tell you that we type fast enough to code without ReSharper. Unfortunately this is not that case. ReSharper provides us with so many nice features to speed up development time.", 
            "title": "ReSharper"
        }, 
        {
            "location": "/elmah-io-technology-stack/#teamcity", 
            "text": "Developing a product in 2015 without a build server is wack. We use TeamCity to build and test our internal code. For the open source parts of elmah.io, we use a combination of TeamCity provided by CodeBetter and Appveyor.", 
            "title": "TeamCity"
        }, 
        {
            "location": "/elmah-io-technology-stack/#elmahio", 
            "text": "One of the goals for elmah.io, is to be able to work as a cloud logging platform for ... well elmah.io. We eat our own dog food and use all of the features in elmah.io ourselves. In parallel, we use Serilog and Elasticsearch to log a copy of all messages. If elmah.io goes down, we always have an external log telling us what went wrong.", 
            "title": "elmah.io"
        }, 
        {
            "location": "/elmah-io-technology-stack/#mandrill", 
            "text": "We send a lot of transactional mails. Various features for sending emails from elmah.io are available and for that we use Mandrill. Mandrill provides some nice templating features that we blogged about as well:  Sending transactional emails using Mandrill and .NET .", 
            "title": "Mandrill"
        }, 
        {
            "location": "/elmah-io-technology-stack/#new-relic", 
            "text": "We want to provide the best performing cloud logging platform out there. To keep an eye on performance and to debug when something starts performing poorly, we monitor every web request with New Relic.", 
            "title": "New Relic"
        }, 
        {
            "location": "/elmah-io-technology-stack/#paymill", 
            "text": "We wouldn't be anywhere if we weren't able to accept payments from our users. Paymill handles all of our transactions.", 
            "title": "Paymill"
        }, 
        {
            "location": "/elmah-io-technology-stack/#mkdocs", 
            "text": "We recently switched from Wordpress to MkDocs on all of our static stuff like documentation and blog. MkDocs is a nice little documentation tool written in Python. Every article and blog post are now written in Markdown and  available on GitHub .", 
            "title": "MkDocs"
        }, 
        {
            "location": "/elmah-io-technology-stack/#frameworks", 
            "text": "Besides all of the larger products and SaaS services, we use a large range of .NET frameworks for implementing and testing the various elmah.io features. NUnit, Moq and Autofixture for unit testing. Autofac for dependency injection. A range of client side libraries for building the crisp elmah.io UI like Knockout, Bootstrap, jQuery and d3. For integrating with social providers, we use SimpleAuthentication, a lightweight framework for hooking up with Facebook etc. Topshelf runs a bunch of Windows Services, hosting different consumers of our service bus, sending out emails etc.  That's it. Or maybe we forgot something :) Please use the comments below to tell us what you think about our stack or maybe even share your own stack.", 
            "title": "Frameworks"
        }, 
        {
            "location": "/yearly-subscriptions/", 
            "text": "Yearly Subscriptions\n\n\nThomas Ardal\n, December 1, 2015\n\n\nYour wish is our command. Well almost. A recurring feature request have been yearly payments, known from similar SaaS applications. As of today, you will be able to choose to pay one year in advance on any elmah.io plan:\n\n\n\n\nHaving customers willing to pay yearly (rather than monthly) is something that we are extremely proud of. That kind of commitment tells us that our customers love the product. To show you some reverse love and to thank you for the commitment, we offer a \n10 % discount\n on all yearly subscriptions.\n\n\nAs usual, please wait until your current subscription expires, before making adjustments to the plan and payment cycle. We cannot offer you a refund if switching plans during the month/year.", 
            "title": "Yearly Subscriptions"
        }, 
        {
            "location": "/yearly-subscriptions/#yearly-subscriptions", 
            "text": "", 
            "title": "Yearly Subscriptions"
        }, 
        {
            "location": "/yearly-subscriptions/#thomas-ardal-december-1-2015", 
            "text": "Your wish is our command. Well almost. A recurring feature request have been yearly payments, known from similar SaaS applications. As of today, you will be able to choose to pay one year in advance on any elmah.io plan:   Having customers willing to pay yearly (rather than monthly) is something that we are extremely proud of. That kind of commitment tells us that our customers love the product. To show you some reverse love and to thank you for the commitment, we offer a  10 % discount  on all yearly subscriptions.  As usual, please wait until your current subscription expires, before making adjustments to the plan and payment cycle. We cannot offer you a refund if switching plans during the month/year.", 
            "title": "Thomas Ardal, December 1, 2015"
        }, 
        {
            "location": "/asp-net-error-logging-best-practices/", 
            "text": "ASP.NET Error Logging Best Practices\n\n\nThomas Ardal\n, December 1, 2015\n\n\nAdding error logging to an ASP.NET application can be quite the challenge. A lot of different tools and frameworks are available. Everyone probably know log4net, but a lot happened since the first .NET logging frameworks where conceived. This post will show you the best practices which will provide you with vital information about errors happening on your website.\n\n\nELMAH\n\n\nError logging module and handlers for ASP.NET (\nELMAH\n), the de-facto standard error component for .NET. ELMAH has existed for almost a decade but still works as wonderful as when it was initially released. The idea behind ELMAH is to log all uncaught exceptions including a lot of contextual information about the current HTTP context. ELMAH comes with a simple UI which shows you a list of errors happening and when, as well as some additional information like the type of error, the user causing the error and more.\n\n\n\n\n\n\nSince the ELMAH UI is available on \n/elmah.axd\n, make sure to either disallow remote access to this URL or configure ASP.NET authorization rules to only let people inside the circle of trust to access your error logs.\n\n\n\n\nYou can click each error and check out information about the server variables, cookies and other pieces of information, important to debug each error. ELMAH may not be the most hyped logging framework out there, but it works and it works great. We wouldn't implement a website without it.\n\n\n\n\nAn important note about ELMAH is to use the contrib package, matching the web framework you're using. If you develop an ASP.NET MVC application, use the \nElmah.Mvc\n package. If you develop a Nancy application, use the \nNancy.Elmah\n package etc.\n\n\n\n\nTo start using ELMAH, check out our \nELMAH Tutorial\n.\n\n\nSerilog\n\n\nELMAH only logs errors, why you probably need another logging framework to log other types of log messages like debug, information and warning messages. In theory, you could use ELMAH for other types of messages, but other logging frameworks are better suited for that need. Everyone knows log4net and NLog, but the logging framework we would like to highlight is \nSerilog\n. Serilog is a newer framework and therefore uses some of the more recent ideas behind logging as well as new libraries in .NET.\n\n\nThe idea behind Serilog is that your log messages are semantic/structured, which means that Serilog actually understands pieces of information inside your log message. Where a typical log message in log4net or NLog would look like this:\n\n\nExecuted /getuser in 15 ms\n\n\nan equivalent log message in Serilog would look like this:\n\n\nExecuted {Url} in {Elapsed} ms\n\n\nYou would then append the actual values of \nUrl\n and \nElapsed\n when logging the message to Serilog. What looks to be a simple string replace, is actually as very strong feature, where log messages suddently embeds vital and searchable information.\n\n\nSerilog implement the idea of destructoring by allowing you to log complex types to your log destinations. In theory, having the flexibility to log every .NET object seems like an awesome option. In the real world you should be very careful when logging complex objects with deep graph of references.\n\n\nUsing Serilog with a text file or relational database can be fine for testing purposes. If you want the full potential from Serilog, you need to log into a schemaless datastore like Elasticsearch, elmah.io or similar.\n\n\n\n\nWhen logging very complex objects to schemaless data stores like Elasticsearch, your mapping quickly becomes cluttered and performs poorly.\n\n\n\n\nTo start using Serilog, browse through the \nSerilog wiki\n. Also make sure to check out our Serilog sink for \nlogging to elmah.io from Serilog\n.\n\n\nCustom error pages\n\n\nDepending on how you setup your custom error pages, ELMAH and other logging frameworks may stop working. If your custom error pages actually catches the error and continues like no error happened, logging frameworks may never get notified about something bad happening.\n\n\n\n\nA good rule of thumb is to configure custom error pages as close to the IIS as possible. The closer you get to the actual ASP.NET pipeline, the more likely your error logging falls apart.\n\n\n\n\nThere's a lot of outdated tutorials on custom error pages out there. For the ultimate guide, read Dustin Moris Gorskis \nDemystifying ASP.NET MVC 5 Error Pages and Error Logging\n.", 
            "title": "ASP.NET Error Logging Best Practices"
        }, 
        {
            "location": "/asp-net-error-logging-best-practices/#aspnet-error-logging-best-practices", 
            "text": "", 
            "title": "ASP.NET Error Logging Best Practices"
        }, 
        {
            "location": "/asp-net-error-logging-best-practices/#thomas-ardal-december-1-2015", 
            "text": "Adding error logging to an ASP.NET application can be quite the challenge. A lot of different tools and frameworks are available. Everyone probably know log4net, but a lot happened since the first .NET logging frameworks where conceived. This post will show you the best practices which will provide you with vital information about errors happening on your website.", 
            "title": "Thomas Ardal, December 1, 2015"
        }, 
        {
            "location": "/asp-net-error-logging-best-practices/#elmah", 
            "text": "Error logging module and handlers for ASP.NET ( ELMAH ), the de-facto standard error component for .NET. ELMAH has existed for almost a decade but still works as wonderful as when it was initially released. The idea behind ELMAH is to log all uncaught exceptions including a lot of contextual information about the current HTTP context. ELMAH comes with a simple UI which shows you a list of errors happening and when, as well as some additional information like the type of error, the user causing the error and more.    Since the ELMAH UI is available on  /elmah.axd , make sure to either disallow remote access to this URL or configure ASP.NET authorization rules to only let people inside the circle of trust to access your error logs.   You can click each error and check out information about the server variables, cookies and other pieces of information, important to debug each error. ELMAH may not be the most hyped logging framework out there, but it works and it works great. We wouldn't implement a website without it.   An important note about ELMAH is to use the contrib package, matching the web framework you're using. If you develop an ASP.NET MVC application, use the  Elmah.Mvc  package. If you develop a Nancy application, use the  Nancy.Elmah  package etc.   To start using ELMAH, check out our  ELMAH Tutorial .", 
            "title": "ELMAH"
        }, 
        {
            "location": "/asp-net-error-logging-best-practices/#serilog", 
            "text": "ELMAH only logs errors, why you probably need another logging framework to log other types of log messages like debug, information and warning messages. In theory, you could use ELMAH for other types of messages, but other logging frameworks are better suited for that need. Everyone knows log4net and NLog, but the logging framework we would like to highlight is  Serilog . Serilog is a newer framework and therefore uses some of the more recent ideas behind logging as well as new libraries in .NET.  The idea behind Serilog is that your log messages are semantic/structured, which means that Serilog actually understands pieces of information inside your log message. Where a typical log message in log4net or NLog would look like this:  Executed /getuser in 15 ms  an equivalent log message in Serilog would look like this:  Executed {Url} in {Elapsed} ms  You would then append the actual values of  Url  and  Elapsed  when logging the message to Serilog. What looks to be a simple string replace, is actually as very strong feature, where log messages suddently embeds vital and searchable information.  Serilog implement the idea of destructoring by allowing you to log complex types to your log destinations. In theory, having the flexibility to log every .NET object seems like an awesome option. In the real world you should be very careful when logging complex objects with deep graph of references.  Using Serilog with a text file or relational database can be fine for testing purposes. If you want the full potential from Serilog, you need to log into a schemaless datastore like Elasticsearch, elmah.io or similar.   When logging very complex objects to schemaless data stores like Elasticsearch, your mapping quickly becomes cluttered and performs poorly.   To start using Serilog, browse through the  Serilog wiki . Also make sure to check out our Serilog sink for  logging to elmah.io from Serilog .", 
            "title": "Serilog"
        }, 
        {
            "location": "/asp-net-error-logging-best-practices/#custom-error-pages", 
            "text": "Depending on how you setup your custom error pages, ELMAH and other logging frameworks may stop working. If your custom error pages actually catches the error and continues like no error happened, logging frameworks may never get notified about something bad happening.   A good rule of thumb is to configure custom error pages as close to the IIS as possible. The closer you get to the actual ASP.NET pipeline, the more likely your error logging falls apart.   There's a lot of outdated tutorials on custom error pages out there. For the ultimate guide, read Dustin Moris Gorskis  Demystifying ASP.NET MVC 5 Error Pages and Error Logging .", 
            "title": "Custom error pages"
        }, 
        {
            "location": "/danish-service-provides-maximum-scaling-and-secures-data-on-azure/", 
            "text": "Danish service provides maximum scaling and secures data on Azure\n\n\nThomas Ardal\n, September 17, 2015\n\n\nThis is an English translation of an \narticle\n that Microsoft wrote about us in their Danish MSDN Flash newsletter.\n\n\nelmah.io helps developers find errors on their sites and services \u2013 and handles very large fluctuations in the incoming data volume. Therefore the service, located on Azure, can scale to the current demand and secure the clients data with extra storage in the cloud.\n\n\n\n\n\u201dThe idea of elma.io is to provide a tool for developers, which collects website or service errors\u201d Thomas Ardal, independent consultant and co-founder of elmah.io, explains.\n\n\nThe tool has been online for about one and a half years and has thousands of users, predominantly medium-sized businesses and individuals \u2013 it\u2019s available on Microsoft Azure.\n\n\n\u201dIn principle, we could have leased some virtual servers or used Amazon which I have also worked with but with Azure we get so many extras that would have been time consuming and insurmountable to build ourselves\u201d Thomas Ardal elaborates.\n\n\nFor example, elmah.io utilizes the built-in Azure Service Bus to queue \u2013 or \u2018park\u2019 \u2013 data, uploaded by clients and then later process it asynchronously. This way, basically the clients can upload a whole bunch of data all at once without having to wait for it to be handled and made searchable.\n\n\n\u201dAnd sometimes we get a lot of data at once. Therefore we use auto scaling on Azure websites which automatically increases capacity when needed. That way one or more clients can send very large volumes of data without anyone else experiencing a decline in performance,\u201d he explains.\n\n\nCurrently the service receives approximately 10,000 errors per hour, but there is a great variety in data volume. During peak periods that number can easily rise to 50,000 errors per hour, \u201cbut without noticeable difference in performance on our API,\u201d Thomas Ardal adds.\n\n\nAt the back-end of the service, the third party software Elasticsearch plays a central role by making the large data volumes searchable. Elasticsearch is also on Azure and it is not unusual for the database to store over 100 GB. elmah.io utilizes Azure Blob storage concurrently for raw storage of incoming data.\n\n\n\u201dIn normal operation Blob storage doesn\u2019t play a major role. But in case of a system crash or an error on Elasticsearch, Blob functions as a storage reserve for all raw data that we can continue to work on. That way we actually have data stored in two places in the cloud, which ensures that nothing is lost,\u201d Thomas Ardal says.\n\n\nThomas Ardal finds the stability of Azure excellent and the up-time to be very good. In time he has also learned to utilize some of the options available to keeping the service up, even when occasionally Azure doesn\u2019t function optimally.\n\n\n\u201dThere has been some Azure crashes over the past year and that\u2019s always annoying. But you would experience the same thing whether having your servers hosted or maintaining them yourself. So all in all, we\u2019re really pleased and have absolutely no plans to switch. Azure also contains some very valuable services and possibilities that play well together with .NET and it would be incredibly time consuming to develop this on our own. Blob storage and Azure Service Bus for example, but also an extensive protection against DDOS-attacks, which is good to have on hand\u201d Thomas Ardal says.\n\n\nHe does add that you don\u2019t feel tied hand and foot for that reason by the cloud service.\n\n\n\u201dWe are at a point where we could move to another service, if we really wanted to. It\u2019s difficult, yes, but certainly possible \u2013 and that is a good freedom to have. But it would require a virtually unthinkable change to the contractual relations, for example that Microsoft without due reason raised the price drastically or something like that. And that doesn\u2019t seem to be in the cards,\u201d he says.", 
            "title": "Danish service provides maximum scaling and secures data on Azure"
        }, 
        {
            "location": "/danish-service-provides-maximum-scaling-and-secures-data-on-azure/#danish-service-provides-maximum-scaling-and-secures-data-on-azure", 
            "text": "", 
            "title": "Danish service provides maximum scaling and secures data on Azure"
        }, 
        {
            "location": "/danish-service-provides-maximum-scaling-and-secures-data-on-azure/#thomas-ardal-september-17-2015", 
            "text": "This is an English translation of an  article  that Microsoft wrote about us in their Danish MSDN Flash newsletter.  elmah.io helps developers find errors on their sites and services \u2013 and handles very large fluctuations in the incoming data volume. Therefore the service, located on Azure, can scale to the current demand and secure the clients data with extra storage in the cloud.   \u201dThe idea of elma.io is to provide a tool for developers, which collects website or service errors\u201d Thomas Ardal, independent consultant and co-founder of elmah.io, explains.  The tool has been online for about one and a half years and has thousands of users, predominantly medium-sized businesses and individuals \u2013 it\u2019s available on Microsoft Azure.  \u201dIn principle, we could have leased some virtual servers or used Amazon which I have also worked with but with Azure we get so many extras that would have been time consuming and insurmountable to build ourselves\u201d Thomas Ardal elaborates.  For example, elmah.io utilizes the built-in Azure Service Bus to queue \u2013 or \u2018park\u2019 \u2013 data, uploaded by clients and then later process it asynchronously. This way, basically the clients can upload a whole bunch of data all at once without having to wait for it to be handled and made searchable.  \u201dAnd sometimes we get a lot of data at once. Therefore we use auto scaling on Azure websites which automatically increases capacity when needed. That way one or more clients can send very large volumes of data without anyone else experiencing a decline in performance,\u201d he explains.  Currently the service receives approximately 10,000 errors per hour, but there is a great variety in data volume. During peak periods that number can easily rise to 50,000 errors per hour, \u201cbut without noticeable difference in performance on our API,\u201d Thomas Ardal adds.  At the back-end of the service, the third party software Elasticsearch plays a central role by making the large data volumes searchable. Elasticsearch is also on Azure and it is not unusual for the database to store over 100 GB. elmah.io utilizes Azure Blob storage concurrently for raw storage of incoming data.  \u201dIn normal operation Blob storage doesn\u2019t play a major role. But in case of a system crash or an error on Elasticsearch, Blob functions as a storage reserve for all raw data that we can continue to work on. That way we actually have data stored in two places in the cloud, which ensures that nothing is lost,\u201d Thomas Ardal says.  Thomas Ardal finds the stability of Azure excellent and the up-time to be very good. In time he has also learned to utilize some of the options available to keeping the service up, even when occasionally Azure doesn\u2019t function optimally.  \u201dThere has been some Azure crashes over the past year and that\u2019s always annoying. But you would experience the same thing whether having your servers hosted or maintaining them yourself. So all in all, we\u2019re really pleased and have absolutely no plans to switch. Azure also contains some very valuable services and possibilities that play well together with .NET and it would be incredibly time consuming to develop this on our own. Blob storage and Azure Service Bus for example, but also an extensive protection against DDOS-attacks, which is good to have on hand\u201d Thomas Ardal says.  He does add that you don\u2019t feel tied hand and foot for that reason by the cloud service.  \u201dWe are at a point where we could move to another service, if we really wanted to. It\u2019s difficult, yes, but certainly possible \u2013 and that is a good freedom to have. But it would require a virtually unthinkable change to the contractual relations, for example that Microsoft without due reason raised the price drastically or something like that. And that doesn\u2019t seem to be in the cards,\u201d he says.", 
            "title": "Thomas Ardal, September 17, 2015"
        }, 
        {
            "location": "/elmah-io-documentation/", 
            "text": "elmah.io documentation\n\n\nThomas Ardal\n, September 14, 2015\n\n\nUntil now, the documentation for elmah.io have been centered around our blog. We initially chose to do this simply because it was easy to get started and because WordPress offered some nice tools to author new pages without us having to code everything. In time, the blog have grown with a lot of new pages and the clarity slowly disappeared. That\u2019s why we\u2019ve decided to do something new \u2013 drumrolls \u2013 say hello to the \nelmah.io Documentation site\n.\n\n\nThe new documentation site (simply located on \ndocs.elmah.io\n) contains updated documentation on how to install elmah.io and use the service. In this initial launch, we\u2019ve transformed and improved multiple of our blog posts and made a well-structured documentation site. We tried out of a lot of different products for hosting the documentation site, from paid solutions to open source projects. We ended up using the awesome MkDocs which is based on Markdown and Python. We\u2019ll probably write a blog post in the near feature to show you how we\u2019ve made a beautiful looking documentation site using nothing else than Markdown files and a bit of custom styling.\n\n\n\n\nThe documentation is split into three parts: Installation, Integrations and Help. Installation contains various articles for settings up elmah.io in different web- and logging-frameworks. Integrations show you how to integrate elmah.io with other services like Slack and Zapier. Help contains the other stuff like tutorials on how to log custom data with ELMAH.\n\n\nWe hope that the new documentation site will help you utilize even more of elmah.io\u2019s cool features and that having everything assembled on a single site will help clarify where to go for help.", 
            "title": "elmah.io documentation"
        }, 
        {
            "location": "/elmah-io-documentation/#elmahio-documentation", 
            "text": "", 
            "title": "elmah.io documentation"
        }, 
        {
            "location": "/elmah-io-documentation/#thomas-ardal-september-14-2015", 
            "text": "Until now, the documentation for elmah.io have been centered around our blog. We initially chose to do this simply because it was easy to get started and because WordPress offered some nice tools to author new pages without us having to code everything. In time, the blog have grown with a lot of new pages and the clarity slowly disappeared. That\u2019s why we\u2019ve decided to do something new \u2013 drumrolls \u2013 say hello to the  elmah.io Documentation site .  The new documentation site (simply located on  docs.elmah.io ) contains updated documentation on how to install elmah.io and use the service. In this initial launch, we\u2019ve transformed and improved multiple of our blog posts and made a well-structured documentation site. We tried out of a lot of different products for hosting the documentation site, from paid solutions to open source projects. We ended up using the awesome MkDocs which is based on Markdown and Python. We\u2019ll probably write a blog post in the near feature to show you how we\u2019ve made a beautiful looking documentation site using nothing else than Markdown files and a bit of custom styling.   The documentation is split into three parts: Installation, Integrations and Help. Installation contains various articles for settings up elmah.io in different web- and logging-frameworks. Integrations show you how to integrate elmah.io with other services like Slack and Zapier. Help contains the other stuff like tutorials on how to log custom data with ELMAH.  We hope that the new documentation site will help you utilize even more of elmah.io\u2019s cool features and that having everything assembled on a single site will help clarify where to go for help.", 
            "title": "Thomas Ardal, September 14, 2015"
        }, 
        {
            "location": "/Building-a-salable-architecture-to-handle-millions-of-errors/", 
            "text": "Building a scalable architecture to handle millions of errors\n\n\nThomas Ardal\n, September 5. 2015\n\n\nYou may take it for granted, but building an architecture which is able to scale to millions of messages isn\u2019t something that comes overnight. elmah.io is built to handle lots and lots of messages by utilizing some of the nice features of Windows Azure. In this post we\u2019ll show you how we\u2019ve designed elmah.io to consume errors from our customers.\n\n\nDuring the last 1\u00bd years, we\u2019ve continuously improved our architecture to handle an increasing load. Like every other startup, we didn\u2019t have the perfect architecture from day one. But we learned from our mistakes and now have a scalable architecture, which is able to handle our customer\u2019s data. A picture is worth a thousand words, and that is why looking at a diagram is probably the best way to explain our architecture:\n\n\n\n\nThe diagram illustrates the message flow from receiving a message (typically an error) from a customer, until the entire thing is persisted in the backend. We have a few components for handling emails and business rules that are not included in the diagram in order to keep it simple.\n\n\nAll messages are received through our \nAPI\n. The API is running as part of the elmah.io web application as an Azure Website. Azure Websites have a nice scaling feature, which makes it possible to increase the number of instances dynamically, based on the load on the web server. Since we don\u2019t do much other than send messages to the service bus, we rarely need to scale the number of webservers, but in situations where one of our customers experience a DDOS attack, they may indirectly start DOS attacking us by sending a lot of errors to the elmah.io API. In these situations, scaling this number of websites is extremely important, to avoid the remaining customers being punished by a single DDOS. We rely on Windows Azures to load balancers to handle any DDOS attacks and we\u2019ve implemented our own Burst Protection feature which only logs some of the errors, if thousands and thousands of messages are received from the same customer within a short period of time.\n\n\nThe reason for our API being fast, is caused by the fact that all messages are handled asynchronously. We use Azure Service Bus to handle messages, since that supports a publish/subscribe setup where multiple subscribers can consume the same message. We have multiple consumers able to store messages in various data stores, send mails, etc. All of our consumers are able to run in multiple instances, which makes it easy to spin up new consumer instances if the system has a hard time getting all of the messages processed. At the moment we have two consumers indexing data in Elasticsearch, but it can be a different number if you ask us a week from now.\n\n\nMost of the features on elmah.io are based on searches in the awesome full-text server Elasticsearch. Elasticsearch is able to index millions of documents and make them searchable with query performance in few milliseconds. We use Azure Virtual Machines to host Elasticsearch and like the rest of the architecture, we can scale the number of nodes in the cluster depending on the need. Scaling of Elasticsearch nodes is not something we do automatically, but we continuously monitor the system and scale when needed. A single Elasticsearch node can handle a large amount of documents, but by replicating across multiple nodes, it makes it possible to do maintenance on a single node, without any down time for the end user.\n\n\nElasticsearch is backed up daily, using the \nAzure plugin\n for Elasticsearch and Azure Blob Storage. This way we are able to restore one or more indexes, if something goes really bad.\n\n\nAlongside Elasticsearch, we also store all messages in Azure Blob Storage. We like the idea of keeping customer data in at least two data stores. In cases where Elasticsearch data is lost and the backup cannot be used to restore the indexes, we are able to restore everything from Azure Blob Storage. Luckily we\u2019ve never actually needed to use data in Blob Storage, but having the data makes it a lot easier to sleep at night :) Blob Storage is a nice place to store data since it\u2019s highly scalable and geo replicated.\n\n\nThat wraps it up. We\u2019ve done everything in our power to make elmah.io scalable. Using a solution like Windows Azure where something that we thought a lot about when launching. It seemed expensive at the time, but when looking back, we would\u2019ve used a lot more developer hours in order to achieve the same scalable architecture using a homemade setup on cheap virtual machines somewhere else.\n\n\nFuture\n\n\nWe are quite confident that our current architecture will handle the increased load for at least a year, but as we see an increase in customers, we also will see increase in data. Since we don\u2019t want to sit our hands waiting for accidents to happen, we are already working to improve the architecture even more. In the next version of the API (version 3) we want to split the website and API in two parts. This would allow our website to be down, without the API being affected.\n\n\nWe also want to look more into the Traffic Manager in Windows Azure, which makes it possible to scale websites across multiple regions. This improves response time for our customers, since web requests are handled by the nearest data center.\n\n\nA third improvement could be to our service bus, which potentially can be a bottleneck in our current architecture. We are working on multiple ways to address this. One thing is to collect failing requests to the elmah.io API in the .NET client. In fact we already implemented this in the \nlatest prerelease\n. Another area could be to scale Service Bus or switch to another messaging technology like RabbitMQ. But since a service bus is the least of our worries at the moments, changes to this component probably won\u2019t be the first to see the light of day.", 
            "title": "Building a salable architecture to handle millions of errors"
        }, 
        {
            "location": "/Building-a-salable-architecture-to-handle-millions-of-errors/#building-a-scalable-architecture-to-handle-millions-of-errors", 
            "text": "", 
            "title": "Building a scalable architecture to handle millions of errors"
        }, 
        {
            "location": "/Building-a-salable-architecture-to-handle-millions-of-errors/#thomas-ardal-september-5-2015", 
            "text": "You may take it for granted, but building an architecture which is able to scale to millions of messages isn\u2019t something that comes overnight. elmah.io is built to handle lots and lots of messages by utilizing some of the nice features of Windows Azure. In this post we\u2019ll show you how we\u2019ve designed elmah.io to consume errors from our customers.  During the last 1\u00bd years, we\u2019ve continuously improved our architecture to handle an increasing load. Like every other startup, we didn\u2019t have the perfect architecture from day one. But we learned from our mistakes and now have a scalable architecture, which is able to handle our customer\u2019s data. A picture is worth a thousand words, and that is why looking at a diagram is probably the best way to explain our architecture:   The diagram illustrates the message flow from receiving a message (typically an error) from a customer, until the entire thing is persisted in the backend. We have a few components for handling emails and business rules that are not included in the diagram in order to keep it simple.  All messages are received through our  API . The API is running as part of the elmah.io web application as an Azure Website. Azure Websites have a nice scaling feature, which makes it possible to increase the number of instances dynamically, based on the load on the web server. Since we don\u2019t do much other than send messages to the service bus, we rarely need to scale the number of webservers, but in situations where one of our customers experience a DDOS attack, they may indirectly start DOS attacking us by sending a lot of errors to the elmah.io API. In these situations, scaling this number of websites is extremely important, to avoid the remaining customers being punished by a single DDOS. We rely on Windows Azures to load balancers to handle any DDOS attacks and we\u2019ve implemented our own Burst Protection feature which only logs some of the errors, if thousands and thousands of messages are received from the same customer within a short period of time.  The reason for our API being fast, is caused by the fact that all messages are handled asynchronously. We use Azure Service Bus to handle messages, since that supports a publish/subscribe setup where multiple subscribers can consume the same message. We have multiple consumers able to store messages in various data stores, send mails, etc. All of our consumers are able to run in multiple instances, which makes it easy to spin up new consumer instances if the system has a hard time getting all of the messages processed. At the moment we have two consumers indexing data in Elasticsearch, but it can be a different number if you ask us a week from now.  Most of the features on elmah.io are based on searches in the awesome full-text server Elasticsearch. Elasticsearch is able to index millions of documents and make them searchable with query performance in few milliseconds. We use Azure Virtual Machines to host Elasticsearch and like the rest of the architecture, we can scale the number of nodes in the cluster depending on the need. Scaling of Elasticsearch nodes is not something we do automatically, but we continuously monitor the system and scale when needed. A single Elasticsearch node can handle a large amount of documents, but by replicating across multiple nodes, it makes it possible to do maintenance on a single node, without any down time for the end user.  Elasticsearch is backed up daily, using the  Azure plugin  for Elasticsearch and Azure Blob Storage. This way we are able to restore one or more indexes, if something goes really bad.  Alongside Elasticsearch, we also store all messages in Azure Blob Storage. We like the idea of keeping customer data in at least two data stores. In cases where Elasticsearch data is lost and the backup cannot be used to restore the indexes, we are able to restore everything from Azure Blob Storage. Luckily we\u2019ve never actually needed to use data in Blob Storage, but having the data makes it a lot easier to sleep at night :) Blob Storage is a nice place to store data since it\u2019s highly scalable and geo replicated.  That wraps it up. We\u2019ve done everything in our power to make elmah.io scalable. Using a solution like Windows Azure where something that we thought a lot about when launching. It seemed expensive at the time, but when looking back, we would\u2019ve used a lot more developer hours in order to achieve the same scalable architecture using a homemade setup on cheap virtual machines somewhere else.", 
            "title": "Thomas Ardal, September 5. 2015"
        }, 
        {
            "location": "/Building-a-salable-architecture-to-handle-millions-of-errors/#future", 
            "text": "We are quite confident that our current architecture will handle the increased load for at least a year, but as we see an increase in customers, we also will see increase in data. Since we don\u2019t want to sit our hands waiting for accidents to happen, we are already working to improve the architecture even more. In the next version of the API (version 3) we want to split the website and API in two parts. This would allow our website to be down, without the API being affected.  We also want to look more into the Traffic Manager in Windows Azure, which makes it possible to scale websites across multiple regions. This improves response time for our customers, since web requests are handled by the nearest data center.  A third improvement could be to our service bus, which potentially can be a bottleneck in our current architecture. We are working on multiple ways to address this. One thing is to collect failing requests to the elmah.io API in the .NET client. In fact we already implemented this in the  latest prerelease . Another area could be to scale Service Bus or switch to another messaging technology like RabbitMQ. But since a service bus is the least of our worries at the moments, changes to this component probably won\u2019t be the first to see the light of day.", 
            "title": "Future"
        }, 
        {
            "location": "/sending-transactional-emails-using-mandrill-and-net/", 
            "text": "Sending transactional emails using Mandrill and .NET\n\n\nThomas Ardal\n, August 20, 2015\n\n\nWe use \nMandrill\n to send out emails and have been doing that since we send the first mail from elmah.io. You may not know Mandrill, but it\u2019s a transactional email service, developed by the same guys that build Mailchimp. Disclamer: we are not affiliated with Mandrill but simply love them so much, that we\u2019ve decided to blog about it.\n\n\nThe awesome part of Mandrill is, that it supports email templates with merge capabilities which we utilize to generate the \nNew Error email\n as well as the \nDaily Digest email\n. Until now we\u2019ve used the so-cald Mailchimp template syntax, which includes adding merge codes in HTML attributes to add dynamic contents to an email. Last year Mandrill rolled out support for using the \nHandlebars.js\n engine, which we already know, love and use on another product that we\u2019ve build called \nGibbon.io\n. It seemed obvious to switch to using Handlebars.js in our mail templates as well.\n\n\nTo start using Handlebars.js and Mandrill, you will need to define an email template on Mandrill. An email template contains the HTML code for generating the mail, including the code to generate dynamic content. In this example, we\u2019ll go with a simple mail, containing a couple of widely used handlesbars code snippets:\n\n\nh1\nWelcome {{name}}\n/h1\n\n\nul\n\n    {{#each fruits}}\n    \nli\n{{this}}\n/li\n\n    {{/each}}\n\n/ul\n\n\n\n\n\nA simple mail with a welcome message and a list of fruits. Probably not the most informative mail, but you get the point here. The fun part of the email template is the handlebars code embedded in the \n{{}}\n syntax. To input a name into the welcome headline, we reference a variable named \nname\n. To create more dynamic content (in this case a list), you can use the \n#each\n syntax to iterate over an array of data.\n\n\nTo generate a new email based on this template, we\u2019re using a .NET client simply named Mandrill. Start by creating a new instance of the MandrillApi type:\n\n\nvar mandrillApi = new MandrillApi(\nAPIKEY\n);\n\n\n\n\nYou need to replace the APIKEY with your own key found at the Mandrill website. Using the API object, you will be able to send email messages using Mandrills REST API. Create a new \nEmailMessage\n object:\n\n\nvar emailMessage = new EmailMessage\n{\n    MergeLanguage = TemplateSyntax.Handlebars,\n    Subject = \nWelcome message\u201d,\n    To = new[] {new EmailAddress(emailAddress)}\n};\n\n\n\n\nIn this example, I\u2019ve already setup from email in the email template, but you will be able to specify that using the .NET client if you please.\n\n\nTo generate the dynamic content for handlebars to do its magic, you specify global variables on the email message:\n\n\nemailMessage.AddGlobalVariable(\nname\n, customer.Name);\nemailMessage.AddGlobalVariable(\nfruits\n, new[] {\u201cApple\u201d, \u201cOrange\u201d, \u201cPear\u201d}.ToList());\n\n\n\n\nFinally we tell the client to send the email:\n\n\nvar result = await mandrillApi.SendMessageTemplate(\n    new SendMessageTemplateRequest(emailMessage, \u201ctemplateslug\u201d, null));\n\n\n\n\nThe client supports \nasync\n only, why you need to \nawait\n the result of the \nSendMessageTemplate\n method. The first argument contains the \nEmailMessage\n that we created in a previous step. The second argument contains the name (slug) of the template we created on the Mandrill website. Since we\u2019ve already generated global variables for handlebars, we set the third parameter to \nnull\n. In case you\u2019d want to use the Mailchimp template language, this is where you would ship off data to Mandrill.\n\n\nThat\u2019s it! Mandrill will trigger handlebars to replace the dynamic content in the mail template and send off the email to the customer.", 
            "title": "Sending transactional emails using Mandrill and .NET"
        }, 
        {
            "location": "/sending-transactional-emails-using-mandrill-and-net/#sending-transactional-emails-using-mandrill-and-net", 
            "text": "", 
            "title": "Sending transactional emails using Mandrill and .NET"
        }, 
        {
            "location": "/sending-transactional-emails-using-mandrill-and-net/#thomas-ardal-august-20-2015", 
            "text": "We use  Mandrill  to send out emails and have been doing that since we send the first mail from elmah.io. You may not know Mandrill, but it\u2019s a transactional email service, developed by the same guys that build Mailchimp. Disclamer: we are not affiliated with Mandrill but simply love them so much, that we\u2019ve decided to blog about it.  The awesome part of Mandrill is, that it supports email templates with merge capabilities which we utilize to generate the  New Error email  as well as the  Daily Digest email . Until now we\u2019ve used the so-cald Mailchimp template syntax, which includes adding merge codes in HTML attributes to add dynamic contents to an email. Last year Mandrill rolled out support for using the  Handlebars.js  engine, which we already know, love and use on another product that we\u2019ve build called  Gibbon.io . It seemed obvious to switch to using Handlebars.js in our mail templates as well.  To start using Handlebars.js and Mandrill, you will need to define an email template on Mandrill. An email template contains the HTML code for generating the mail, including the code to generate dynamic content. In this example, we\u2019ll go with a simple mail, containing a couple of widely used handlesbars code snippets:  h1 Welcome {{name}} /h1  ul \n    {{#each fruits}}\n     li {{this}} /li \n    {{/each}} /ul   A simple mail with a welcome message and a list of fruits. Probably not the most informative mail, but you get the point here. The fun part of the email template is the handlebars code embedded in the  {{}}  syntax. To input a name into the welcome headline, we reference a variable named  name . To create more dynamic content (in this case a list), you can use the  #each  syntax to iterate over an array of data.  To generate a new email based on this template, we\u2019re using a .NET client simply named Mandrill. Start by creating a new instance of the MandrillApi type:  var mandrillApi = new MandrillApi( APIKEY );  You need to replace the APIKEY with your own key found at the Mandrill website. Using the API object, you will be able to send email messages using Mandrills REST API. Create a new  EmailMessage  object:  var emailMessage = new EmailMessage\n{\n    MergeLanguage = TemplateSyntax.Handlebars,\n    Subject =  Welcome message\u201d,\n    To = new[] {new EmailAddress(emailAddress)}\n};  In this example, I\u2019ve already setup from email in the email template, but you will be able to specify that using the .NET client if you please.  To generate the dynamic content for handlebars to do its magic, you specify global variables on the email message:  emailMessage.AddGlobalVariable( name , customer.Name);\nemailMessage.AddGlobalVariable( fruits , new[] {\u201cApple\u201d, \u201cOrange\u201d, \u201cPear\u201d}.ToList());  Finally we tell the client to send the email:  var result = await mandrillApi.SendMessageTemplate(\n    new SendMessageTemplateRequest(emailMessage, \u201ctemplateslug\u201d, null));  The client supports  async  only, why you need to  await  the result of the  SendMessageTemplate  method. The first argument contains the  EmailMessage  that we created in a previous step. The second argument contains the name (slug) of the template we created on the Mandrill website. Since we\u2019ve already generated global variables for handlebars, we set the third parameter to  null . In case you\u2019d want to use the Mailchimp template language, this is where you would ship off data to Mandrill.  That\u2019s it! Mandrill will trigger handlebars to replace the dynamic content in the mail template and send off the email to the customer.", 
            "title": "Thomas Ardal, August 20, 2015"
        }, 
        {
            "location": "/logging-to-elmah-io-from-nlog/", 
            "text": "Logging to elmah.io from NLog\n\n\nThomas Ardal\n, August 6, 2015\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nLogging to elmah.io from NLog\n\n\n\n\nNLog\n is one of the most popular logging frameworks for .NET. With an active history on almost 10 years, the possibilities with NLog are many and it\u2019s easy to find documentation on how to use it. Choosing weather or not we should integrate NLog and elmah.io was a no-brainer.\n\n\nTo start logging messages from NLog to elmah.io, you need to install the \nelmah.io.nlog\n NuGet package:\n\n\nInstall-Package elmah.io.nlog\n\n\n\n\nTo configure the elmah.io target, add the following configuration to your app.config/web.config/nlog.config depending on what kind of project you\u2019ve created:\n\n\nextensions\n\n  \nadd assembly=\nElmah.Io.NLog\n/\n\n\n/extensions\n\n\n\ntargets\n\n  \ntarget name=\nelmahio\n type=\nelmah.io\n logId=\ncc6043e9-5d7b-4986-8056-cb76d4d52e5e\n/\n\n\n/targets\n\n\n\nrules\n\n  \nlogger name=\n*\n minlevel=\nInfo\n writeTo=\nelmahio\n /\n\n\n/rules\n\n\n\n\n\nIn the example we specify the level minimum as Info. This tells NLog to log only information, warning, error and fatal messages. You may adjust this but be aware, that your elmah.io log may run full pretty fast, if you log thousands and thousands of trace and debug messages.\n\n\nLog messages to elmah.io, just as with every other target and NLog:\n\n\nlog.Warn(\nThis is a warning message\n);\nlog.Error(new Exception(), \nThis is an error message\n);", 
            "title": "Logging to elmah.io from NLog"
        }, 
        {
            "location": "/logging-to-elmah-io-from-nlog/#logging-to-elmahio-from-nlog", 
            "text": "", 
            "title": "Logging to elmah.io from NLog"
        }, 
        {
            "location": "/logging-to-elmah-io-from-nlog/#thomas-ardal-august-6-2015", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Logging to elmah.io from NLog   NLog  is one of the most popular logging frameworks for .NET. With an active history on almost 10 years, the possibilities with NLog are many and it\u2019s easy to find documentation on how to use it. Choosing weather or not we should integrate NLog and elmah.io was a no-brainer.  To start logging messages from NLog to elmah.io, you need to install the  elmah.io.nlog  NuGet package:  Install-Package elmah.io.nlog  To configure the elmah.io target, add the following configuration to your app.config/web.config/nlog.config depending on what kind of project you\u2019ve created:  extensions \n   add assembly= Elmah.Io.NLog /  /extensions  targets \n   target name= elmahio  type= elmah.io  logId= cc6043e9-5d7b-4986-8056-cb76d4d52e5e /  /targets  rules \n   logger name= *  minlevel= Info  writeTo= elmahio  /  /rules   In the example we specify the level minimum as Info. This tells NLog to log only information, warning, error and fatal messages. You may adjust this but be aware, that your elmah.io log may run full pretty fast, if you log thousands and thousands of trace and debug messages.  Log messages to elmah.io, just as with every other target and NLog:  log.Warn( This is a warning message );\nlog.Error(new Exception(),  This is an error message );", 
            "title": "Thomas Ardal, August 6, 2015"
        }, 
        {
            "location": "/umbraco-and-elmah-io-are-new-best-friends/", 
            "text": "Umbraco and elmah.io are new best friends\n\n\nThomas Ardal\n, August 3, 2015\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nLogging from Umbraco\n\n\n\n\nelmah.io want to support every major web and app framework for .NET. In this post I will show you how to log data from Umbraco CMS into your elmah.io log, using a recent addition to the family of integrations.\n\n\nSince Umbraco itself is written in ASP.NET, ELMAH works like a dream inside Umbraco. Besides logging uncaught errors, elmah.io also supports other types of messages like information and debug. In fact all of the log levels that you already know from log4net, NLog and Serilog, are supported on elmah.io as well. Logging in Umbraco CMS is based on log4net, which elmah.io also support. We have brought all these pieces together into a NuGet package that we call: \nelmah.io.umbraco\n.\n\n\nTo start utilizing elmah.io from your Umbraco site, all you need to do is install the elmah.io.umbraco package:\n\n\nInstall-Package elmah.io.umbraco\n\n\n\n\nHit F5 and watch messages start flowing into elmah.io:\n\n\n\n\nLike the \nelmah.io\n package, the install process asks you for your log id and everything is setup automatically. Installing the elmah.io.umbraco package modifies your website in three ways:\n\n\n\n\nInstalls ELMAH to log uncatch errors on your site.\n\n\nModifies your log4net configuration to log messages through log4net in elmah.io.\n\n\nInstalls an ApplicationEventHandler into Umbraco, logging 404\u2019s.", 
            "title": "Umbraco and elmah.io are new best friends"
        }, 
        {
            "location": "/umbraco-and-elmah-io-are-new-best-friends/#umbraco-and-elmahio-are-new-best-friends", 
            "text": "", 
            "title": "Umbraco and elmah.io are new best friends"
        }, 
        {
            "location": "/umbraco-and-elmah-io-are-new-best-friends/#thomas-ardal-august-3-2015", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Logging from Umbraco   elmah.io want to support every major web and app framework for .NET. In this post I will show you how to log data from Umbraco CMS into your elmah.io log, using a recent addition to the family of integrations.  Since Umbraco itself is written in ASP.NET, ELMAH works like a dream inside Umbraco. Besides logging uncaught errors, elmah.io also supports other types of messages like information and debug. In fact all of the log levels that you already know from log4net, NLog and Serilog, are supported on elmah.io as well. Logging in Umbraco CMS is based on log4net, which elmah.io also support. We have brought all these pieces together into a NuGet package that we call:  elmah.io.umbraco .  To start utilizing elmah.io from your Umbraco site, all you need to do is install the elmah.io.umbraco package:  Install-Package elmah.io.umbraco  Hit F5 and watch messages start flowing into elmah.io:   Like the  elmah.io  package, the install process asks you for your log id and everything is setup automatically. Installing the elmah.io.umbraco package modifies your website in three ways:   Installs ELMAH to log uncatch errors on your site.  Modifies your log4net configuration to log messages through log4net in elmah.io.  Installs an ApplicationEventHandler into Umbraco, logging 404\u2019s.", 
            "title": "Thomas Ardal, August 3, 2015"
        }, 
        {
            "location": "/receive-an-email-when-a-new-error-is-logged/", 
            "text": "Receive an email when a new error is logged\n\n\nThomas Ardal\n, July 29, 2015\n\n\nWe try to do anything in our power to make visiting elmah.io a pleasant experience. But visiting elmah.io on a daily or even hourly basis to spot new errors quickly becomes tedious. That\u2019s why we\u2019ve implemented the New Error Email.\n\n\nSending emails from elmah.io have been implemented since \nlast year\n, but it\u2019s an all or nothing solution. This means that you\u2019d get a new email every time an error were logged. Consider introducing a bug on your website logging the same error thousands of times. Moments later your inbox will be stuffed with thousands of error emails.\n\n\nTo improve this scenario you now have the option of enabling the New Error Email when creating a new log:\n\n\n\n\nWe\u2019ve used the opportunity to add an option to subscribe to the \nDaily Digest Email\n as well.\n\n\nThe New Error Email uses the same mail template as we\u2019ve \nwritten about in the past\n, but unlike previously you only get an email when a new error is logged. It\u2019s difficult to distinguish whether an error is new or not, but for now a new error is defined as: an error title and severity that we haven\u2019t seen within the last 24 hours. If you have input to this algorithm, please get in \ncontact\n.\n\n\nMultiple users have the opportunity to subscribe to the New Error Email (like the Daily Digest Email). When enabling the checkbox during creation, you will automatically receive the emails. Collaborators on your log will be able to enable both emails on their \nProfile page\n:\n\n\n\n\nThis is also the place to go if you want to enable/disable emails for existing logs.\n\n\nFinally we would like to encourage you to switch to the new email feature if you\u2019ve already set up emails beneath the Rules tab on the log settings. We wont remove this feature, but sending thousands and thousands of emails to the same email address is something that we eventually won\u2019t support.", 
            "title": "Receive an email when a new error is logged"
        }, 
        {
            "location": "/receive-an-email-when-a-new-error-is-logged/#receive-an-email-when-a-new-error-is-logged", 
            "text": "", 
            "title": "Receive an email when a new error is logged"
        }, 
        {
            "location": "/receive-an-email-when-a-new-error-is-logged/#thomas-ardal-july-29-2015", 
            "text": "We try to do anything in our power to make visiting elmah.io a pleasant experience. But visiting elmah.io on a daily or even hourly basis to spot new errors quickly becomes tedious. That\u2019s why we\u2019ve implemented the New Error Email.  Sending emails from elmah.io have been implemented since  last year , but it\u2019s an all or nothing solution. This means that you\u2019d get a new email every time an error were logged. Consider introducing a bug on your website logging the same error thousands of times. Moments later your inbox will be stuffed with thousands of error emails.  To improve this scenario you now have the option of enabling the New Error Email when creating a new log:   We\u2019ve used the opportunity to add an option to subscribe to the  Daily Digest Email  as well.  The New Error Email uses the same mail template as we\u2019ve  written about in the past , but unlike previously you only get an email when a new error is logged. It\u2019s difficult to distinguish whether an error is new or not, but for now a new error is defined as: an error title and severity that we haven\u2019t seen within the last 24 hours. If you have input to this algorithm, please get in  contact .  Multiple users have the opportunity to subscribe to the New Error Email (like the Daily Digest Email). When enabling the checkbox during creation, you will automatically receive the emails. Collaborators on your log will be able to enable both emails on their  Profile page :   This is also the place to go if you want to enable/disable emails for existing logs.  Finally we would like to encourage you to switch to the new email feature if you\u2019ve already set up emails beneath the Rules tab on the log settings. We wont remove this feature, but sending thousands and thousands of emails to the same email address is something that we eventually won\u2019t support.", 
            "title": "Thomas Ardal, July 29, 2015"
        }, 
        {
            "location": "/its-official-elmah-io-integrates-with-zapier/", 
            "text": "It\u2019s official \u2013 elmah.io integrates with Zapier\n\n\nThomas Ardal\n, July 27, 2015\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nIntegrate with Zapier\n.\n\n\n\n\nWe\u2019ve integrated with \nZapier\n for a while now. Until now the integration have been invite only and we want to thank all of you who helped testing. For the rest of you \u2013 start integrating elmah.io with hundreds of online services through Zapier.\n\n\nIn short Zapier is the place to go, if you need to integrate two or more online systems. To show you the strengths of elmah.io and Zapier, I will show you a basic example on how to set up a new Zap. In this case we use an integration point provided by elmah.io and Zapier called a trigger. A trigger is (as the name suggest) something that triggers an action in Zapier. In case of elmah.io, the trigger available is when new messages are logged to your log. Actions exists on the other side of the integration and tells Zapier what to do every time a trigger is fired. Hundreds of actions exists, in this example we use the GitHub action to create a new issue every time a new message is logged.\n\n\nCreate a new account on Zapier.com. Then click the \nMake a New Zap\n button. The create new Zap page is shown:\n\n\n\n\nSelect elmah.io in the \nChoose a Trigger app...\n dropdown and then select \nNew Error\n in the \nChoose a Trigger...\n dropdown. In the \nChoose an Action app...\n select \nGitHub\n and select \nCreate Issue\n in the \nChoose an Action...\n dropdown.\n\n\n\n\nThis configuration tells Zapier to create a new issue at GitHub, every time a new error is logged in elmah.io. The action could be one of the hundreds of other integrations available at Zapier. Click \nContinue\n.\n\n\nIn section 2 select the \nConnect a different elmah.io Account\n and input a name and the log id of the log you want to integrate:\n\n\n\n\nAuthorize your GitHub account (or whatever integration you\u2019ve selected in the action step) and click \nContinue\n. Step 4 isn\u2019t mandatory, but here you will be able to setup additional constraints to the Zap. If you\u2019re using elmah.io for other than errors, you can tell Zapier only to create a new GitHub issue when the message is an actual error:\n\n\n\n\nIn step 5 you specify how the new issue should create created. In this example I\u2019ve chosen the GitHub project for our open source client. For the title, I use two of the variables available from the elmah.io action. For a complete list of variables, click the Insert button next to each textbox. The variable will look something like this \u201cMyApp: An error occurred\u201d. The issue body contains the detail of the error (typically a stacktrace). Finally I\u2019ve selected \nbug\n as a label.\n\n\n\n\nTest the Zap an hit \nContinue\n:\n\n\n\n\nFinally, name your Zap and click the \nTurn Zap on\n button:\n\n\n\n\nWhen future errors are logged in your elmah.io log, a GitHub issue is automatically created. How awesome is that!", 
            "title": "It\u2019s official \u2013 elmah.io integrates with Zapier"
        }, 
        {
            "location": "/its-official-elmah-io-integrates-with-zapier/#its-official-elmahio-integrates-with-zapier", 
            "text": "", 
            "title": "It\u2019s official \u2013 elmah.io integrates with Zapier"
        }, 
        {
            "location": "/its-official-elmah-io-integrates-with-zapier/#thomas-ardal-july-27-2015", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Integrate with Zapier .   We\u2019ve integrated with  Zapier  for a while now. Until now the integration have been invite only and we want to thank all of you who helped testing. For the rest of you \u2013 start integrating elmah.io with hundreds of online services through Zapier.  In short Zapier is the place to go, if you need to integrate two or more online systems. To show you the strengths of elmah.io and Zapier, I will show you a basic example on how to set up a new Zap. In this case we use an integration point provided by elmah.io and Zapier called a trigger. A trigger is (as the name suggest) something that triggers an action in Zapier. In case of elmah.io, the trigger available is when new messages are logged to your log. Actions exists on the other side of the integration and tells Zapier what to do every time a trigger is fired. Hundreds of actions exists, in this example we use the GitHub action to create a new issue every time a new message is logged.  Create a new account on Zapier.com. Then click the  Make a New Zap  button. The create new Zap page is shown:   Select elmah.io in the  Choose a Trigger app...  dropdown and then select  New Error  in the  Choose a Trigger...  dropdown. In the  Choose an Action app...  select  GitHub  and select  Create Issue  in the  Choose an Action...  dropdown.   This configuration tells Zapier to create a new issue at GitHub, every time a new error is logged in elmah.io. The action could be one of the hundreds of other integrations available at Zapier. Click  Continue .  In section 2 select the  Connect a different elmah.io Account  and input a name and the log id of the log you want to integrate:   Authorize your GitHub account (or whatever integration you\u2019ve selected in the action step) and click  Continue . Step 4 isn\u2019t mandatory, but here you will be able to setup additional constraints to the Zap. If you\u2019re using elmah.io for other than errors, you can tell Zapier only to create a new GitHub issue when the message is an actual error:   In step 5 you specify how the new issue should create created. In this example I\u2019ve chosen the GitHub project for our open source client. For the title, I use two of the variables available from the elmah.io action. For a complete list of variables, click the Insert button next to each textbox. The variable will look something like this \u201cMyApp: An error occurred\u201d. The issue body contains the detail of the error (typically a stacktrace). Finally I\u2019ve selected  bug  as a label.   Test the Zap an hit  Continue :   Finally, name your Zap and click the  Turn Zap on  button:   When future errors are logged in your elmah.io log, a GitHub issue is automatically created. How awesome is that!", 
            "title": "Thomas Ardal, July 27, 2015"
        }, 
        {
            "location": "/new-mail-template/", 
            "text": "New mail template\n\n\nThomas Ardal\n, June 23, 2015\n\n\nA feature request that we\u2019ve received a lot, is to improve the mail template when logging new messages to elmah.io.\n\n\nYou may not know it, but elmah.io supports mail communications through the Business Rules feature available on your log settings. In the past, the emails contained the message title and a link only, which would force you to login to elmah.io to watch the details about a logged message.\n\n\nWith the new and improved mail template, you will be able to inspect almost all of the details about a logged message directly in your inbox. Save time by avoiding to login to elmah.io every time a new message appear in your log.\n\n\nLet\u2019s look at an example:\n\n\n\n\nThe message title is shown as the heading. The table below shows the various pieces of information also shown on elmah.io. The box with the dark grey background contains the details of the message in this example the stacktrace of the logged error. In the bottom there\u2019s link to the error details page on elmah.io.\n\n\nWe hope that the improved template will save you tons of time.", 
            "title": "New mail template"
        }, 
        {
            "location": "/new-mail-template/#new-mail-template", 
            "text": "", 
            "title": "New mail template"
        }, 
        {
            "location": "/new-mail-template/#thomas-ardal-june-23-2015", 
            "text": "A feature request that we\u2019ve received a lot, is to improve the mail template when logging new messages to elmah.io.  You may not know it, but elmah.io supports mail communications through the Business Rules feature available on your log settings. In the past, the emails contained the message title and a link only, which would force you to login to elmah.io to watch the details about a logged message.  With the new and improved mail template, you will be able to inspect almost all of the details about a logged message directly in your inbox. Save time by avoiding to login to elmah.io every time a new message appear in your log.  Let\u2019s look at an example:   The message title is shown as the heading. The table below shows the various pieces of information also shown on elmah.io. The box with the dark grey background contains the details of the message in this example the stacktrace of the logged error. In the bottom there\u2019s link to the error details page on elmah.io.  We hope that the improved template will save you tons of time.", 
            "title": "Thomas Ardal, June 23, 2015"
        }, 
        {
            "location": "/integrate-elmah-io-with-slack/", 
            "text": "Integrate elmah.io with Slack\n\n\nThomas Ardal\n, June 18, 2015\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nIntegrate with Slack\n.\n\n\n\n\nLast week, we showed you how to \nintegrate elmah.io with HipChat\n. This week we take a look at another popular tool for team communication: Slack. Like HipChat, Slack offers an API, making it easy to integrate with elmah.io through the Rules feature.\n\n\nStart by copying your Slack-token from the \nAPI page\n. We will need this when setting up the integration.\n\n\n\n\nOn elmah.io, go to the Rules tab beneath your log settings. In this example we want a message on Slack every time a new error is logged in our elmah.io log. To do this, name your rule and input a query like illustrated on the following screenshot:\n\n\n\n\nHit the Then link and select HTTP request. Input the following values (remember to replace YOUR_TOKEN and YOUR_CHANNEL):\n\n\n\n\n\n\n\n\nField\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\nPOST\n\n\n\n\n\n\nURL\n\n\nhttps://slack.com/api/chat.postMessage?token=YOUR_TOKEN\nchannel=YOUR_CHANNEL\ntext=$message\nusername=elmah.io\n\n\n\n\n\n\n\n\nThe final result should look like this:\n\n\n\n\nClick the OK button and add the new rule by clicking Add. This configuration tells elmah.io, to make a HTTP request against the Slack API, every time a new error is logged. The message at elmah.io is shown as the chat message inside Slack:", 
            "title": "Integrate elmah.io with Slack"
        }, 
        {
            "location": "/integrate-elmah-io-with-slack/#integrate-elmahio-with-slack", 
            "text": "", 
            "title": "Integrate elmah.io with Slack"
        }, 
        {
            "location": "/integrate-elmah-io-with-slack/#thomas-ardal-june-18-2015", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Integrate with Slack .   Last week, we showed you how to  integrate elmah.io with HipChat . This week we take a look at another popular tool for team communication: Slack. Like HipChat, Slack offers an API, making it easy to integrate with elmah.io through the Rules feature.  Start by copying your Slack-token from the  API page . We will need this when setting up the integration.   On elmah.io, go to the Rules tab beneath your log settings. In this example we want a message on Slack every time a new error is logged in our elmah.io log. To do this, name your rule and input a query like illustrated on the following screenshot:   Hit the Then link and select HTTP request. Input the following values (remember to replace YOUR_TOKEN and YOUR_CHANNEL):     Field  Value      Method  POST    URL  https://slack.com/api/chat.postMessage?token=YOUR_TOKEN channel=YOUR_CHANNEL text=$message username=elmah.io     The final result should look like this:   Click the OK button and add the new rule by clicking Add. This configuration tells elmah.io, to make a HTTP request against the Slack API, every time a new error is logged. The message at elmah.io is shown as the chat message inside Slack:", 
            "title": "Thomas Ardal, June 18, 2015"
        }, 
        {
            "location": "/integrate-elmah-io-with-hipchat/", 
            "text": "Integrate elmah.io with HipChat\n\n\nThomas Ardal\n, June 11, 2015\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nIntegrate with HipChat\n.\n\n\n\n\nWe took a decision early on, to spend our time working on the core product. This means that you will not find 100 different kinds of integrations on elmah.io. We do integrate with Zapier, but in this post I will show you how to integrate elmah.io with HipChat using the Business Rule feature.\n\n\nBefore we dig into the details of elmah.io, you should sign up or log into \nHipChat\n. Create a new room for your team and go to the \nAPI page\n. Create a new token with the Notification type and label it something meaningful:\n\n\n\n\nWe will need the generated token in a minute, so keep that tab open.\n\n\nOn elmah.io, go to the Rules tab beneath your log settings. In this example we want a message on HipChat every time a new error is logged in our elmah.io log. To do this, name your rule and input a query like illustrated on the following screenshot:\n\n\n\n\nHit the \nThen\n link and select HTTP request. Input the following values (remember to replace YOUR_TOKEN and YOUR_ROOM):\n\n\n\n\n\n\n\n\nField\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\nPOST\n\n\n\n\n\n\nURL\n\n\nhttps://api.hipchat.com/v1/rooms/message?format=json\nauth_token=YOUR_TOKEN\n\n\n\n\n\n\nContent Type\n\n\napplication/x-www-form-urlencoded\n\n\n\n\n\n\nBody\n\n\nroom_id=YOUR_ROOM\nfrom=elmah.io\nmessage=$message\n\n\n\n\n\n\n\n\nThe final result should look like this:\n\n\n\n\nClick the OK button and add the new rule by clicking Add. This configuration tells elmah.io, to make a HTTP request against the HipChat API, every time a new error is logged. The message at elmah.io is shown as the chat message inside HipChat:", 
            "title": "Integrate elmah.io with HipChat"
        }, 
        {
            "location": "/integrate-elmah-io-with-hipchat/#integrate-elmahio-with-hipchat", 
            "text": "", 
            "title": "Integrate elmah.io with HipChat"
        }, 
        {
            "location": "/integrate-elmah-io-with-hipchat/#thomas-ardal-june-11-2015", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Integrate with HipChat .   We took a decision early on, to spend our time working on the core product. This means that you will not find 100 different kinds of integrations on elmah.io. We do integrate with Zapier, but in this post I will show you how to integrate elmah.io with HipChat using the Business Rule feature.  Before we dig into the details of elmah.io, you should sign up or log into  HipChat . Create a new room for your team and go to the  API page . Create a new token with the Notification type and label it something meaningful:   We will need the generated token in a minute, so keep that tab open.  On elmah.io, go to the Rules tab beneath your log settings. In this example we want a message on HipChat every time a new error is logged in our elmah.io log. To do this, name your rule and input a query like illustrated on the following screenshot:   Hit the  Then  link and select HTTP request. Input the following values (remember to replace YOUR_TOKEN and YOUR_ROOM):     Field  Value      Method  POST    URL  https://api.hipchat.com/v1/rooms/message?format=json auth_token=YOUR_TOKEN    Content Type  application/x-www-form-urlencoded    Body  room_id=YOUR_ROOM from=elmah.io message=$message     The final result should look like this:   Click the OK button and add the new rule by clicking Add. This configuration tells elmah.io, to make a HTTP request against the HipChat API, every time a new error is logged. The message at elmah.io is shown as the chat message inside HipChat:", 
            "title": "Thomas Ardal, June 11, 2015"
        }, 
        {
            "location": "/how-to-use-extended-user-details-even-though-you-dont-use-email-as-user-id/", 
            "text": "How to use Extended User Details even though you don\u2019t use email as user ID\n\n\nThomas Ardal\n, June 8, 2015\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nUse Extended User Details without Email as Id\n.\n\n\n\n\nWe\u2019ve received a great question in the mail: \u201cI want to make use of elmah.io\u2019s \nExtended User Details\n feature, but I\u2019m not using email as the ID for my users. How do I do that?\u201d\n\n\nAs you may know, ELMAH automatically logs the user identity as part of the error. To make that happen, ELMAH uses the identity object on the current thread, which gets set by most authentication frameworks for .NET (like ASP.NET Membership Provider and ASP.NET Identity). Some of you may use the users email as key while others use something like a database identifier. If you are using an email, you are already covered and able to see Extended User Details. If not, you need to provide elmah.io with a little help.\n\n\nIn order to tell elmah.io about the users email and still keeping the identifier in the user field, you can enrich the message with a piece of custom data, before sending it off to elmah.io. In order to fully understand the code below, you need to know a bit about \nILogger\n. \nILogger\n is part of the raw \nelmah.io client\n, able to communicate with the \nelmah.io API\n. \nILogger\n isn\u2019t dependent of ELMAH and it pretty much corresponds to other logging clients known from log4net, nlog etc.\n\n\nElmah.ErrorLog.GetDefault(null); // Forces creation of logger client\nvar logger = ErrorLog.Client;\nlogger.OnMessage += (sender, args) =\n\n{\n    if (string.IsNullOrWhiteSpace(args.Message.User)) return;\n    var db = ...;\n    var user = db.GetById\nUser\n(args.Message.User);\n    args.Message.Data.Add(new Item {Key = \nX-ELMAHIO-USEREMAIL\n, Value = user.Email});\n}\n\n\n\n\nLine 1 forces creation of the client. The elmah.io ErrorLog implementation uses a singleton \nILogger\n to communicate with elmah.io.\n\n\nLine 3 registers a new event handler on the \nOnMessage\n event. \nOnMessage\n event handlers are executed just before a message is send to elmah.io. In the body of the event handler, the users email is fetched from the database by calling the \nGetById\n method. How you will be able to convert the user ID to an email depends on your tech stack, but you get the picture.\n\n\nIn line 8 the data collection of the message is enriched with a new key value pair. \nX-ELMAHIO-USEREMAIL\n tells elmah.io, that the value of that item contains the email of the user involved in the currently logged message.\n\n\nThat\u2019s it! 9 lines of code and you are able to watch every little details about the users experiencing problems on your website:", 
            "title": "How to use Extended User Details even though you don\u2019t use email as user ID"
        }, 
        {
            "location": "/how-to-use-extended-user-details-even-though-you-dont-use-email-as-user-id/#how-to-use-extended-user-details-even-though-you-dont-use-email-as-user-id", 
            "text": "", 
            "title": "How to use Extended User Details even though you don\u2019t use email as user ID"
        }, 
        {
            "location": "/how-to-use-extended-user-details-even-though-you-dont-use-email-as-user-id/#thomas-ardal-june-8-2015", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Use Extended User Details without Email as Id .   We\u2019ve received a great question in the mail: \u201cI want to make use of elmah.io\u2019s  Extended User Details  feature, but I\u2019m not using email as the ID for my users. How do I do that?\u201d  As you may know, ELMAH automatically logs the user identity as part of the error. To make that happen, ELMAH uses the identity object on the current thread, which gets set by most authentication frameworks for .NET (like ASP.NET Membership Provider and ASP.NET Identity). Some of you may use the users email as key while others use something like a database identifier. If you are using an email, you are already covered and able to see Extended User Details. If not, you need to provide elmah.io with a little help.  In order to tell elmah.io about the users email and still keeping the identifier in the user field, you can enrich the message with a piece of custom data, before sending it off to elmah.io. In order to fully understand the code below, you need to know a bit about  ILogger .  ILogger  is part of the raw  elmah.io client , able to communicate with the  elmah.io API .  ILogger  isn\u2019t dependent of ELMAH and it pretty much corresponds to other logging clients known from log4net, nlog etc.  Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client\nvar logger = ErrorLog.Client;\nlogger.OnMessage += (sender, args) = \n{\n    if (string.IsNullOrWhiteSpace(args.Message.User)) return;\n    var db = ...;\n    var user = db.GetById User (args.Message.User);\n    args.Message.Data.Add(new Item {Key =  X-ELMAHIO-USEREMAIL , Value = user.Email});\n}  Line 1 forces creation of the client. The elmah.io ErrorLog implementation uses a singleton  ILogger  to communicate with elmah.io.  Line 3 registers a new event handler on the  OnMessage  event.  OnMessage  event handlers are executed just before a message is send to elmah.io. In the body of the event handler, the users email is fetched from the database by calling the  GetById  method. How you will be able to convert the user ID to an email depends on your tech stack, but you get the picture.  In line 8 the data collection of the message is enriched with a new key value pair.  X-ELMAHIO-USEREMAIL  tells elmah.io, that the value of that item contains the email of the user involved in the currently logged message.  That\u2019s it! 9 lines of code and you are able to watch every little details about the users experiencing problems on your website:", 
            "title": "Thomas Ardal, June 8, 2015"
        }, 
        {
            "location": "/get-better-insights-with-the-error-occurence-graph/", 
            "text": "Get better insights with the error occurence graph\n\n\nThomas Ardal\n, May 26, 2015\n\n\nEver had that feeling of d\u00e9j\u00e0 vu when looking through your logs? You drill down into the details on an error and think to yourself: I\u2019ve seen this before!\n\n\nIn the latest release, we start to provide you with better insights into the errors logged from your website. First step involves the error details view, visible when expanding an error from the search view. With the improved error details view, you will be presented with a graph, showing the occurrence of the expanded error, in the entire retention period included in your current plan:\n\n\n\n\nIn this example, the AuthenticationException thrown inside the SimpleAuthentication package occurred multiple times during the last 90 days. The improved details view, will help you gain a better understanding of the error severity.", 
            "title": "Get better insights with the error occurence graph"
        }, 
        {
            "location": "/get-better-insights-with-the-error-occurence-graph/#get-better-insights-with-the-error-occurence-graph", 
            "text": "", 
            "title": "Get better insights with the error occurence graph"
        }, 
        {
            "location": "/get-better-insights-with-the-error-occurence-graph/#thomas-ardal-may-26-2015", 
            "text": "Ever had that feeling of d\u00e9j\u00e0 vu when looking through your logs? You drill down into the details on an error and think to yourself: I\u2019ve seen this before!  In the latest release, we start to provide you with better insights into the errors logged from your website. First step involves the error details view, visible when expanding an error from the search view. With the improved error details view, you will be presented with a graph, showing the occurrence of the expanded error, in the entire retention period included in your current plan:   In this example, the AuthenticationException thrown inside the SimpleAuthentication package occurred multiple times during the last 90 days. The improved details view, will help you gain a better understanding of the error severity.", 
            "title": "Thomas Ardal, May 26, 2015"
        }, 
        {
            "location": "/removing-sensitive-form-data-before-logging-to-elmah/", 
            "text": "Removing sensitive form data before logging to ELMAH\n\n\nThomas Ardal\n, May 1, 2015\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nRemove sensitive form data\n.\n\n\n\n\nYou may have something like usernames and passwords in form posts on your website. Since ELMAH automatically logs the content of a failing form POST, sensitive data potentially ends up in your log. No one else but you and your company should really get to look inside your log, but remember that everyone connected to the internet, is a potential hacking victim.\n\n\nThere\u2019s no build-in feature to remove data from the error data, before logging it to ELMAH. Luckily \nELMAH\u2019s Error Filtering\n feature lets you accomplish that anyway by writing a bit of additional code in your global.asax.cs file:\n\n\nvoid ErrorLog_Filtering(object sender, ExceptionFilterEventArgs args)\n{\n    var httpContext = args.Context as HttpContext;\n    if (httpContext != null \n httpContext.Request.Form.AllKeys.Any(k =\n k == \nSomeSecretFormField\n))\n    {\n        var error = new Error(args.Exception, httpContext);\n        error.Form.Set(\nSomeSecretFormField\n, \n***hidden***\n);\n        ErrorLog.GetDefault(httpContext).Log(error);\n        args.Dismiss();\n    }\n}\n\n\n\n\nThe \nErrorLog_Filtering\n method is called by ELMAH, every time a new exception is about to get logged. The purpose of the method is to be able to tell ELMAH not to log certain kinds of exceptions, but in this case we use the method as a hook to modify the logged error. Since you cannot modify the Form property of the HTTP request, we create a new Error object and update the value of the \u201cSomeSecretFormField\u201d key. The new Error object is then manually logged to the default ELMAH error logger and we dismiss the original error. It\u2019s essential to remember to call \nDismiss()\n, because if you don\u2019t, the original error containing the sensitive form field is logged as well.", 
            "title": "Removing sensitive form data before logging to ELMAH"
        }, 
        {
            "location": "/removing-sensitive-form-data-before-logging-to-elmah/#removing-sensitive-form-data-before-logging-to-elmah", 
            "text": "", 
            "title": "Removing sensitive form data before logging to ELMAH"
        }, 
        {
            "location": "/removing-sensitive-form-data-before-logging-to-elmah/#thomas-ardal-may-1-2015", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Remove sensitive form data .   You may have something like usernames and passwords in form posts on your website. Since ELMAH automatically logs the content of a failing form POST, sensitive data potentially ends up in your log. No one else but you and your company should really get to look inside your log, but remember that everyone connected to the internet, is a potential hacking victim.  There\u2019s no build-in feature to remove data from the error data, before logging it to ELMAH. Luckily  ELMAH\u2019s Error Filtering  feature lets you accomplish that anyway by writing a bit of additional code in your global.asax.cs file:  void ErrorLog_Filtering(object sender, ExceptionFilterEventArgs args)\n{\n    var httpContext = args.Context as HttpContext;\n    if (httpContext != null   httpContext.Request.Form.AllKeys.Any(k =  k ==  SomeSecretFormField ))\n    {\n        var error = new Error(args.Exception, httpContext);\n        error.Form.Set( SomeSecretFormField ,  ***hidden*** );\n        ErrorLog.GetDefault(httpContext).Log(error);\n        args.Dismiss();\n    }\n}  The  ErrorLog_Filtering  method is called by ELMAH, every time a new exception is about to get logged. The purpose of the method is to be able to tell ELMAH not to log certain kinds of exceptions, but in this case we use the method as a hook to modify the logged error. Since you cannot modify the Form property of the HTTP request, we create a new Error object and update the value of the \u201cSomeSecretFormField\u201d key. The new Error object is then manually logged to the default ELMAH error logger and we dismiss the original error. It\u2019s essential to remember to call  Dismiss() , because if you don\u2019t, the original error containing the sensitive form field is logged as well.", 
            "title": "Thomas Ardal, May 1, 2015"
        }, 
        {
            "location": "/logging-to-multiple-elmah-logs/", 
            "text": "Logging to multiple ELMAH logs\n\n\nThomas Ardal\n, April 30, 2015\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nLogging to multiple logs\n.\n\n\n\n\nFrom time to time, we keep hearing the same types of questions like \u201cI just want to try elmah.io, but still want to log errors to my local SQL Server\u201d or \u201cI only want to log some of my errors to elmah.io\u201d and so on. In this post, we\u2019ll show you just how to accomplish that.\n\n\nUnfortunately, ELMAH doesn\u2019t support multiple log targets like other logging frameworks like Serilog. This makes logging to multiple logs a bit tricky, but no way impossible. Let\u2019s say that you\u2019re using ELMAH in your web application and configured it to log everything in SQL Server. If you look through your web.config file, you will have code looking like this somewhere:\n\n\nelmah\n\n    \nerrorLog type=\nElmah.SqlErrorLog, Elmah\n connectionStringName=\nelmah\n/\n\n\n/elmah\n\n\n\n\n\nAs you probably know, this tells ELMAH to log all uncatched errors in SQL Server with the connection string \u201celmah\u201d. You cannot add more \nerrorLog\n elements, why logging to a second log seems impossible. Meet ELMAH\u2019s Logged event, which is a great hook to log to multiple targets. Install the \nelmah.io.core\n NuGet package and add the following code to your global.asax.cs file:\n\n\nvoid ErrorLog_Logged(object sender, ErrorLoggedEventArgs args)\n{\n    var elmahIoLog = new Elmah.Io.ErrorLog(new Logger(new Guid(\ninsert your log id\n)));\n    elmahIoLog.Log(args.Entry.Error);\n}\n\n\n\n\nIn the above code, we listen for the Logged event by simply declaring a method named \nErrorLog_Logged\n. When called we create a new \nElmah.Io.ErrorLog\n instance with the GUID of your log at elmah.io. Next we simply call the Log method with a new Error object. Bam! The error is logged both in SQL Server and in elmah.io.\n\n\nIf you only want to log certain types of errors in elmah.io, but everything to your normal log, you can extend your code like this:\n\n\nvoid ErrorLog_Logged(object sender, ErrorLoggedEventArgs args)\n{\n    if (args.Entry.Error.StatusCode == 500)\n    {\n        var elmahIoLog = new Elmah.Io.ErrorLog(new Logger(new Guid(\ninsert your log id\n)));\n        elmahIoLog.Log(args.Entry.Error);\n    }\n}\n\n\n\n\nThis time we only begin logging to elmah.io, if the thrown exception is of type HttpException and contains a HTTP status code of 500.", 
            "title": "Logging to multiple ELMAH logs"
        }, 
        {
            "location": "/logging-to-multiple-elmah-logs/#logging-to-multiple-elmah-logs", 
            "text": "", 
            "title": "Logging to multiple ELMAH logs"
        }, 
        {
            "location": "/logging-to-multiple-elmah-logs/#thomas-ardal-april-30-2015", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Logging to multiple logs .   From time to time, we keep hearing the same types of questions like \u201cI just want to try elmah.io, but still want to log errors to my local SQL Server\u201d or \u201cI only want to log some of my errors to elmah.io\u201d and so on. In this post, we\u2019ll show you just how to accomplish that.  Unfortunately, ELMAH doesn\u2019t support multiple log targets like other logging frameworks like Serilog. This makes logging to multiple logs a bit tricky, but no way impossible. Let\u2019s say that you\u2019re using ELMAH in your web application and configured it to log everything in SQL Server. If you look through your web.config file, you will have code looking like this somewhere:  elmah \n     errorLog type= Elmah.SqlErrorLog, Elmah  connectionStringName= elmah /  /elmah   As you probably know, this tells ELMAH to log all uncatched errors in SQL Server with the connection string \u201celmah\u201d. You cannot add more  errorLog  elements, why logging to a second log seems impossible. Meet ELMAH\u2019s Logged event, which is a great hook to log to multiple targets. Install the  elmah.io.core  NuGet package and add the following code to your global.asax.cs file:  void ErrorLog_Logged(object sender, ErrorLoggedEventArgs args)\n{\n    var elmahIoLog = new Elmah.Io.ErrorLog(new Logger(new Guid( insert your log id )));\n    elmahIoLog.Log(args.Entry.Error);\n}  In the above code, we listen for the Logged event by simply declaring a method named  ErrorLog_Logged . When called we create a new  Elmah.Io.ErrorLog  instance with the GUID of your log at elmah.io. Next we simply call the Log method with a new Error object. Bam! The error is logged both in SQL Server and in elmah.io.  If you only want to log certain types of errors in elmah.io, but everything to your normal log, you can extend your code like this:  void ErrorLog_Logged(object sender, ErrorLoggedEventArgs args)\n{\n    if (args.Entry.Error.StatusCode == 500)\n    {\n        var elmahIoLog = new Elmah.Io.ErrorLog(new Logger(new Guid( insert your log id )));\n        elmahIoLog.Log(args.Entry.Error);\n    }\n}  This time we only begin logging to elmah.io, if the thrown exception is of type HttpException and contains a HTTP status code of 500.", 
            "title": "Thomas Ardal, April 30, 2015"
        }, 
        {
            "location": "/daily-digest-email/", 
            "text": "Daily Digest Email\n\n\nThomas Ardal\n, April 22, 2015\n\n\nEven though elmah.io provides a great UI for search your logs and even integrates with various notifiers through the business rules feature and the Zapier integration, you may not visit elmah.io every day. That\u2019s why we\u2019ve implemented the Daily Digest Email feature.\n\n\nSometimes you don\u2019t want all the details, but just want to see how your application is doing on a daily basis. With the new Daily Digest feature, you can subscribe to a daily email, containing a great overview on what happened during the last 24 hours. The email contains enough details to fit the needs of the engineers and a great overview, to be used by managers, CTO\u2019s etc. And remember, you can always dig into the details on the elmah.io website, if something looks suspicious.\n\n\nLet\u2019s take a look at the Daily Digest Email template:\n\n\n\n\nIn the top, you will find some key metrics like the total number of messages, the number of critical errors (error and fatal) as well as how many unique messages logged. Below the key metrics, you will find a graph showing the number of messages logged per hour. This is a great tool to get a quick overview of the past day and to spot trends. The bottom shows a list of the 5 most frequent messages.\n\n\nTo enable the Daily Digest Email, navigate to the Profile page and click the Emails tab:\n\n\n\n\nWe hope that you will love the new email feature as much as we\u2019ve loved building it. And remember that we appreciate feedback and always listen to our users.", 
            "title": "Daily Digest Email"
        }, 
        {
            "location": "/daily-digest-email/#daily-digest-email", 
            "text": "", 
            "title": "Daily Digest Email"
        }, 
        {
            "location": "/daily-digest-email/#thomas-ardal-april-22-2015", 
            "text": "Even though elmah.io provides a great UI for search your logs and even integrates with various notifiers through the business rules feature and the Zapier integration, you may not visit elmah.io every day. That\u2019s why we\u2019ve implemented the Daily Digest Email feature.  Sometimes you don\u2019t want all the details, but just want to see how your application is doing on a daily basis. With the new Daily Digest feature, you can subscribe to a daily email, containing a great overview on what happened during the last 24 hours. The email contains enough details to fit the needs of the engineers and a great overview, to be used by managers, CTO\u2019s etc. And remember, you can always dig into the details on the elmah.io website, if something looks suspicious.  Let\u2019s take a look at the Daily Digest Email template:   In the top, you will find some key metrics like the total number of messages, the number of critical errors (error and fatal) as well as how many unique messages logged. Below the key metrics, you will find a graph showing the number of messages logged per hour. This is a great tool to get a quick overview of the past day and to spot trends. The bottom shows a list of the 5 most frequent messages.  To enable the Daily Digest Email, navigate to the Profile page and click the Emails tab:   We hope that you will love the new email feature as much as we\u2019ve loved building it. And remember that we appreciate feedback and always listen to our users.", 
            "title": "Thomas Ardal, April 22, 2015"
        }, 
        {
            "location": "/invoicing/", 
            "text": "Invoicing\n\n\nThomas Ardal\n, April 15, 2015\n\n\nOne of the most requested features of elmah.io, actually have nothing to do with logging: Invoicing. A lot of our paying customers asked us for invoices, why we\u2019ve implemented just that in the latest release of elmah.io.\n\n\nInvoices really have nothing to do with elmah.io, but it makes your accountant a happy camper. Beneath your profile, a new Invoices tab can be found. This tab shows you a list of invoices for all your successful payments:\n\n\n\n\nClicking an invoice, opens the selected invoice in a new window:\n\n\n\n\nInvoices are available for all our corporate accounts (Small Business, Business and Enterprise). We hope that we with this change, can make your accountants stop bugging you for documentation.", 
            "title": "Invoicing"
        }, 
        {
            "location": "/invoicing/#invoicing", 
            "text": "", 
            "title": "Invoicing"
        }, 
        {
            "location": "/invoicing/#thomas-ardal-april-15-2015", 
            "text": "One of the most requested features of elmah.io, actually have nothing to do with logging: Invoicing. A lot of our paying customers asked us for invoices, why we\u2019ve implemented just that in the latest release of elmah.io.  Invoices really have nothing to do with elmah.io, but it makes your accountant a happy camper. Beneath your profile, a new Invoices tab can be found. This tab shows you a list of invoices for all your successful payments:   Clicking an invoice, opens the selected invoice in a new window:   Invoices are available for all our corporate accounts (Small Business, Business and Enterprise). We hope that we with this change, can make your accountants stop bugging you for documentation.", 
            "title": "Thomas Ardal, April 15, 2015"
        }, 
        {
            "location": "/api-v2-released/", 
            "text": "API v2 Released\n\n\nThomas Ardal\n, April 7, 2015\n\n\nTime for an update on our v2 API which we \nreleased in beta last year\n. The new API have been available for the last three months through the website and a prerelease NuGet package. This week we finished all the missing pieces for the \nnew API\n to go out of beta.\n\n\nLike discussed in the beta announcement, the v2 API is not bound to neither ELMAH nor the error XML format inside ELMAH. So this may not affect you if you\u2019re using elmah.io to log un-catched exceptions from your website, but it definitely gives you some new possibilities listed below.\n\n\nSeverities\n\n\nWe have been working on improving message severities on elmah.io for the last couple of months. ELMAH natively doesn\u2019t contain the concept of a severity or level known from other logging frameworks like log4net and Serilog. The elmah.io client now have fully support for 6 levels of severities: Verbose, Debug, Information, Warning, Error and Fatal. When logging errors through elmah.io\u2019s ErrorLog implementation for ELMAH, we assign a severity to the error, based on the status code. If you are logging to elmah.io manually (see below), you have the option of assigning a severity to each message.\n\n\nelmah.io.client\n\n\nThere\u2019s a new NuGet package in town. elmah.io previously provided two NuGet packages for hooking up error handling to your website: elmah.io and elmah.io.core. While elmah.io.core contained the ErrorLog implementation, as well as the code for communicating with elmah.io\u2019s API, the elmah.io package contained the web.config changes only. The 2.0 client still contains the two existing packages, but elmah.io.core have been split into core and client (elmah.io.client). The client contains the code for communicating with the new API and contains a nice logging interface inspired by popular logging frameworks like log4net. You can create a new logger and start logging messages to elmah.io, without changing a single line of code in your web.config and you can even log messages from console, wpf and other kinds of apps:\n\n\nvar logger = Logger.Create(new Guid(\ncc6043e9-5d7b-4986-8056-cb76d4d52e5e\n));\nlogger.Error(new ApplicationException(), \nMessage attached the error\n);\nlogger.Information(\nSome kind of information message\n);\n\n\n\n\nSerilog Sink\n\n\nMichiel van Oudheusden wrote an integration to elmah.io from the popular logging framework Serilog last year. Because elmah.io only supported errors in the past, the match where not perfect. After releasing the v2 API, we\u2019ve had the possibility to redo everything inside the elmah.io sink for Serilog, making the two tools new best friends. With the new sink, you can log messages of all Serilog levels to elmah.io, using recognizable code like this:\n\n\nLog.Logger =\n    new LoggerConfiguration()\n        .MinimumLevel.Verbose()\n        .WriteTo.ElmahIO(new Guid(\ncc6043e9-5d7b-4986-8056-cb76d4d52e5e\n))\n        .CreateLogger();\nLog.Information(\nThis in an info message\n);\nLog.Verbose(\nThis in a verbose message\n);\nLog.Fatal(new SystemException(), \nThis is a fatal message\n);\n\n\n\n\nWe hope that making it way easier to integrate with elmah.io, will give birth to some interesting new use cases. In fact we are giving away 6 month of free subscriptions to anyone creating a cool integration to elmah.io. Please get in touch if you have created an integration for elmah.io. We are already seeing integrations for different logging frameworks like Serilog and Logary, but only time will show what you come up with. We believe in open API\u2019s and open source, why everything related to our new client is available at GitHub. Also check out our updated examples on how to integrate with elmah.io on different levels.", 
            "title": "API v2 Released"
        }, 
        {
            "location": "/api-v2-released/#api-v2-released", 
            "text": "", 
            "title": "API v2 Released"
        }, 
        {
            "location": "/api-v2-released/#thomas-ardal-april-7-2015", 
            "text": "Time for an update on our v2 API which we  released in beta last year . The new API have been available for the last three months through the website and a prerelease NuGet package. This week we finished all the missing pieces for the  new API  to go out of beta.  Like discussed in the beta announcement, the v2 API is not bound to neither ELMAH nor the error XML format inside ELMAH. So this may not affect you if you\u2019re using elmah.io to log un-catched exceptions from your website, but it definitely gives you some new possibilities listed below.", 
            "title": "Thomas Ardal, April 7, 2015"
        }, 
        {
            "location": "/api-v2-released/#severities", 
            "text": "We have been working on improving message severities on elmah.io for the last couple of months. ELMAH natively doesn\u2019t contain the concept of a severity or level known from other logging frameworks like log4net and Serilog. The elmah.io client now have fully support for 6 levels of severities: Verbose, Debug, Information, Warning, Error and Fatal. When logging errors through elmah.io\u2019s ErrorLog implementation for ELMAH, we assign a severity to the error, based on the status code. If you are logging to elmah.io manually (see below), you have the option of assigning a severity to each message.", 
            "title": "Severities"
        }, 
        {
            "location": "/api-v2-released/#elmahioclient", 
            "text": "There\u2019s a new NuGet package in town. elmah.io previously provided two NuGet packages for hooking up error handling to your website: elmah.io and elmah.io.core. While elmah.io.core contained the ErrorLog implementation, as well as the code for communicating with elmah.io\u2019s API, the elmah.io package contained the web.config changes only. The 2.0 client still contains the two existing packages, but elmah.io.core have been split into core and client (elmah.io.client). The client contains the code for communicating with the new API and contains a nice logging interface inspired by popular logging frameworks like log4net. You can create a new logger and start logging messages to elmah.io, without changing a single line of code in your web.config and you can even log messages from console, wpf and other kinds of apps:  var logger = Logger.Create(new Guid( cc6043e9-5d7b-4986-8056-cb76d4d52e5e ));\nlogger.Error(new ApplicationException(),  Message attached the error );\nlogger.Information( Some kind of information message );", 
            "title": "elmah.io.client"
        }, 
        {
            "location": "/api-v2-released/#serilog-sink", 
            "text": "Michiel van Oudheusden wrote an integration to elmah.io from the popular logging framework Serilog last year. Because elmah.io only supported errors in the past, the match where not perfect. After releasing the v2 API, we\u2019ve had the possibility to redo everything inside the elmah.io sink for Serilog, making the two tools new best friends. With the new sink, you can log messages of all Serilog levels to elmah.io, using recognizable code like this:  Log.Logger =\n    new LoggerConfiguration()\n        .MinimumLevel.Verbose()\n        .WriteTo.ElmahIO(new Guid( cc6043e9-5d7b-4986-8056-cb76d4d52e5e ))\n        .CreateLogger();\nLog.Information( This in an info message );\nLog.Verbose( This in a verbose message );\nLog.Fatal(new SystemException(),  This is a fatal message );  We hope that making it way easier to integrate with elmah.io, will give birth to some interesting new use cases. In fact we are giving away 6 month of free subscriptions to anyone creating a cool integration to elmah.io. Please get in touch if you have created an integration for elmah.io. We are already seeing integrations for different logging frameworks like Serilog and Logary, but only time will show what you come up with. We believe in open API\u2019s and open source, why everything related to our new client is available at GitHub. Also check out our updated examples on how to integrate with elmah.io on different levels.", 
            "title": "Serilog Sink"
        }, 
        {
            "location": "/extended-user-details/", 
            "text": "Extended User Details\n\n\nThomas Ardal\n, Match 16, 2015\n\n\nWith elmah.io\u2019s new Extended User Details feature, you can lookup extended information about the user experiencing a bug on your website.\n\n\nWe all sometimes forget the fact that any website error hits a user one way or another. It may be a simple bug with a missing icon somewhere, but in other cases you potentially loose a sale caused by an error in your checkout flow. Everyone want\u2019s to know their users better these days, right? With the new Extended User Details feature, you can dig into the details off the actual user experiencing a bug on your website. Take action and let your users know, that they are not left stranded. Write an email, Check out their home town, browse through their social profiles like Twitter and Facebook. The possibilities are endless.\n\n\nExtended User Details are available from all of the spots showing user info. From the Overview tab on each log, click an avatar in the Affected Users widget:\n\n\n\n\nIn the log search, click the user on the error details:\n\n\n\n\nExtended User Details are available on the error overlay and the error details page as well.", 
            "title": "Extended User Details"
        }, 
        {
            "location": "/extended-user-details/#extended-user-details", 
            "text": "", 
            "title": "Extended User Details"
        }, 
        {
            "location": "/extended-user-details/#thomas-ardal-match-16-2015", 
            "text": "With elmah.io\u2019s new Extended User Details feature, you can lookup extended information about the user experiencing a bug on your website.  We all sometimes forget the fact that any website error hits a user one way or another. It may be a simple bug with a missing icon somewhere, but in other cases you potentially loose a sale caused by an error in your checkout flow. Everyone want\u2019s to know their users better these days, right? With the new Extended User Details feature, you can dig into the details off the actual user experiencing a bug on your website. Take action and let your users know, that they are not left stranded. Write an email, Check out their home town, browse through their social profiles like Twitter and Facebook. The possibilities are endless.  Extended User Details are available from all of the spots showing user info. From the Overview tab on each log, click an avatar in the Affected Users widget:   In the log search, click the user on the error details:   Extended User Details are available on the error overlay and the error details page as well.", 
            "title": "Thomas Ardal, Match 16, 2015"
        }, 
        {
            "location": "/logging-custom-data-to-elmah-io/", 
            "text": "Logging custom data to elmah.io\n\n\nThomas Ardal\n, February 24, 2015\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nLogging custom data\n.\n\n\n\n\nTime for a new feature which a lot of you\u2019ve asked for either on elmah.io or ELMAH in general: logging custom data.\n\n\nELMAH stores a lot of contextual information when an error occur. Things like cookies, stacktrace, server variables and much more are stored to ease debugging the error at a later point in time. Since the schema of ELMAH is defined by the people behind ELMAH itself, there\u2019s no really good way of enriching an error with custom variables. Until now! In the latest \nprerelease\n of the new v2 elmah.io client, you can add custom variables to an error, before it is send off to elmah.io\u2019s API.\n\n\nLet\u2019s look at some code. You have two options of decorating your errors with custom variables.\n\n\nUse the \nData\n dictionary on .NET\u2019s Exception type\n\n\nI talk to a lot of developers and not all of them know about the wonderful world of the Data dictionary. All exceptions in .NET contains a property named Data and of type IDictionary. The Data dictionary is intended for user-defined information about the exception. The elmah.io client iterates through key/values in this dictionary and ship it off to elmah.io\u2019s API. To log custom data using Data, just add a new key/value pair to the Data dictionary:\n\n\ntry\n{\n    CallSomeBusinessLogic(inputValue);\n}\ncatch (Exception e)\n{\n    e.Data.Add(\nInputValueWas\n, inputValue);\n    ErrorSignal.FromCurrentContext().Raise(e);\n}\n\n\n\n\nIn the example I add a custom variable named \nInputValueWas\n with the value of the \ninputValue\n variable. This way I will be able to see which input value caused the exception.\n\n\nUse the OnMessage hook in the elmah.io client prerelease\n\n\nYou may not use ELMAH\u2019s ErrorSignal feature, but rely on ELMAH to log uncaught exceptions only. In this scenario you probably don\u2019t have access to the thrown exception. The elmah.io client offers a hook for you to be able to execute code every time something is logged:\n\n\nLogger.OnMessage += (sender, args) =\n\n{\n    if (args.Message.Data == null) args.Message.Data = new List\nItem\n();\n    args.Message.Data.Add(new Item { Key = \nSomeOtherVariable\n, Value = someVariable });\n};\n\n\n\n\nYou may not have seen the Logger type of elmah.io before, but what\u2019s important to know right now is, that Logger is responsible for logging messages to the elmah.io API. Another new term here is Message. A message is the type encapsulating all of the information about the thrown exception.\n\n\nIn the code example I subscribe a new event handler to the \nOnMessage\n event. This tells the elmah.io client to execute your event handler, before actually logging an exception to elmah.io. I use the event to add a custom variable to the Data dictionary of the message logged to elmah.io.\n\n\nLooking at your custom variables\n\n\nLogging custom data doesn\u2019t really make anything easier, unless you have a place to show them. Luckily for you, we have thought about that and now offers a new tab on the error details:\n\n\n\n\nLike the content in the other tabs of the error details, you will be able to filter results by the variable key.", 
            "title": "Logging custom data to elmah.io"
        }, 
        {
            "location": "/logging-custom-data-to-elmah-io/#logging-custom-data-to-elmahio", 
            "text": "", 
            "title": "Logging custom data to elmah.io"
        }, 
        {
            "location": "/logging-custom-data-to-elmah-io/#thomas-ardal-february-24-2015", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Logging custom data .   Time for a new feature which a lot of you\u2019ve asked for either on elmah.io or ELMAH in general: logging custom data.  ELMAH stores a lot of contextual information when an error occur. Things like cookies, stacktrace, server variables and much more are stored to ease debugging the error at a later point in time. Since the schema of ELMAH is defined by the people behind ELMAH itself, there\u2019s no really good way of enriching an error with custom variables. Until now! In the latest  prerelease  of the new v2 elmah.io client, you can add custom variables to an error, before it is send off to elmah.io\u2019s API.  Let\u2019s look at some code. You have two options of decorating your errors with custom variables.", 
            "title": "Thomas Ardal, February 24, 2015"
        }, 
        {
            "location": "/logging-custom-data-to-elmah-io/#use-the-data-dictionary-on-nets-exception-type", 
            "text": "I talk to a lot of developers and not all of them know about the wonderful world of the Data dictionary. All exceptions in .NET contains a property named Data and of type IDictionary. The Data dictionary is intended for user-defined information about the exception. The elmah.io client iterates through key/values in this dictionary and ship it off to elmah.io\u2019s API. To log custom data using Data, just add a new key/value pair to the Data dictionary:  try\n{\n    CallSomeBusinessLogic(inputValue);\n}\ncatch (Exception e)\n{\n    e.Data.Add( InputValueWas , inputValue);\n    ErrorSignal.FromCurrentContext().Raise(e);\n}  In the example I add a custom variable named  InputValueWas  with the value of the  inputValue  variable. This way I will be able to see which input value caused the exception.", 
            "title": "Use the Data dictionary on .NET\u2019s Exception type"
        }, 
        {
            "location": "/logging-custom-data-to-elmah-io/#use-the-onmessage-hook-in-the-elmahio-client-prerelease", 
            "text": "You may not use ELMAH\u2019s ErrorSignal feature, but rely on ELMAH to log uncaught exceptions only. In this scenario you probably don\u2019t have access to the thrown exception. The elmah.io client offers a hook for you to be able to execute code every time something is logged:  Logger.OnMessage += (sender, args) = \n{\n    if (args.Message.Data == null) args.Message.Data = new List Item ();\n    args.Message.Data.Add(new Item { Key =  SomeOtherVariable , Value = someVariable });\n};  You may not have seen the Logger type of elmah.io before, but what\u2019s important to know right now is, that Logger is responsible for logging messages to the elmah.io API. Another new term here is Message. A message is the type encapsulating all of the information about the thrown exception.  In the code example I subscribe a new event handler to the  OnMessage  event. This tells the elmah.io client to execute your event handler, before actually logging an exception to elmah.io. I use the event to add a custom variable to the Data dictionary of the message logged to elmah.io.", 
            "title": "Use the OnMessage hook in the elmah.io client prerelease"
        }, 
        {
            "location": "/logging-custom-data-to-elmah-io/#looking-at-your-custom-variables", 
            "text": "Logging custom data doesn\u2019t really make anything easier, unless you have a place to show them. Luckily for you, we have thought about that and now offers a new tab on the error details:   Like the content in the other tabs of the error details, you will be able to filter results by the variable key.", 
            "title": "Looking at your custom variables"
        }, 
        {
            "location": "/trial-accounts-introduced/", 
            "text": "Trial accounts introduced\n\n\nThomas Ardal\n, January 16, 2015\n\n\nTime for an update from us at elmah.io. Unlike most people, we have spent the Christmas holiday working. Multiple fixes and improvements have been introduced, making elmah.io even sweeter and more stable. We\u2019ve also spend quite some time evaluating our plans and pricing.\n\n\nelmah.io has become very popular among all of you and we are fortunate to have grown as much as we have in just 1\u00bd years. Like most other websites out there providing a free plan, most users doesn\u2019t pay anything for hosting their error logs. Hosting a lot of gigabytes of data doesn\u2019t come for free, why we\u2019ve decided to switch to a trial based model.\n\n\nStarting today, we provide 30 days of free trial for all new users. Existing users will be offered 30 additional days as well. If you are using elmah.io for free, please use the 30 days to evaluate elmah.io and make a decision about staying or not. After the 30 days, you will no longer have access to logs created by you (logs created by paying users will of course still be available).\n\n\nWe hope that you\u2019ve loved elmah.io so far and that you will consider supporting us. We don\u2019t show ads or anything else, why having paying customers is the only way we can continue to evolve elmah.io. Visit our \nplans and pricing\n page to checkout all of the great features of elmah.io and how little to pay each month.\n\n\nIf you haven\u2019t noticed already, we provide 6 months of free usage for Microsoft BizSpark companies and Microsoft MVPs. As an addition to this, we now provide free usage for open source projects, utilizing elmah.io as part of their code. Check out the \nplans and pricing\n page for details on how to apply.", 
            "title": "Trial accounts introduced"
        }, 
        {
            "location": "/trial-accounts-introduced/#trial-accounts-introduced", 
            "text": "", 
            "title": "Trial accounts introduced"
        }, 
        {
            "location": "/trial-accounts-introduced/#thomas-ardal-january-16-2015", 
            "text": "Time for an update from us at elmah.io. Unlike most people, we have spent the Christmas holiday working. Multiple fixes and improvements have been introduced, making elmah.io even sweeter and more stable. We\u2019ve also spend quite some time evaluating our plans and pricing.  elmah.io has become very popular among all of you and we are fortunate to have grown as much as we have in just 1\u00bd years. Like most other websites out there providing a free plan, most users doesn\u2019t pay anything for hosting their error logs. Hosting a lot of gigabytes of data doesn\u2019t come for free, why we\u2019ve decided to switch to a trial based model.  Starting today, we provide 30 days of free trial for all new users. Existing users will be offered 30 additional days as well. If you are using elmah.io for free, please use the 30 days to evaluate elmah.io and make a decision about staying or not. After the 30 days, you will no longer have access to logs created by you (logs created by paying users will of course still be available).  We hope that you\u2019ve loved elmah.io so far and that you will consider supporting us. We don\u2019t show ads or anything else, why having paying customers is the only way we can continue to evolve elmah.io. Visit our  plans and pricing  page to checkout all of the great features of elmah.io and how little to pay each month.  If you haven\u2019t noticed already, we provide 6 months of free usage for Microsoft BizSpark companies and Microsoft MVPs. As an addition to this, we now provide free usage for open source projects, utilizing elmah.io as part of their code. Check out the  plans and pricing  page for details on how to apply.", 
            "title": "Thomas Ardal, January 16, 2015"
        }, 
        {
            "location": "/api-v2-beta-released/", 
            "text": "API v2 Beta Released\n\n\nThomas Ardal\n, December 9, 2014\n\n\nAt elmah.io we believe in open APIs. That\u2019s why we have offered an API to create errors and query them pretty much from the day of the first alpha. Unfortunately the API have been very tight coupled with ELMAHs ErrorXml format, which makes it hard to integrate to elmah.io without having extensive knowledge about the internals of ELMAH itself. Well, not anymore! Please welcome the API v2 beta.\n\n\nSo why a new API at all? As mentioned in the beginning, logging to the elmah.io V1 API requires you to generate a body containing the error in ELMAHs error XML format. While it would be possible to generate the XML by hand, you would probably always end up referencing the \nelmah.corelibrary\n NuGet package which contains strongly typed classes to actually generate the XML. If you are logging to ELMAH from an ASP.NET website, you are already referencing elmah.corelibrary, but if you want to log messages to elmah.io from something else, you probably don\u2019t want to reference packages dependent of System.Web.\n\n\n\n\nSo how does the new API differ? First of all we\u2019ve switched to JSON and a much purer REST implementation. Second, the error XML have been replaced with a custom format which we simply call \nMessage\n. A message is unlike Error from V1, simply a wrapper for logging and retrieving data to and from elmah.io. ELMAH doesn\u2019t contain the concept of a severity like most other logging frameworks. This is not a bug, but caused by the fact that ELMAH focuses around errors. Message has the concept of severity which means that you can start logging other types of information to elmah.io like Debug and Information.\n\n\nFor now, check out the new \nAPI V2 documentation\n and check out the \nexample\n. In the next month, we will improve the support for severities on the elmah.io website as well as release a strongly typed client for the v2 API (preview available \nhere\n). When we feel comfortable about the new API, we will switch the \nelmah.io client\n to use the new API as well.", 
            "title": "API v2 Beta Released"
        }, 
        {
            "location": "/api-v2-beta-released/#api-v2-beta-released", 
            "text": "", 
            "title": "API v2 Beta Released"
        }, 
        {
            "location": "/api-v2-beta-released/#thomas-ardal-december-9-2014", 
            "text": "At elmah.io we believe in open APIs. That\u2019s why we have offered an API to create errors and query them pretty much from the day of the first alpha. Unfortunately the API have been very tight coupled with ELMAHs ErrorXml format, which makes it hard to integrate to elmah.io without having extensive knowledge about the internals of ELMAH itself. Well, not anymore! Please welcome the API v2 beta.  So why a new API at all? As mentioned in the beginning, logging to the elmah.io V1 API requires you to generate a body containing the error in ELMAHs error XML format. While it would be possible to generate the XML by hand, you would probably always end up referencing the  elmah.corelibrary  NuGet package which contains strongly typed classes to actually generate the XML. If you are logging to ELMAH from an ASP.NET website, you are already referencing elmah.corelibrary, but if you want to log messages to elmah.io from something else, you probably don\u2019t want to reference packages dependent of System.Web.   So how does the new API differ? First of all we\u2019ve switched to JSON and a much purer REST implementation. Second, the error XML have been replaced with a custom format which we simply call  Message . A message is unlike Error from V1, simply a wrapper for logging and retrieving data to and from elmah.io. ELMAH doesn\u2019t contain the concept of a severity like most other logging frameworks. This is not a bug, but caused by the fact that ELMAH focuses around errors. Message has the concept of severity which means that you can start logging other types of information to elmah.io like Debug and Information.  For now, check out the new  API V2 documentation  and check out the  example . In the next month, we will improve the support for severities on the elmah.io website as well as release a strongly typed client for the v2 API (preview available  here ). When we feel comfortable about the new API, we will switch the  elmah.io client  to use the new API as well.", 
            "title": "Thomas Ardal, December 9, 2014"
        }, 
        {
            "location": "/elmah-code-snippets-for-visual-studio/", 
            "text": "ELMAH Code Snippets for Visual Studio\n\n\nThomas Ardal\n, November 21, 2014\n\n\nEver used \nCode Snippets\n in Visual Studio? Code Snippets is a great way to reduce keyboard input and help you be more productive by automating typing common lines of code.\n\n\nAt elmah.io we love ELMAH (big surprise). That\u2019s why we have decided to open source the code snippets that we use internally to automate writing code against the ELMAH libraries. The snippets can be found at our organization on GitHub:\n\n\nhttps://github.com/elmahio/ELMAHCodeSnippets\n\n\nLet\u2019s look at an example to see what the possibilities are using these snippets. Ever been frustrated doing manual logging to your ELMAH log using the \nErrorSignal\n type? Not anymore with the \ntryraise\n snippet:\n\n\n\n\nWhen hitting the Tab key, the following code is generated:\n\n\n\n\nPretty sweet, right? \ntryraise\n is one of 6 snippets available, but more will come. We also accept pull requests, so please send us your favorite ELMAH snippets or improve the ones already there.\n\n\nTo install the snippets, simply clone (or download) the \ngit repository\n and import the snippets in the Code Snippet Manager from within Visual Studio.\n\n\nBut wait there\u2019s more! You don\u2019t even have to install the snippets manually. Our \nelmah.io extension for Visual Studio\n already ships with all of the snippets, making it super easy to install them using the Extensions and Updates feature:", 
            "title": "ELMAH Code Snippets for Visual Studio"
        }, 
        {
            "location": "/elmah-code-snippets-for-visual-studio/#elmah-code-snippets-for-visual-studio", 
            "text": "", 
            "title": "ELMAH Code Snippets for Visual Studio"
        }, 
        {
            "location": "/elmah-code-snippets-for-visual-studio/#thomas-ardal-november-21-2014", 
            "text": "Ever used  Code Snippets  in Visual Studio? Code Snippets is a great way to reduce keyboard input and help you be more productive by automating typing common lines of code.  At elmah.io we love ELMAH (big surprise). That\u2019s why we have decided to open source the code snippets that we use internally to automate writing code against the ELMAH libraries. The snippets can be found at our organization on GitHub:  https://github.com/elmahio/ELMAHCodeSnippets  Let\u2019s look at an example to see what the possibilities are using these snippets. Ever been frustrated doing manual logging to your ELMAH log using the  ErrorSignal  type? Not anymore with the  tryraise  snippet:   When hitting the Tab key, the following code is generated:   Pretty sweet, right?  tryraise  is one of 6 snippets available, but more will come. We also accept pull requests, so please send us your favorite ELMAH snippets or improve the ones already there.  To install the snippets, simply clone (or download) the  git repository  and import the snippets in the Code Snippet Manager from within Visual Studio.  But wait there\u2019s more! You don\u2019t even have to install the snippets manually. Our  elmah.io extension for Visual Studio  already ships with all of the snippets, making it super easy to install them using the Extensions and Updates feature:", 
            "title": "Thomas Ardal, November 21, 2014"
        }, 
        {
            "location": "/elmah-io-have-been-accepted-onto-microsoft-bizspark/", 
            "text": "elmah.io have been accepted onto Microsoft BizSpark\n\n\nThomas Ardal\n, November 5, 2014\n\n\nWe are happy to report that Microsoft have accepted elmah.io as a \nBizSpark\n member.\n\n\nTo celebrate this awesome news, we have a great offer for you, but more about that later. For those of you who may not know Microsoft BizSpark, it\u2019s a great platform for boosting your startup. Besides getting a lot of free software and Azure hosting, you get access to a network of investors and mentors as well as great visibility. We strongly believe that being a member of the program will help elmah.io grow into the future.\n\n\nNow for the good offer. Being a young startup ourselves, we are dependent of all the help we can get. We believe in helping each other out, why we have decided to give 6 months of free \nSmall Business plan\n to other BizSpark members. Furthermore we propagate the deal to Microsoft \nMVP\ns as well. MVPs will get 6 months free usage on the \nPersonal plan\n.\n\n\nTo apply for BizSpark or MVP discount, write us an \nemail\n telling a bit about your startup or yourself. Please also provide us with documentation that you actually own the titles like a public profile link to \nmicrosoft.com/bizspark\n or \nmvp.microsoft.com\n.\n\n\nFeatures of the Personal plan:\n\n\n\n\nUnlimited number of logs.\n\n\nMore space for errors and longer retention\n\n\nVisual Studio integration\n\n\nDaily backup\n\n\n\n\nFeatures of the Small Business plan:\n\n\n\n\nUnlimited number of logs\n\n\nEven more space and longer retention than the Personal plan\n\n\nVisual Studio integration\n\n\nDaily backup and replicated index making it suitable for production\n\n\nBusiness Rules (web hooks, email alerts etc.)", 
            "title": "elmah.io have been accepted onto Microsoft BizSpark"
        }, 
        {
            "location": "/elmah-io-have-been-accepted-onto-microsoft-bizspark/#elmahio-have-been-accepted-onto-microsoft-bizspark", 
            "text": "", 
            "title": "elmah.io have been accepted onto Microsoft BizSpark"
        }, 
        {
            "location": "/elmah-io-have-been-accepted-onto-microsoft-bizspark/#thomas-ardal-november-5-2014", 
            "text": "We are happy to report that Microsoft have accepted elmah.io as a  BizSpark  member.  To celebrate this awesome news, we have a great offer for you, but more about that later. For those of you who may not know Microsoft BizSpark, it\u2019s a great platform for boosting your startup. Besides getting a lot of free software and Azure hosting, you get access to a network of investors and mentors as well as great visibility. We strongly believe that being a member of the program will help elmah.io grow into the future.  Now for the good offer. Being a young startup ourselves, we are dependent of all the help we can get. We believe in helping each other out, why we have decided to give 6 months of free  Small Business plan  to other BizSpark members. Furthermore we propagate the deal to Microsoft  MVP s as well. MVPs will get 6 months free usage on the  Personal plan .  To apply for BizSpark or MVP discount, write us an  email  telling a bit about your startup or yourself. Please also provide us with documentation that you actually own the titles like a public profile link to  microsoft.com/bizspark  or  mvp.microsoft.com .  Features of the Personal plan:   Unlimited number of logs.  More space for errors and longer retention  Visual Studio integration  Daily backup   Features of the Small Business plan:   Unlimited number of logs  Even more space and longer retention than the Personal plan  Visual Studio integration  Daily backup and replicated index making it suitable for production  Business Rules (web hooks, email alerts etc.)", 
            "title": "Thomas Ardal, November 5, 2014"
        }, 
        {
            "location": "/how-to-log-errors-to-elmah-programmatically/", 
            "text": "How to log errors to ELMAH programmatically\n\n\nThomas Ardal\n, October 22, 2014\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nLogging errors programmatically\n.\n\n\n\n\nSo you\u2019ve setup a shiny new ELMAH log and all of your un-handled errors are logged to ELMAH. Now you\u2019re wondering: \u201cHow do I log my handled errors to ELMAH programmatically?\u201d\n\n\nYou are in luck! ELMAH provides a nice API to do just that through error signaling. Consider the following code:\n\n\ntry\n{\n    int i = 0;\n    int result = 42 / i;\n}\ncatch (DivideByZeroException e)\n{\n    // What to do?\n}\n\n\n\n\nObviously an exception is thrown when trying to divide by zero, but what if we want to catch (and log) that exception instead of throwing it back through the call stack? With ELMAH\u2019s \nErrorSignal\n class we can log the error:\n\n\ntry\n{\n    int i = 0;\n    int result = 42 / i;\n}\ncatch (DivideByZeroException e)\n{\n    ErrorSignal.FromCurrentContext().Raise(e);\n}\n\n\n\n\nWe call the static method \nFromCurrentContext\n on the \nErrorSignal\n class, which returns a new object for doing the actual logging. Logging happens through the \nRaise\n method, which logs the exception to the configured ELMAH storage endpoint.\n\n\nIn the example above, I use the \nFromCurrentContext\n helper to create a new instance of \nErrorSignal\n. ELMAH also works outside the context of a webserver and in this case, you would simply use the default logger with \nnull\n as the http context:\n\n\nErrorLog.GetDefault(null).Log(new Error(e));", 
            "title": "How to log errors to ELMAH programmatically"
        }, 
        {
            "location": "/how-to-log-errors-to-elmah-programmatically/#how-to-log-errors-to-elmah-programmatically", 
            "text": "", 
            "title": "How to log errors to ELMAH programmatically"
        }, 
        {
            "location": "/how-to-log-errors-to-elmah-programmatically/#thomas-ardal-october-22-2014", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Logging errors programmatically .   So you\u2019ve setup a shiny new ELMAH log and all of your un-handled errors are logged to ELMAH. Now you\u2019re wondering: \u201cHow do I log my handled errors to ELMAH programmatically?\u201d  You are in luck! ELMAH provides a nice API to do just that through error signaling. Consider the following code:  try\n{\n    int i = 0;\n    int result = 42 / i;\n}\ncatch (DivideByZeroException e)\n{\n    // What to do?\n}  Obviously an exception is thrown when trying to divide by zero, but what if we want to catch (and log) that exception instead of throwing it back through the call stack? With ELMAH\u2019s  ErrorSignal  class we can log the error:  try\n{\n    int i = 0;\n    int result = 42 / i;\n}\ncatch (DivideByZeroException e)\n{\n    ErrorSignal.FromCurrentContext().Raise(e);\n}  We call the static method  FromCurrentContext  on the  ErrorSignal  class, which returns a new object for doing the actual logging. Logging happens through the  Raise  method, which logs the exception to the configured ELMAH storage endpoint.  In the example above, I use the  FromCurrentContext  helper to create a new instance of  ErrorSignal . ELMAH also works outside the context of a webserver and in this case, you would simply use the default logger with  null  as the http context:  ErrorLog.GetDefault(null).Log(new Error(e));", 
            "title": "Thomas Ardal, October 22, 2014"
        }, 
        {
            "location": "/elmah-vs-log4net/", 
            "text": "ELMAH vs log4net\n\n\nThomas Ardal\n, September 27, 2014\n\n\nA lot of people have asked and still ask: What is the difference between ELMAH and log4net? This article will explain exactly how the two logging frameworks vary. Let\u2019s start by defining each tool.\n\n\nELMAH\n\n\nELMAH is an error logging framework originally developed by Atif Aziz able to log all unhandled exceptions from .NET web applications. Errors can be logged to a variety of destinations through ELMAH\u2019s plugin model called error logs. Plugins for XML, SQL Server, MySQL, Elasticsearch and many more exists. ELMAH automatically collects a lot of information from the HTTP context when logging the error, giving you the possibility to inspect request parameters, cookies and much more for the failed request. Custom errors can be logged to ELMAH, by manually calling the error log.\n\n\nAdvantages\n\n\n\n\nAutomatically logs unhandled exceptions.\n\n\nCollects a lot of useful information about the failing HTTP request.\n\n\nComes with an UI.\n\n\nBroadly adopted by the community.\n\n\n\n\nlog4net\n\n\nlog4net is a port of the popular Java logging framework log4j. Like log4j, log4net is maintained by the Apache Software Foundation. log4net is a generic logging framework able to log both errors and other types of logging (debug, information etc.). log4net needs to be invoked manually and therefore doesn\u2019t log anything automatic. log4net comes with multiple plugins (called appenders) able to log errors to pretty much every destination out there.\n\n\nAdvantages\n\n\n\n\nOutput to multiple logging destinations.\n\n\nLogs both debug, information, errors etc.\n\n\nBroadly adopted by the community.\n\n\n\n\nWhat should you choose?\n\n\nThe depends. If you want a log of every unhandled exceptions on you website, you should go with ELMAH. If you want to keep a log file containing other types of logging than errors, your should go with log4net. In most use cases, it really makes sense to use both and the one doesn't rule the other one out.\n\n\nTo wrap it up, we\u2019ve taken the best from both worlds and put it into elmah.io. Besides all of the advantages from ELMAH, elmah.io also support multiple logging destinations and messages levels (debug, information etc.). Register for free at elmah.io to start logging. You can also log directly to elmah.io from log4net by following the \nLogging to elmah.io from log4net guide\n.", 
            "title": "ELMAH vs log4net"
        }, 
        {
            "location": "/elmah-vs-log4net/#elmah-vs-log4net", 
            "text": "", 
            "title": "ELMAH vs log4net"
        }, 
        {
            "location": "/elmah-vs-log4net/#thomas-ardal-september-27-2014", 
            "text": "A lot of people have asked and still ask: What is the difference between ELMAH and log4net? This article will explain exactly how the two logging frameworks vary. Let\u2019s start by defining each tool.", 
            "title": "Thomas Ardal, September 27, 2014"
        }, 
        {
            "location": "/elmah-vs-log4net/#elmah", 
            "text": "ELMAH is an error logging framework originally developed by Atif Aziz able to log all unhandled exceptions from .NET web applications. Errors can be logged to a variety of destinations through ELMAH\u2019s plugin model called error logs. Plugins for XML, SQL Server, MySQL, Elasticsearch and many more exists. ELMAH automatically collects a lot of information from the HTTP context when logging the error, giving you the possibility to inspect request parameters, cookies and much more for the failed request. Custom errors can be logged to ELMAH, by manually calling the error log.", 
            "title": "ELMAH"
        }, 
        {
            "location": "/elmah-vs-log4net/#advantages", 
            "text": "Automatically logs unhandled exceptions.  Collects a lot of useful information about the failing HTTP request.  Comes with an UI.  Broadly adopted by the community.", 
            "title": "Advantages"
        }, 
        {
            "location": "/elmah-vs-log4net/#log4net", 
            "text": "log4net is a port of the popular Java logging framework log4j. Like log4j, log4net is maintained by the Apache Software Foundation. log4net is a generic logging framework able to log both errors and other types of logging (debug, information etc.). log4net needs to be invoked manually and therefore doesn\u2019t log anything automatic. log4net comes with multiple plugins (called appenders) able to log errors to pretty much every destination out there.", 
            "title": "log4net"
        }, 
        {
            "location": "/elmah-vs-log4net/#advantages_1", 
            "text": "Output to multiple logging destinations.  Logs both debug, information, errors etc.  Broadly adopted by the community.", 
            "title": "Advantages"
        }, 
        {
            "location": "/elmah-vs-log4net/#what-should-you-choose", 
            "text": "The depends. If you want a log of every unhandled exceptions on you website, you should go with ELMAH. If you want to keep a log file containing other types of logging than errors, your should go with log4net. In most use cases, it really makes sense to use both and the one doesn't rule the other one out.  To wrap it up, we\u2019ve taken the best from both worlds and put it into elmah.io. Besides all of the advantages from ELMAH, elmah.io also support multiple logging destinations and messages levels (debug, information etc.). Register for free at elmah.io to start logging. You can also log directly to elmah.io from log4net by following the  Logging to elmah.io from log4net guide .", 
            "title": "What should you choose?"
        }, 
        {
            "location": "/logging-to-elmah-io-through-a-http-proxy/", 
            "text": "Logging to elmah.io through a HTTP proxy\n\n\nThomas Ardal\n, September 23, 2014\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nLogging through a HTTP proxy\n.\n\n\n\n\nYou may find yourself in a situation, where your production web servers isn\u2019t allowed HTTP requests towards the public internet. This also impacts the elmah.io client, which requires access to the URL \nelmah.io/api\n. A popular choice of implementing this kind of restriction nowadays, seem to be through a HTTP proxy like squid.\n\n\nLuckily the elmah.io client supports proxy configuration out of the box. Let\u2019s look at how to configure a HTTP proxy through web.config:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nconfiguration\n\n  \nconfigSections\n\n    \nsectionGroup name=\nelmah\n\n      \nsection name=\nsecurity\n requirePermission=\nfalse\n type=\nElmah.SecuritySectionHandler, Elmah\n /\n\n      \nsection name=\nerrorLog\n requirePermission=\nfalse\n type=\nElmah.ErrorLogSectionHandler, Elmah\n /\n\n      \nsection name=\nerrorMail\n requirePermission=\nfalse\n type=\nElmah.ErrorMailSectionHandler, Elmah\n /\n\n      \nsection name=\nerrorFilter\n requirePermission=\nfalse\n type=\nElmah.ErrorFilterSectionHandler, Elmah\n /\n\n    \n/sectionGroup\n\n  \n/configSections\n\n  \nelmah\n\n    \nsecurity allowRemoteAccess=\nfalse\n /\n\n    \nerrorLog type=\nElmah.Io.ErrorLog, Elmah.Io\n LogId=\n59AA232A-F80A-4414-801D-F305D8AE55D7\n /\n\n  \n/elmah\n\n  \nsystem.net\n\n    \ndefaultProxy\n\n      \nproxy usesystemdefault=\nTrue\n proxyaddress=\nhttp://192.168.0.1:3128\n bypassonlocal=\nFalse\n/\n\n    \n/defaultProxy\n\n  \n/system.net\n\n\n/configuration\n\n\n\n\n\nThe above example is of course greatly simplified.\n\n\nThe elmah.io client automatically picks up the \ndefaultProxy\n configuration through the system.net element. defaultProxy tunnels every request from your server, including requests to elmah.io, through the proxy located on 192.18.0.1 port 3128 (or whatever IP/hostname and port your are using).", 
            "title": "Logging to elmah.io through a HTTP proxy"
        }, 
        {
            "location": "/logging-to-elmah-io-through-a-http-proxy/#logging-to-elmahio-through-a-http-proxy", 
            "text": "", 
            "title": "Logging to elmah.io through a HTTP proxy"
        }, 
        {
            "location": "/logging-to-elmah-io-through-a-http-proxy/#thomas-ardal-september-23-2014", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Logging through a HTTP proxy .   You may find yourself in a situation, where your production web servers isn\u2019t allowed HTTP requests towards the public internet. This also impacts the elmah.io client, which requires access to the URL  elmah.io/api . A popular choice of implementing this kind of restriction nowadays, seem to be through a HTTP proxy like squid.  Luckily the elmah.io client supports proxy configuration out of the box. Let\u2019s look at how to configure a HTTP proxy through web.config:  ?xml version= 1.0  encoding= utf-8 ?  configuration \n   configSections \n     sectionGroup name= elmah \n       section name= security  requirePermission= false  type= Elmah.SecuritySectionHandler, Elmah  / \n       section name= errorLog  requirePermission= false  type= Elmah.ErrorLogSectionHandler, Elmah  / \n       section name= errorMail  requirePermission= false  type= Elmah.ErrorMailSectionHandler, Elmah  / \n       section name= errorFilter  requirePermission= false  type= Elmah.ErrorFilterSectionHandler, Elmah  / \n     /sectionGroup \n   /configSections \n   elmah \n     security allowRemoteAccess= false  / \n     errorLog type= Elmah.Io.ErrorLog, Elmah.Io  LogId= 59AA232A-F80A-4414-801D-F305D8AE55D7  / \n   /elmah \n   system.net \n     defaultProxy \n       proxy usesystemdefault= True  proxyaddress= http://192.168.0.1:3128  bypassonlocal= False / \n     /defaultProxy \n   /system.net  /configuration   The above example is of course greatly simplified.  The elmah.io client automatically picks up the  defaultProxy  configuration through the system.net element. defaultProxy tunnels every request from your server, including requests to elmah.io, through the proxy located on 192.18.0.1 port 3128 (or whatever IP/hostname and port your are using).", 
            "title": "Thomas Ardal, September 23, 2014"
        }, 
        {
            "location": "/logging-to-elmah-io-from-javascript-using-jsnlog/", 
            "text": "Logging from JSNLog\n\n\nThomas Ardal\n, August 29, 2014\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nLogging from JSNLog\n\n\n\n\nUsing JSNLog you will be able to log JavaScript errors to elmah.io. In this sample, we will focus about logging JavaScript errors from a ASP.NET MVC web application, but you can use JSNLog to log anything to elmah.io, so please check out their documentation.\n\n\nStart by installing the JSNLog.Elmah package:\n\n\nInstall-Package JSNLog.Elmah\n\n\n\n\nThis installs and setup JSNLog into your project, using ELMAH as an appender. Then install elmah.io:\n\n\nInstall-Package elmah.io\n\n\n\n\nRemember to input a valid log id during the installation. Add the JSNLog code before any script imports in your _Layout.cshtml file:\n\n\n@Html.Raw(JSNLog.JavascriptLogging.Configure())\n\n\n\n\nYou are ready to log errors from JavaScript til elmah.io. To test that everything is installed correctly, launch your web application and execute the following JavaScript using Chrome Developer Tools or similar:\n\n\nJL().fatal(\nlog message\n);\n\n\n\n\nNavigate to you log at elmah.io and observe the new error. As you can see, logging JavaScript errors is now extremely simple and can be build into any try-catch, jQuery fail handlers and pretty much anywhere else. To log every JavaScript error, add the following to the bottom of the _Layout.cshtml file:\n\n\nscript\n\nwindow.onerror = function (errorMsg, url, lineNumber, column, errorObj) {\n\n    // Send object with all data to server side log, using severity fatal,\n    // from logger \nonerrorLogger\n\n    JL(\nonerrorLogger\n).fatalException({\n        \nmsg\n: \nException!\n,\n        \nerrorMsg\n: errorMsg, \nurl\n: url,\n        \nline number\n: lineNumber, \ncolumn\n: column\n    }, errorObj);\n\n    // Tell browser to run its own error handler as well  \n    return false;\n}\n\n/script", 
            "title": "Logging to elmah.io from JavaScript using JSNLog"
        }, 
        {
            "location": "/logging-to-elmah-io-from-javascript-using-jsnlog/#logging-from-jsnlog", 
            "text": "", 
            "title": "Logging from JSNLog"
        }, 
        {
            "location": "/logging-to-elmah-io-from-javascript-using-jsnlog/#thomas-ardal-august-29-2014", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Logging from JSNLog   Using JSNLog you will be able to log JavaScript errors to elmah.io. In this sample, we will focus about logging JavaScript errors from a ASP.NET MVC web application, but you can use JSNLog to log anything to elmah.io, so please check out their documentation.  Start by installing the JSNLog.Elmah package:  Install-Package JSNLog.Elmah  This installs and setup JSNLog into your project, using ELMAH as an appender. Then install elmah.io:  Install-Package elmah.io  Remember to input a valid log id during the installation. Add the JSNLog code before any script imports in your _Layout.cshtml file:  @Html.Raw(JSNLog.JavascriptLogging.Configure())  You are ready to log errors from JavaScript til elmah.io. To test that everything is installed correctly, launch your web application and execute the following JavaScript using Chrome Developer Tools or similar:  JL().fatal( log message );  Navigate to you log at elmah.io and observe the new error. As you can see, logging JavaScript errors is now extremely simple and can be build into any try-catch, jQuery fail handlers and pretty much anywhere else. To log every JavaScript error, add the following to the bottom of the _Layout.cshtml file:  script \nwindow.onerror = function (errorMsg, url, lineNumber, column, errorObj) {\n\n    // Send object with all data to server side log, using severity fatal,\n    // from logger  onerrorLogger \n    JL( onerrorLogger ).fatalException({\n         msg :  Exception! ,\n         errorMsg : errorMsg,  url : url,\n         line number : lineNumber,  column : column\n    }, errorObj);\n\n    // Tell browser to run its own error handler as well  \n    return false;\n} /script", 
            "title": "Thomas Ardal, August 29, 2014"
        }, 
        {
            "location": "/great-new-features-for-our-paying-customers/", 
            "text": "Great new features for our paying customers\n\n\nThomas Ardal\n, August 12, 2014\n\n\nTime for another update on some of the amazing stuff we\u2019ve build recently. This time we focused primarily on our paying customers, with a bunch of great new features and improvements.\n\n\nTime intervals and auto-refresh\n\n\nWe are really proud of our \nredesigned\n log Overview. Guess what! The Overview just became even cooler. A couple of new controls in the top right now lets you show data from different intervals like \u201clast hour\u201d, \u201clast 6 hours\u201d and so on. But there\u2019s more. Click the auto-refresh icon and the Overview will automatically refresh every 5 seconds. Time to put that page on a large wall mounted flat screen?\n\n\n\n\nLog Search\n\n\nSince we \nlaunched unlimited logs on all paid plans\n, you guys have been busy creating new logs. Even though having a lot of logs feels totally awesome, it may be hard finding the right one to click. That\u2019s why we\u2019ve implemented quick search on the dashboard:\n\n\n\n\nSend mails to multiple recipients\n\n\nIt may not be all of you who know this, but elmah.io contains one of the strongest query based rule engines on the cloud logging marked. You can write complex queries and execute various rules when new errors matching your query are logged. We\u2019ve extended the email rule to let you send an error email to multiple email addresses:\n\n\n\n\nInline .NET source browsing\n\n\nThat\u2019s right! Browse the .NET types in stack traces directly from elmah.io. We utilize the new Roslyn based referencesource from Microsoft, to start building a new time saving feature. Ever wanted to click a type in the stack trace on a webpage? Well, now you can on elmah.io. We\u2019ve started out adding support for types only, but namespaces, methods and more will follow:\n\n\n\n\nBefore we finish up, we just want to mention two more things. First up, we now support four additional credit card types (yes, AmEx is now supported). Secondly we want to mention our new \nVisual Studio extension\n again. Please check it out.\n\n\nAs usual please don\u2019t hesitate to contact us through \nUserVoice\n, \nTwitter\n or \nEmail\n..", 
            "title": "Great new features for our paying customers"
        }, 
        {
            "location": "/great-new-features-for-our-paying-customers/#great-new-features-for-our-paying-customers", 
            "text": "", 
            "title": "Great new features for our paying customers"
        }, 
        {
            "location": "/great-new-features-for-our-paying-customers/#thomas-ardal-august-12-2014", 
            "text": "", 
            "title": "Thomas Ardal, August 12, 2014"
        }, 
        {
            "location": "/great-new-features-for-our-paying-customers/#time-for-another-update-on-some-of-the-amazing-stuff-weve-build-recently-this-time-we-focused-primarily-on-our-paying-customers-with-a-bunch-of-great-new-features-and-improvements", 
            "text": "", 
            "title": "Time for another update on some of the amazing stuff we\u2019ve build recently. This time we focused primarily on our paying customers, with a bunch of great new features and improvements."
        }, 
        {
            "location": "/great-new-features-for-our-paying-customers/#time-intervals-and-auto-refresh", 
            "text": "We are really proud of our  redesigned  log Overview. Guess what! The Overview just became even cooler. A couple of new controls in the top right now lets you show data from different intervals like \u201clast hour\u201d, \u201clast 6 hours\u201d and so on. But there\u2019s more. Click the auto-refresh icon and the Overview will automatically refresh every 5 seconds. Time to put that page on a large wall mounted flat screen?", 
            "title": "Time intervals and auto-refresh"
        }, 
        {
            "location": "/great-new-features-for-our-paying-customers/#log-search", 
            "text": "Since we  launched unlimited logs on all paid plans , you guys have been busy creating new logs. Even though having a lot of logs feels totally awesome, it may be hard finding the right one to click. That\u2019s why we\u2019ve implemented quick search on the dashboard:", 
            "title": "Log Search"
        }, 
        {
            "location": "/great-new-features-for-our-paying-customers/#send-mails-to-multiple-recipients", 
            "text": "It may not be all of you who know this, but elmah.io contains one of the strongest query based rule engines on the cloud logging marked. You can write complex queries and execute various rules when new errors matching your query are logged. We\u2019ve extended the email rule to let you send an error email to multiple email addresses:", 
            "title": "Send mails to multiple recipients"
        }, 
        {
            "location": "/great-new-features-for-our-paying-customers/#inline-net-source-browsing", 
            "text": "That\u2019s right! Browse the .NET types in stack traces directly from elmah.io. We utilize the new Roslyn based referencesource from Microsoft, to start building a new time saving feature. Ever wanted to click a type in the stack trace on a webpage? Well, now you can on elmah.io. We\u2019ve started out adding support for types only, but namespaces, methods and more will follow:   Before we finish up, we just want to mention two more things. First up, we now support four additional credit card types (yes, AmEx is now supported). Secondly we want to mention our new  Visual Studio extension  again. Please check it out.  As usual please don\u2019t hesitate to contact us through  UserVoice ,  Twitter  or  Email ..", 
            "title": "Inline .NET source browsing"
        }, 
        {
            "location": "/say-hello-to-the-redesigned-overview/", 
            "text": "Say hello to the redesigned Overview\n\n\nThomas Ardal\n, July 30, 2014\n\n\nBack in April we \nlaunched the Log Overview\n \u2013 a new tab which gave you a chance to get an overview of your log activity within the last 24 hours. Today we\u2019ve launched a new and redesigned Log Overview.\n\n\nSince launching the Log Overview, we have used the new tab to monitor elmah.io itself. Furthermore a lot of you have send ideas and suggestions for changes through our support system. We ended up using most of the ideas from you guys, to build a new and improved Log Overview. But first, let\u2019s look at the old Overview:\n\n\n\n\nTo sum up, what we mostly heard was:\n\n\n\n\nThe sparkline chart on the top doesn\u2019t really show anything but the development of errors.\n\n\nThe black boxes containing summarized counts of various metrics are great, but they are too dominant and it would be great with an explanation on each counter.\n\n\nThe critical and not found gauges are nice, but takes up too much space.\n\n\nNo-one understood the content of the Recent and Most Frequent errors.\n\n\nSome of you suggested a summary of recent errors. Others wanted to see the most frequest error.\n\n\n\n\nWith that in mind, check out the redesigned Overview:\n\n\n\n\nSo what changed?\n\n\n\n\nThe summarized boxes have moved to the top and now show an explanation when hovering each metric.\n\n\nThe gauges have been replaced by a bar chart, showing errors grouped by \u201cCritical\u201d, \u201cNot Found\u201d and \u201cOther\u201d.\n\n\nThe sparkline in the top have been replaced by the bar chart from the Statistics tab (now located in the middle). BTW this chart where the only remaining element on Statistics, why this tab is now removed.\n\n\nIn the bottom left, there\u2019s a list of the 5 most recent errors. The background color indicates the severity of each error. The bottom right contain a list of the most frequent errors.\n\n\nAlmost everything on the overview is clickable. When clicking various metrics, you are redirected to the search tab, showing you errors matching the clicked metric.\n\n\n\n\nWe hope that you\u2019ll enjoy the new Overview as much as we\u2019ve enjoyed building it :)", 
            "title": "Say hello to the redesigned Overview"
        }, 
        {
            "location": "/say-hello-to-the-redesigned-overview/#say-hello-to-the-redesigned-overview", 
            "text": "", 
            "title": "Say hello to the redesigned Overview"
        }, 
        {
            "location": "/say-hello-to-the-redesigned-overview/#thomas-ardal-july-30-2014", 
            "text": "", 
            "title": "Thomas Ardal, July 30, 2014"
        }, 
        {
            "location": "/say-hello-to-the-redesigned-overview/#back-in-april-we-launched-the-log-overview-a-new-tab-which-gave-you-a-chance-to-get-an-overview-of-your-log-activity-within-the-last-24-hours-today-weve-launched-a-new-and-redesigned-log-overview", 
            "text": "Since launching the Log Overview, we have used the new tab to monitor elmah.io itself. Furthermore a lot of you have send ideas and suggestions for changes through our support system. We ended up using most of the ideas from you guys, to build a new and improved Log Overview. But first, let\u2019s look at the old Overview:   To sum up, what we mostly heard was:   The sparkline chart on the top doesn\u2019t really show anything but the development of errors.  The black boxes containing summarized counts of various metrics are great, but they are too dominant and it would be great with an explanation on each counter.  The critical and not found gauges are nice, but takes up too much space.  No-one understood the content of the Recent and Most Frequent errors.  Some of you suggested a summary of recent errors. Others wanted to see the most frequest error.   With that in mind, check out the redesigned Overview:   So what changed?   The summarized boxes have moved to the top and now show an explanation when hovering each metric.  The gauges have been replaced by a bar chart, showing errors grouped by \u201cCritical\u201d, \u201cNot Found\u201d and \u201cOther\u201d.  The sparkline in the top have been replaced by the bar chart from the Statistics tab (now located in the middle). BTW this chart where the only remaining element on Statistics, why this tab is now removed.  In the bottom left, there\u2019s a list of the 5 most recent errors. The background color indicates the severity of each error. The bottom right contain a list of the most frequent errors.  Almost everything on the overview is clickable. When clicking various metrics, you are redirected to the search tab, showing you errors matching the clicked metric.   We hope that you\u2019ll enjoy the new Overview as much as we\u2019ve enjoyed building it :)", 
            "title": "Back in April we launched the Log Overview \u2013 a new tab which gave you a chance to get an overview of your log activity within the last 24 hours. Today we\u2019ve launched a new and redesigned Log Overview."
        }, 
        {
            "location": "/introducing-the-new-visual-studio-extension/", 
            "text": "Introducing the new Visual Studio extension\n\n\nThomas Ardal\n, July 03, 2014\n\n\nFinally, we are ready to unveil what we have been working on (among a lot of other stuff) the last weeks. Please welcome the elmah.io Browser \u2013 our new Visual Studio extension!\n\n\nLike you, we are using elmah.io to track errors on our websites (including elmah.io). We spend almost all of our day inside Visual Studio coding, why integrating error logs inside our favorite IDE was an obvious choice. Let me show you how to get up and running.\n\n\n\n\n\n\nInside Visual Studio navigate to Tools | Extensions and Updates | Online and search for elmah.io: \n\n\n\n\n\n\n\nHit Download and restart Visual Studio.\n\n\n\n\n\n\nYou\u2019ll find the elmah.io Browser through View | Other Windows | elmah.io Browser or by searching for it through Quick Launch (Ctrl+Q).\n\n\n\n\n\n\nWhen launched, a new tool window appears, which can be docked if you\u2019d like. To start browsing your logs, hit the log in icon to the left: \n\n\n\n\n\n\n\nLog in with the social account used on elmah.io: \n\n\n\n\n\n\n\nWhen logged on, the Log combo box contains a list of your logs. Select one and hit the search icon: \n\n\n\n\n\n\n\nThere you go: full elmah.io log browsing support inside VS. You can double click each row and check out the details directly on the elmah.io website.\n\n\nWe have a lot in store for the extension. But as usual we\u2019d love your feedback so please try out the extension and get back to use through \nUserVoice\n, \nTwitter\n or \nEmail\n or the \nelmah.io Browser details page\n on the Visual Studio gallery.", 
            "title": "Introducing the new Visual Studio extension"
        }, 
        {
            "location": "/introducing-the-new-visual-studio-extension/#introducing-the-new-visual-studio-extension", 
            "text": "", 
            "title": "Introducing the new Visual Studio extension"
        }, 
        {
            "location": "/introducing-the-new-visual-studio-extension/#thomas-ardal-july-03-2014", 
            "text": "", 
            "title": "Thomas Ardal, July 03, 2014"
        }, 
        {
            "location": "/introducing-the-new-visual-studio-extension/#finally-we-are-ready-to-unveil-what-we-have-been-working-on-among-a-lot-of-other-stuff-the-last-weeks-please-welcome-the-elmahio-browser-our-new-visual-studio-extension", 
            "text": "Like you, we are using elmah.io to track errors on our websites (including elmah.io). We spend almost all of our day inside Visual Studio coding, why integrating error logs inside our favorite IDE was an obvious choice. Let me show you how to get up and running.    Inside Visual Studio navigate to Tools | Extensions and Updates | Online and search for elmah.io:     Hit Download and restart Visual Studio.    You\u2019ll find the elmah.io Browser through View | Other Windows | elmah.io Browser or by searching for it through Quick Launch (Ctrl+Q).    When launched, a new tool window appears, which can be docked if you\u2019d like. To start browsing your logs, hit the log in icon to the left:     Log in with the social account used on elmah.io:     When logged on, the Log combo box contains a list of your logs. Select one and hit the search icon:     There you go: full elmah.io log browsing support inside VS. You can double click each row and check out the details directly on the elmah.io website.  We have a lot in store for the extension. But as usual we\u2019d love your feedback so please try out the extension and get back to use through  UserVoice ,  Twitter  or  Email  or the  elmah.io Browser details page  on the Visual Studio gallery.", 
            "title": "Finally, we are ready to unveil what we have been working on (among a lot of other stuff) the last weeks. Please welcome the elmah.io Browser \u2013 our new Visual Studio extension!"
        }, 
        {
            "location": "/unlimited-logs-now-available-on-all-paid-plans/", 
            "text": "Unlimited logs now available on all paid plans\n\n\nThomas Ardal\n, July 01, 2014\n\n\nYesterday we send a one question survey to all of our freebies, asking how we could convince them to purchase a paid plan. We are overwhelmed and happy by the amount of answers and thank all of your for taking time to help us.\n\n\nWe were a bit surprised with the fact that so many of you asked for the same thing: Possible to create more logs than the ones included in the current plans. After reading through responses and checking statistics data on Google Analytics, the whole thing makes sense. A lot of you are using elmah.io for either multiple instances of a few websites or host many different websites for your customers.\n\n\nSo what did we do to help you guys? Say hello to UNLIMITED LOGS on all paid plans on elmah.io:\n\n\n\n\nThat\u2019s right! You can now create all the logs you want on any of our paid plans :)\n\n\nTo purchase one of our plans, \nopen your profile\n and navigate to the Subscription tab.\n\n\nBest,\nThe elmah.io crew.", 
            "title": "Unlimited logs now available on all paid plans"
        }, 
        {
            "location": "/unlimited-logs-now-available-on-all-paid-plans/#unlimited-logs-now-available-on-all-paid-plans", 
            "text": "", 
            "title": "Unlimited logs now available on all paid plans"
        }, 
        {
            "location": "/unlimited-logs-now-available-on-all-paid-plans/#thomas-ardal-july-01-2014", 
            "text": "", 
            "title": "Thomas Ardal, July 01, 2014"
        }, 
        {
            "location": "/unlimited-logs-now-available-on-all-paid-plans/#yesterday-we-send-a-one-question-survey-to-all-of-our-freebies-asking-how-we-could-convince-them-to-purchase-a-paid-plan-we-are-overwhelmed-and-happy-by-the-amount-of-answers-and-thank-all-of-your-for-taking-time-to-help-us", 
            "text": "We were a bit surprised with the fact that so many of you asked for the same thing: Possible to create more logs than the ones included in the current plans. After reading through responses and checking statistics data on Google Analytics, the whole thing makes sense. A lot of you are using elmah.io for either multiple instances of a few websites or host many different websites for your customers.  So what did we do to help you guys? Say hello to UNLIMITED LOGS on all paid plans on elmah.io:   That\u2019s right! You can now create all the logs you want on any of our paid plans :)  To purchase one of our plans,  open your profile  and navigate to the Subscription tab.  Best,\nThe elmah.io crew.", 
            "title": "Yesterday we send a one question survey to all of our freebies, asking how we could convince them to purchase a paid plan. We are overwhelmed and happy by the amount of answers and thank all of your for taking time to help us."
        }, 
        {
            "location": "/introducing-the-small-business-plan/", 
            "text": "Introducing the Small Business plan\n\n\nThomas Ardal\n, June 08, 2014\n\n\nBy popular demand we\u2019ve just introduced a new plan: \nSmall Business\n.\n\n\nWe have gotten a lot of feedback on our plans and pricing. We realized that the gap between the Personal and the Business plan may have been too large. With the new plan, we now offer a great and affordable choice for small companies.\n\n\nLarger company? Here\u2019s an idea for you: try out all of the great features of elmah.io with a few logs and users on the Small Business plan. If you like what you get (we promise that you will), you can upgrade to the Business or Enterprise plan anytime. No configuration changes are needed when upgrading, making the transition painless and without downtime.\n\n\nThe full picture looks like this:\n\n\n\n\nAs usual please don\u2019t hesitate to contact us through \nUserVoice\n, \nTwitter\n or \nEmail\n.", 
            "title": "Introducing the Small Business plan"
        }, 
        {
            "location": "/introducing-the-small-business-plan/#introducing-the-small-business-plan", 
            "text": "", 
            "title": "Introducing the Small Business plan"
        }, 
        {
            "location": "/introducing-the-small-business-plan/#thomas-ardal-june-08-2014", 
            "text": "", 
            "title": "Thomas Ardal, June 08, 2014"
        }, 
        {
            "location": "/introducing-the-small-business-plan/#by-popular-demand-weve-just-introduced-a-new-plan-small-business", 
            "text": "We have gotten a lot of feedback on our plans and pricing. We realized that the gap between the Personal and the Business plan may have been too large. With the new plan, we now offer a great and affordable choice for small companies.  Larger company? Here\u2019s an idea for you: try out all of the great features of elmah.io with a few logs and users on the Small Business plan. If you like what you get (we promise that you will), you can upgrade to the Business or Enterprise plan anytime. No configuration changes are needed when upgrading, making the transition painless and without downtime.  The full picture looks like this:   As usual please don\u2019t hesitate to contact us through  UserVoice ,  Twitter  or  Email .", 
            "title": "By popular demand we\u2019ve just introduced a new plan: Small Business."
        }, 
        {
            "location": "/new-feature-burst-protection/", 
            "text": "New Feature: Burst Protection\n\n\nThomas Ardal\n, May 26, 2014\n\n\nWe just pushed a new features to all you guys and gals: Burst Protection.\n\n\nI\u2019m not saying that it ever happened to you, but you probably know someone, who knows someone, who\u2019s cousin knows someone \u2026 well you get it. You released a new version of your software to production and suddenly everything starts failing. All of your users are frustrated and your operations team run around like headless chickens. When stuff like this is happening, your website typically logs a lot of errors. Depending on which \nelmah.io plan\n you\u2019ve purchased, you have a maximum number of allowed errors. Even though this number is a soft limit, we cannot guarantee that we store everything if you start logging thousands and thousands of errors within a short period of time. Burst Protection to the rescue!\n\n\nWith Burst Protection we make an intelligent decision, when your site suddenly starts pushing a shit load of errors to elmah.io. This means that only a percentage of the errors are actually logged. This makes it easier for you to keep within the quota and also make easier for you to track down the actual errors.\n\n\nSo how does elmah.io respond when under pressure? Let\u2019s write a little evil piece of code:\n\n\nfor (var i = 0; i \n 500; i++)\n{\n    Task.Factory.StartNew(() =\n\n    {\n        var request = (HttpWebRequest)WebRequest.Create(\nhttps://elmah.io/api/errors?logid=dbba9674-6fbf-4ebe-ada9-0c74dc77cda5\n);\n        request.Method = \nPOST\n;\n        request.ContentType = \napplication/x-www-form-urlencoded\n;\n        var elmahError = new Error(new ApplicationException());\n        var errorString = ErrorXml.EncodeString(elmahError);\n        var errorStringEncoded = HttpUtility.UrlEncode(errorString);\n        var bytes = Encoding.UTF8.GetBytes(\n=\n + errorStringEncoded);\n        request.ContentLength = bytes.Length;\n        var outputStream = request.GetRequestStream();\n        outputStream.Write(bytes, 0, bytes.Length);\n\n        HttpWebResponse response;\n        try\n        {\n            response = (HttpWebResponse)request.GetResponse();\n        }\n        catch (WebException e)\n        {\n            response = (HttpWebResponse) e.Response;\n        }\n\n        Console.WriteLine(response.StatusCode);\n    });\n}\n\n\n\n\nThe short version: Perform 500 requests to the \nelmah.io API\n within a short period of time. HTTPS request example is taken from our \nelmah.io usage examples\n. Here\u2019s a screenshot of the output after a few hundred errors logged:\n\n\n\n\nAs you can see, elmah.io starts returning a different status code for some of the errors. If you\u2019re using the \nelmah.io NuGet package\n for your web application, you won\u2019t even notice the different status code, because this is handled within the client.", 
            "title": "New Feature Burst Protection"
        }, 
        {
            "location": "/new-feature-burst-protection/#new-feature-burst-protection", 
            "text": "", 
            "title": "New Feature: Burst Protection"
        }, 
        {
            "location": "/new-feature-burst-protection/#thomas-ardal-may-26-2014", 
            "text": "", 
            "title": "Thomas Ardal, May 26, 2014"
        }, 
        {
            "location": "/new-feature-burst-protection/#we-just-pushed-a-new-features-to-all-you-guys-and-gals-burst-protection", 
            "text": "I\u2019m not saying that it ever happened to you, but you probably know someone, who knows someone, who\u2019s cousin knows someone \u2026 well you get it. You released a new version of your software to production and suddenly everything starts failing. All of your users are frustrated and your operations team run around like headless chickens. When stuff like this is happening, your website typically logs a lot of errors. Depending on which  elmah.io plan  you\u2019ve purchased, you have a maximum number of allowed errors. Even though this number is a soft limit, we cannot guarantee that we store everything if you start logging thousands and thousands of errors within a short period of time. Burst Protection to the rescue!  With Burst Protection we make an intelligent decision, when your site suddenly starts pushing a shit load of errors to elmah.io. This means that only a percentage of the errors are actually logged. This makes it easier for you to keep within the quota and also make easier for you to track down the actual errors.  So how does elmah.io respond when under pressure? Let\u2019s write a little evil piece of code:  for (var i = 0; i   500; i++)\n{\n    Task.Factory.StartNew(() = \n    {\n        var request = (HttpWebRequest)WebRequest.Create( https://elmah.io/api/errors?logid=dbba9674-6fbf-4ebe-ada9-0c74dc77cda5 );\n        request.Method =  POST ;\n        request.ContentType =  application/x-www-form-urlencoded ;\n        var elmahError = new Error(new ApplicationException());\n        var errorString = ErrorXml.EncodeString(elmahError);\n        var errorStringEncoded = HttpUtility.UrlEncode(errorString);\n        var bytes = Encoding.UTF8.GetBytes( =  + errorStringEncoded);\n        request.ContentLength = bytes.Length;\n        var outputStream = request.GetRequestStream();\n        outputStream.Write(bytes, 0, bytes.Length);\n\n        HttpWebResponse response;\n        try\n        {\n            response = (HttpWebResponse)request.GetResponse();\n        }\n        catch (WebException e)\n        {\n            response = (HttpWebResponse) e.Response;\n        }\n\n        Console.WriteLine(response.StatusCode);\n    });\n}  The short version: Perform 500 requests to the  elmah.io API  within a short period of time. HTTPS request example is taken from our  elmah.io usage examples . Here\u2019s a screenshot of the output after a few hundred errors logged:   As you can see, elmah.io starts returning a different status code for some of the errors. If you\u2019re using the  elmah.io NuGet package  for your web application, you won\u2019t even notice the different status code, because this is handled within the client.", 
            "title": "We just pushed a new features to all you guys and gals: Burst Protection."
        }, 
        {
            "location": "/new-release-cycle/", 
            "text": "New release cycle\n\n\nThomas Ardal\n, May 2, 2014\n\n\nAs you probably noticed, we have been releasing a new version of elmah.io once every month pretty much since we launched last year. From today we will change our release cycle to release every time we have a new feature or bug request implemented and tested. This way you will get the new stuff way faster than you do today.\n\n\nThis also means that we will stop posting the monthly changelog of new features and bugfixes. No one really wants a ping every time we fix a bug but from today, we will start writing individual blog posts, when we launch new features that we believe you will find interesting. Expect a new post about our new alpha release of the \nelmah.io Visual Studio extension\n coming up.\n\n\nSome periods may provide you with more posts about new features and some the opposite. Rest assured that we do everything in our power to make elmah.io the best option for adding cloud logging to .NET web applications. We constantly innovate with new features and prioritize tasks stabilizing the platform. If you want to support the further development of elmah.io, you should consider purchasing one of our \npaid plans\n.", 
            "title": "New release cycle"
        }, 
        {
            "location": "/new-release-cycle/#new-release-cycle", 
            "text": "", 
            "title": "New release cycle"
        }, 
        {
            "location": "/new-release-cycle/#thomas-ardal-may-2-2014", 
            "text": "", 
            "title": "Thomas Ardal, May 2, 2014"
        }, 
        {
            "location": "/new-release-cycle/#as-you-probably-noticed-we-have-been-releasing-a-new-version-of-elmahio-once-every-month-pretty-much-since-we-launched-last-year-from-today-we-will-change-our-release-cycle-to-release-every-time-we-have-a-new-feature-or-bug-request-implemented-and-tested-this-way-you-will-get-the-new-stuff-way-faster-than-you-do-today", 
            "text": "This also means that we will stop posting the monthly changelog of new features and bugfixes. No one really wants a ping every time we fix a bug but from today, we will start writing individual blog posts, when we launch new features that we believe you will find interesting. Expect a new post about our new alpha release of the  elmah.io Visual Studio extension  coming up.  Some periods may provide you with more posts about new features and some the opposite. Rest assured that we do everything in our power to make elmah.io the best option for adding cloud logging to .NET web applications. We constantly innovate with new features and prioritize tasks stabilizing the platform. If you want to support the further development of elmah.io, you should consider purchasing one of our  paid plans .", 
            "title": "As you probably noticed, we have been releasing a new version of elmah.io once every month pretty much since we launched last year. From today we will change our release cycle to release every time we have a new feature or bug request implemented and tested. This way you will get the new stuff way faster than you do today."
        }, 
        {
            "location": "/logging-to-elmah-io-from-log4net/", 
            "text": "Logging from Log4net\n\n\nThomas Ardal\n, April 28, 2014\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nLogging from Log4net\n\n\n\n\nlog4net is probably the oldest .NET logging frameworks on the block. Maintained by Apache and developed for more than a decade, makes log4net a good and well supported choice for some types of applications. log4net is based on the concept of appenders, which works pretty much like ELMAH\u2019s error logs. Unlike ELMAH, log4net can have multiple appenders, which makes it possible to log errors to multiple sources. In addition log4net supports different log levels like Info and Warning. While ELMAH doesn\u2019t have the concept of log levels, elmah.io supports all of the levels in log4net.\n\n\nIn this tutorial we\u2019ll add log4net to an ASP.NET MVC project, but the process is almost identical with other project types. Create a new MVC project and install the elmah.io appender:\n\n\nInstall-Package elmah.io.log4net\n\n\n\n\nAdd the following to your AssemblyInfo.cs file:\n\n\n[assembly: log4net.Config.XmlConfigurator(Watch = true)]\n\n\n\n\nAdd the following config section to your web.config file:\n\n\nsection name=\nlog4net\n type=\nlog4net.Config.Log4NetConfigurationSectionHandler, log4net\n /\n\n\n\n\n\nFinally, add the log4net configuration element to web.config:\n\n\nlog4net\n\n  \nappender name=\nElmahIoAppender\n type=\nelmah.io.log4net.ElmahIoAppender, elmah.io.log4net\n\n    \nlogId value=\nLOG_ID\n /\n\n  \n/appender\n\n  \nroot\n\n    \nlevel value=\nINFORMATION\n /\n\n    \nappender-ref ref=\nElmahIoAppender\n /\n\n  \n/root\n\n\n/log4net\n\n\n\n\n\nThat\u2019s it! log4net is now configured and log messages to elmah.io. Remember to replace LOG_ID with your actual log Id. To start logging, write your usual log4net log statements:\n\n\nvar log = log4net.LogManager.GetLogger(typeof(HomeController));\ntry\n{\n    log.Info(\nTrying something\n);\n    throw new ApplicationException();\n}\ncatch (ApplicationException ex)\n{\n    log.Error(\nError happening\n, ex);\n}", 
            "title": "Logging from Log4net"
        }, 
        {
            "location": "/logging-to-elmah-io-from-log4net/#logging-from-log4net", 
            "text": "", 
            "title": "Logging from Log4net"
        }, 
        {
            "location": "/logging-to-elmah-io-from-log4net/#thomas-ardal-april-28-2014", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Logging from Log4net   log4net is probably the oldest .NET logging frameworks on the block. Maintained by Apache and developed for more than a decade, makes log4net a good and well supported choice for some types of applications. log4net is based on the concept of appenders, which works pretty much like ELMAH\u2019s error logs. Unlike ELMAH, log4net can have multiple appenders, which makes it possible to log errors to multiple sources. In addition log4net supports different log levels like Info and Warning. While ELMAH doesn\u2019t have the concept of log levels, elmah.io supports all of the levels in log4net.  In this tutorial we\u2019ll add log4net to an ASP.NET MVC project, but the process is almost identical with other project types. Create a new MVC project and install the elmah.io appender:  Install-Package elmah.io.log4net  Add the following to your AssemblyInfo.cs file:  [assembly: log4net.Config.XmlConfigurator(Watch = true)]  Add the following config section to your web.config file:  section name= log4net  type= log4net.Config.Log4NetConfigurationSectionHandler, log4net  /   Finally, add the log4net configuration element to web.config:  log4net \n   appender name= ElmahIoAppender  type= elmah.io.log4net.ElmahIoAppender, elmah.io.log4net \n     logId value= LOG_ID  / \n   /appender \n   root \n     level value= INFORMATION  / \n     appender-ref ref= ElmahIoAppender  / \n   /root  /log4net   That\u2019s it! log4net is now configured and log messages to elmah.io. Remember to replace LOG_ID with your actual log Id. To start logging, write your usual log4net log statements:  var log = log4net.LogManager.GetLogger(typeof(HomeController));\ntry\n{\n    log.Info( Trying something );\n    throw new ApplicationException();\n}\ncatch (ApplicationException ex)\n{\n    log.Error( Error happening , ex);\n}", 
            "title": "Thomas Ardal, April 28, 2014"
        }, 
        {
            "location": "/weve-officially-launched/", 
            "text": "We\u2019ve officially launched\n\n\nThomas Ardal\n, April 24, 2014\n\n\nIt\u2019s a great day for elmah.io! The beta sign is gone and a lot of exiting stuff have happened since the first alpha. We really think that we have built a product, which will save you hours and make your everyday fun and focused.\n\n\nWhy this post then? Along the official launch, we\u2019re also ready to introduce paid plans on elmah.io. Luckily for all of you beta testers, we still offer a free plan and all of your logs are automatically moved to the free plan. So why introduce pricing at all? Well as you probably know, running a website isn\u2019t free. To keep the releases flowing and to give us a change to innovate on this already awesome platform, we really hope that you will consider supporting us, by purchasing one of our paid plans. We have a lot of ideas on how to make elmah.io even cooler and we need your help to do that. Check out the Plans and Pricing page for details. To purchase a plan, log in to elmah.io and visit the profile page.\n\n\nIf you haven\u2019t visited us for a while, let us use a few lines to introduce some of the great features we have been building recently. In November we introduced \nLucene search\n, making it possible to write advanced queries against your errors. In December we gave you the much sought \nHTTPS support\n. In January \nIgnore Filters\n which later on matured into an \nadvanced rule engine\n, making it possible for you to react through mail and/or web hooks, when new errors occur. Recently we introduced the new \nOverview tab\n, which in a simple way visualizes your recent error activity.\n\n\nAs usual please reach out if you have ideas for elmah.io either through \nUserVoice\n, \nTwitter\n or \nEmail\n.\n\n\nThank you for your support!", 
            "title": "We\u2019ve officially launched"
        }, 
        {
            "location": "/weve-officially-launched/#weve-officially-launched", 
            "text": "", 
            "title": "We\u2019ve officially launched"
        }, 
        {
            "location": "/weve-officially-launched/#thomas-ardal-april-24-2014", 
            "text": "", 
            "title": "Thomas Ardal, April 24, 2014"
        }, 
        {
            "location": "/weve-officially-launched/#its-a-great-day-for-elmahio-the-beta-sign-is-gone-and-a-lot-of-exiting-stuff-have-happened-since-the-first-alpha-we-really-think-that-we-have-built-a-product-which-will-save-you-hours-and-make-your-everyday-fun-and-focused", 
            "text": "Why this post then? Along the official launch, we\u2019re also ready to introduce paid plans on elmah.io. Luckily for all of you beta testers, we still offer a free plan and all of your logs are automatically moved to the free plan. So why introduce pricing at all? Well as you probably know, running a website isn\u2019t free. To keep the releases flowing and to give us a change to innovate on this already awesome platform, we really hope that you will consider supporting us, by purchasing one of our paid plans. We have a lot of ideas on how to make elmah.io even cooler and we need your help to do that. Check out the Plans and Pricing page for details. To purchase a plan, log in to elmah.io and visit the profile page.  If you haven\u2019t visited us for a while, let us use a few lines to introduce some of the great features we have been building recently. In November we introduced  Lucene search , making it possible to write advanced queries against your errors. In December we gave you the much sought  HTTPS support . In January  Ignore Filters  which later on matured into an  advanced rule engine , making it possible for you to react through mail and/or web hooks, when new errors occur. Recently we introduced the new  Overview tab , which in a simple way visualizes your recent error activity.  As usual please reach out if you have ideas for elmah.io either through  UserVoice ,  Twitter  or  Email .  Thank you for your support!", 
            "title": "It\u2019s a great day for elmah.io! The beta sign is gone and a lot of exiting stuff have happened since the first alpha. We really think that we have built a product, which will save you hours and make your everyday fun and focused."
        }, 
        {
            "location": "/elmah-io-20140412-released/", 
            "text": "elmah.io 20140412 released\n\n\nThomas Ardal\n, April 12, 2014\n\n\nWe just released a lot of changes to elmah.io. In this post I would like to highlight a single thing: Say hello to \nmy little friend\n the new overview tab!\n\n\n\n\nThe overview page is a great addition to the three existing (and awesome) tabs, visualizing your log in different ways. The idea behind the overview tab is to give you a quick overview of the errors happening within the last 24 hours. You will be directed to the new tab automatically, when you visit your log. The overview tab can be used at your desktop and mobile device, but the page is optimized to be presented on a flat screen as well.\n\n\nIn the top you will find a graph showing when the errors are happening throughout the day. You may recognize this graph from the dashboard.\n\n\nSummary\n\n\nTo the left there are 4 boxes showing a summarized view of all of the errors. The Total box shows the total count of errors. The Unique box shows you if the same errors are happening over and over again or if the errors are different. The Users box shows you how many users are affected by the errors. The users count is based by logged in users, why this only works if your website supports this. The Browsers box shows how many browsers are affected. For now we don\u2019t group any of the browsers in this count, why different versions of Firefox or Chrome would count as individual browsers. This leads us to the next section, which actually groups browsers.\n\n\n\n\nBrowsers\n\n\nBelow the totals, there\u2019s an indicator showing the 5 most popular browsers. If a browser is affected during the last 24 hours, the browser icon will light up (using the black color). Unaffected browsers are painted light gray.\n\n\n\n\nGauges\n\n\nTo the right we have added 4 gauges. We will be adding more widgets here, but until now you will be able to see how many Critical (status code 500) and Not Found (status code 404) errors occurred. The Recent Errors gauge shows you how many of the total errors which have occurred during the last hour. This way you will be able to monitor if a lot of errors are logged after you release a new version of your software. The final gauge shows the count of the Most Frequent errors compared to the total count. This will help you determine if the same error is happening multiple times.\n\n\n\n\nWe will keep adding features to the new tab, helping you get a better overview of your errors. The following ideas are in the pipeline:\n\n\nMore widgets\n\n\n\n\nPossible to click the widgets and get directly to the search result\n\n\nAuto-refresh\n\n\nPossible to adjust the timespan to show errors from the last 5 minutes, last hour etc.\n\n\nMove the features from the Statistics tab to the Overview tab.", 
            "title": "elmah.io 20140412 released"
        }, 
        {
            "location": "/elmah-io-20140412-released/#elmahio-20140412-released", 
            "text": "", 
            "title": "elmah.io 20140412 released"
        }, 
        {
            "location": "/elmah-io-20140412-released/#thomas-ardal-april-12-2014", 
            "text": "", 
            "title": "Thomas Ardal, April 12, 2014"
        }, 
        {
            "location": "/elmah-io-20140412-released/#we-just-released-a-lot-of-changes-to-elmahio-in-this-post-i-would-like-to-highlight-a-single-thing-say-hello-to-my-little-friend-the-new-overview-tab", 
            "text": "The overview page is a great addition to the three existing (and awesome) tabs, visualizing your log in different ways. The idea behind the overview tab is to give you a quick overview of the errors happening within the last 24 hours. You will be directed to the new tab automatically, when you visit your log. The overview tab can be used at your desktop and mobile device, but the page is optimized to be presented on a flat screen as well.  In the top you will find a graph showing when the errors are happening throughout the day. You may recognize this graph from the dashboard.", 
            "title": "We just released a lot of changes to elmah.io. In this post I would like to highlight a single thing: Say hello to my little friend the new overview tab!"
        }, 
        {
            "location": "/elmah-io-20140412-released/#summary", 
            "text": "To the left there are 4 boxes showing a summarized view of all of the errors. The Total box shows the total count of errors. The Unique box shows you if the same errors are happening over and over again or if the errors are different. The Users box shows you how many users are affected by the errors. The users count is based by logged in users, why this only works if your website supports this. The Browsers box shows how many browsers are affected. For now we don\u2019t group any of the browsers in this count, why different versions of Firefox or Chrome would count as individual browsers. This leads us to the next section, which actually groups browsers.", 
            "title": "Summary"
        }, 
        {
            "location": "/elmah-io-20140412-released/#browsers", 
            "text": "Below the totals, there\u2019s an indicator showing the 5 most popular browsers. If a browser is affected during the last 24 hours, the browser icon will light up (using the black color). Unaffected browsers are painted light gray.", 
            "title": "Browsers"
        }, 
        {
            "location": "/elmah-io-20140412-released/#gauges", 
            "text": "To the right we have added 4 gauges. We will be adding more widgets here, but until now you will be able to see how many Critical (status code 500) and Not Found (status code 404) errors occurred. The Recent Errors gauge shows you how many of the total errors which have occurred during the last hour. This way you will be able to monitor if a lot of errors are logged after you release a new version of your software. The final gauge shows the count of the Most Frequent errors compared to the total count. This will help you determine if the same error is happening multiple times.   We will keep adding features to the new tab, helping you get a better overview of your errors. The following ideas are in the pipeline:", 
            "title": "Gauges"
        }, 
        {
            "location": "/elmah-io-20140412-released/#more-widgets", 
            "text": "Possible to click the widgets and get directly to the search result  Auto-refresh  Possible to adjust the timespan to show errors from the last 5 minutes, last hour etc.  Move the features from the Statistics tab to the Overview tab.", 
            "title": "More widgets"
        }, 
        {
            "location": "/logging-to-elmah-io-from-serilog/", 
            "text": "Logging from Serilog\n\n\nThomas Ardal\n, April 10, 2014 in \nTutorials\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nLogging from Serilog\n\n\n\n\nSerilog is a great addition to the flowering .NET logging community, described as \u201cA no-nonse logging library for the NoSQL era\u201d on their project page. Serilog works as other logging frameworks like log4net and NLog, but offers a great fluent API and the concept of sinks (a bit like appenders in log4net). Sinks are superior to appenders, because they threat errors as objects rather than strings, a perfect fit for elmah.io which itself is build on NoSQL. Serilog already comes with native support for elmah.io, which makes it easy to integrate with any application using Serilog.\n\n\nIn this example we\u2019ll use a ASP.NET MVC project as an example. Neither Serilog nor elmah.io are bound to log errors from web applications, why adding this type of logging to your windows and console applications is just as easy. Add the Serilog.Sinks.ElmahIO NuGet package to your project:\n\n\nInstall-Package Serilog.Sinks.ElmahIO\n\n\n\n\nDuring the installation you will be prompted to input your log id, as with any other installation of elmah.io. To configure Serilog, add the following code to the Application_Start method in global.asax.cs (where LOG_ID is your log id):\n\n\nvar log =\n    new LoggerConfiguration()\n        .WriteTo.ElmahIO(new Guid(\nLOG_ID\n))\n        .CreateLogger();\nLog.Logger = log;\n\n\n\n\nFirst we create a new LoggerConfiguration and tell it to write to elmah.io. The log object can be used to log errors and you should register this in your IoC container. In this case we don\u2019t use IoC, why the log object is set as the public static Logger property, which makes it accessible from everywhere.\n\n\nWhen unhandled exceptions occur, ELMAH ships the errors to elmah.io through the elmah.io NuGet package. No Serilog or even magic is happening there. The fun part begins when we log handled exceptions to Serilog:\n\n\ntry {\n    // Do some stuff which may cause an exception\n}\ncatch (Exception e) {\n    Log.Error(e, \nThe actual error message\n);\n}\n\n\n\n\nThe Error method tells Serilog to log the error in the configured sinks, which in our case logs to elmah.io. Simple and beautiful.", 
            "title": "Logging to elmah.io from Serilog"
        }, 
        {
            "location": "/logging-to-elmah-io-from-serilog/#logging-from-serilog", 
            "text": "", 
            "title": "Logging from Serilog"
        }, 
        {
            "location": "/logging-to-elmah-io-from-serilog/#thomas-ardal-april-10-2014-in-tutorials", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Logging from Serilog   Serilog is a great addition to the flowering .NET logging community, described as \u201cA no-nonse logging library for the NoSQL era\u201d on their project page. Serilog works as other logging frameworks like log4net and NLog, but offers a great fluent API and the concept of sinks (a bit like appenders in log4net). Sinks are superior to appenders, because they threat errors as objects rather than strings, a perfect fit for elmah.io which itself is build on NoSQL. Serilog already comes with native support for elmah.io, which makes it easy to integrate with any application using Serilog.  In this example we\u2019ll use a ASP.NET MVC project as an example. Neither Serilog nor elmah.io are bound to log errors from web applications, why adding this type of logging to your windows and console applications is just as easy. Add the Serilog.Sinks.ElmahIO NuGet package to your project:  Install-Package Serilog.Sinks.ElmahIO  During the installation you will be prompted to input your log id, as with any other installation of elmah.io. To configure Serilog, add the following code to the Application_Start method in global.asax.cs (where LOG_ID is your log id):  var log =\n    new LoggerConfiguration()\n        .WriteTo.ElmahIO(new Guid( LOG_ID ))\n        .CreateLogger();\nLog.Logger = log;  First we create a new LoggerConfiguration and tell it to write to elmah.io. The log object can be used to log errors and you should register this in your IoC container. In this case we don\u2019t use IoC, why the log object is set as the public static Logger property, which makes it accessible from everywhere.  When unhandled exceptions occur, ELMAH ships the errors to elmah.io through the elmah.io NuGet package. No Serilog or even magic is happening there. The fun part begins when we log handled exceptions to Serilog:  try {\n    // Do some stuff which may cause an exception\n}\ncatch (Exception e) {\n    Log.Error(e,  The actual error message );\n}  The Error method tells Serilog to log the error in the configured sinks, which in our case logs to elmah.io. Simple and beautiful.", 
            "title": "Thomas Ardal, April 10, 2014 in Tutorials"
        }, 
        {
            "location": "/elmah-io-20140315-released/", 
            "text": "elmah.io 20140315 released\n\n\nThomas Ardal\n, March 15, 2014\n\n\nSay hello to a new release of elmah.io. This release primarily focuses on improving the rule engine with new actions.\n\n\nProfile page\n\n\nThere\u2019s a new profile page in town. We don\u2019t keep a lot of information about you, but you can change your name and email, by visiting the new Profile page located on the dashboard:\n\n\n\n\nThe attentive reader probably notice the newsletter checkbox. The newsletter is something we are introducing to keep you up to date on the new stuff happening on elmah.io and ELMAH in general. We send out our newsletter once each quarter, so please join if you are interested in getting some good articles and links in your mailbox four times a year.\n\n\nBusiness rules\n\n\nAs mentioned in the \nprevious\n release note, we have started building a diverse business rule engine into elmah.io, making it possible for you to execute various actions when errors matching a specified pattern occur. This time we added two new actions: Mail and HTTP Request.\n\n\nBy adding a rule with a mail action, you receive a new mail each time an error occur, when the error details matches the search criteria you\u2019ve setup. In the following sample, you\u2019d get an email every time a new error from Googlebot is registered. Start by adding a title and query:\n\n\n\n\nClick the \nThen\n button and select the mail action:\n\n\n\n\nAnother possibility is to let elmah.io request a URL each time an error occurs. Switch to HTTP Request and input the method and URL to start the magic:\n\n\n\n\nThe possibilities with the HTTP Request action are endless. Integrate with your favorite tool using the property merge feature in the body field.\n\n\nAs usual please reach out if you have ideas for elmah.io either through \nUserVoice\n, \nTwitter\n or \nEmail\n.", 
            "title": "elmah.io 20140315 released"
        }, 
        {
            "location": "/elmah-io-20140315-released/#elmahio-20140315-released", 
            "text": "", 
            "title": "elmah.io 20140315 released"
        }, 
        {
            "location": "/elmah-io-20140315-released/#thomas-ardal-march-15-2014", 
            "text": "", 
            "title": "Thomas Ardal, March 15, 2014"
        }, 
        {
            "location": "/elmah-io-20140315-released/#say-hello-to-a-new-release-of-elmahio-this-release-primarily-focuses-on-improving-the-rule-engine-with-new-actions", 
            "text": "", 
            "title": "Say hello to a new release of elmah.io. This release primarily focuses on improving the rule engine with new actions."
        }, 
        {
            "location": "/elmah-io-20140315-released/#profile-page", 
            "text": "There\u2019s a new profile page in town. We don\u2019t keep a lot of information about you, but you can change your name and email, by visiting the new Profile page located on the dashboard:   The attentive reader probably notice the newsletter checkbox. The newsletter is something we are introducing to keep you up to date on the new stuff happening on elmah.io and ELMAH in general. We send out our newsletter once each quarter, so please join if you are interested in getting some good articles and links in your mailbox four times a year.", 
            "title": "Profile page"
        }, 
        {
            "location": "/elmah-io-20140315-released/#business-rules", 
            "text": "As mentioned in the  previous  release note, we have started building a diverse business rule engine into elmah.io, making it possible for you to execute various actions when errors matching a specified pattern occur. This time we added two new actions: Mail and HTTP Request.  By adding a rule with a mail action, you receive a new mail each time an error occur, when the error details matches the search criteria you\u2019ve setup. In the following sample, you\u2019d get an email every time a new error from Googlebot is registered. Start by adding a title and query:   Click the  Then  button and select the mail action:   Another possibility is to let elmah.io request a URL each time an error occurs. Switch to HTTP Request and input the method and URL to start the magic:   The possibilities with the HTTP Request action are endless. Integrate with your favorite tool using the property merge feature in the body field.  As usual please reach out if you have ideas for elmah.io either through  UserVoice ,  Twitter  or  Email .", 
            "title": "Business rules"
        }, 
        {
            "location": "/logging-to-elmah-io-from-blogengine-net/", 
            "text": "Logging from BlogEngine.NET\n\n\nThomas Ardal\n, March 9, 2014\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nLogging from BlogEngine.NET\n\n\n\n\nBecause BlogEngine.NET is written in ASP.NET, it doesn\u2019t really need any custom code to use ELMAH and elmah.io. In fact ELMAH works out of the box for most web frameworks by Microsoft. If you are building and deploying the code yourself, installing elmah.io is achieved using our NuGet package:\n\n\nInstall-Package elmah.io\n\n\n\n\nDuring the installation you need to input your log id, located in the settings. When installed, BlogEngine.NET starts reporting errors to elmah.io. To check it out, force an internal server error or similar, and visit /elmah.axd or the search area of your log at elmah.io.\n\n\nSome of you may use the BlogEngine.NET binaries or even installed it using a one-click installer. In this case you will need to add elmah.io manually. To do that, use a tool like NuGet Package Explorer to download the most recent versions of ELMAH and elmah.io. Copy Elmah.dll and Elmah.Io.dll to the bin directory of your BlogEngine.NET installation. Also modify your web.config to include the ELMAH config as shown in the config example. Last but not least, remember to add the elmah.io error logger configuration as a child node to the \nelmah\n element:\n\n\nerrorLog type=\nElmah.Io.ErrorLog, Elmah.Io\n LogId=\nLOG_ID\n /\n\n\n\n\n\nWhere LOG_ID is your log id, located on the settings page.\n\n\nTo wrap this up, you may have noticed that there\u2019s a \nNuGet package\n to bring ELMAH support into BlogEngine.NET. This package adds the ELMAH assembly and config as well as adds a nice BlogEngine.NET compliant URL for browsing errors. Feel free to use this package, but remember to add it after the elmah.io package. Also make sure to cleanup the dual error log configuration:\n\n\nelmah\n\n  \nsecurity allowRemoteAccess=\nfalse\n /\n\n  \nerrorLog type=\nElmah.Io.ErrorLog, Elmah.Io\n LogId=\nLOGID\n /\n\n  \nsecurity allowRemoteAccess=\ntrue\n /\n\n  \nerrorLog type=\nElmah.SqlServerCompactErrorLog, Elmah\n connectionStringName=\nelmah-sqlservercompact\n /\n\n\n/elmah", 
            "title": "Logging to elmah.io from BlogEngine.NET"
        }, 
        {
            "location": "/logging-to-elmah-io-from-blogengine-net/#logging-from-blogenginenet", 
            "text": "", 
            "title": "Logging from BlogEngine.NET"
        }, 
        {
            "location": "/logging-to-elmah-io-from-blogengine-net/#thomas-ardal-march-9-2014", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Logging from BlogEngine.NET   Because BlogEngine.NET is written in ASP.NET, it doesn\u2019t really need any custom code to use ELMAH and elmah.io. In fact ELMAH works out of the box for most web frameworks by Microsoft. If you are building and deploying the code yourself, installing elmah.io is achieved using our NuGet package:  Install-Package elmah.io  During the installation you need to input your log id, located in the settings. When installed, BlogEngine.NET starts reporting errors to elmah.io. To check it out, force an internal server error or similar, and visit /elmah.axd or the search area of your log at elmah.io.  Some of you may use the BlogEngine.NET binaries or even installed it using a one-click installer. In this case you will need to add elmah.io manually. To do that, use a tool like NuGet Package Explorer to download the most recent versions of ELMAH and elmah.io. Copy Elmah.dll and Elmah.Io.dll to the bin directory of your BlogEngine.NET installation. Also modify your web.config to include the ELMAH config as shown in the config example. Last but not least, remember to add the elmah.io error logger configuration as a child node to the  elmah  element:  errorLog type= Elmah.Io.ErrorLog, Elmah.Io  LogId= LOG_ID  /   Where LOG_ID is your log id, located on the settings page.  To wrap this up, you may have noticed that there\u2019s a  NuGet package  to bring ELMAH support into BlogEngine.NET. This package adds the ELMAH assembly and config as well as adds a nice BlogEngine.NET compliant URL for browsing errors. Feel free to use this package, but remember to add it after the elmah.io package. Also make sure to cleanup the dual error log configuration:  elmah \n   security allowRemoteAccess= false  / \n   errorLog type= Elmah.Io.ErrorLog, Elmah.Io  LogId= LOGID  / \n   security allowRemoteAccess= true  / \n   errorLog type= Elmah.SqlServerCompactErrorLog, Elmah  connectionStringName= elmah-sqlservercompact  /  /elmah", 
            "title": "Thomas Ardal, March 9, 2014"
        }, 
        {
            "location": "/elmah-io-20140219-released/", 
            "text": "elmah.io 20140219 released\n\n\nThomas Ardal\n, February 19, 2014\n\n\nTime for a new version. This release contains some exiting new stuff as well as the usual bug fixes and tweaks to make elmah.io the best cloud logging service out there.\n\n\nRe-designed Dashboard\n\n\nLike any good company, we eat our own dog food and use elmah.io for every project we do (including elmah.io itself). Navigating between the Dashboard, Search and Settings pages were quite extensive. We were surprised how often you guys did that and we decided to collect all of your feedback into a total re-design of the Dashboard page:\n\n\n\n\nFrom the new Dashboard page, you can navigate directly to both Search and Settings of all of your logs.\n\n\nRules\n\n\nRemember Ignore Filters introduced in the previous release? Well, meet Rules. To support further development on this feature, we\u2019ve decided to rename Ignore Filters to Rules. Rules will grow into a feature rich rule engine, making it possible for you to execute actions based on search filters. For now the only action is Ignore. Specifying a new search filter with an Ignore action, gives you exactly the same behavior as the previous Ignore Filters. Stay tuned for more actions like Send Mail and HTTP Request.\n\n\n\n\nTrac Support\n\n\nSome of you really wanted support for Trac. We\u2019ve listened and now brings you support for creating issues directly in Trac. Configure your Trac base URL in the log settings and create issues from the error details.\n\n\nAs usual please reach out if you have ideas for elmah.io either through \nUserVoice\n, \nTwitter\n or \nEmail\n.", 
            "title": "elmah.io 20140219 released"
        }, 
        {
            "location": "/elmah-io-20140219-released/#elmahio-20140219-released", 
            "text": "", 
            "title": "elmah.io 20140219 released"
        }, 
        {
            "location": "/elmah-io-20140219-released/#thomas-ardal-february-19-2014", 
            "text": "", 
            "title": "Thomas Ardal, February 19, 2014"
        }, 
        {
            "location": "/elmah-io-20140219-released/#time-for-a-new-version-this-release-contains-some-exiting-new-stuff-as-well-as-the-usual-bug-fixes-and-tweaks-to-make-elmahio-the-best-cloud-logging-service-out-there", 
            "text": "", 
            "title": "Time for a new version. This release contains some exiting new stuff as well as the usual bug fixes and tweaks to make elmah.io the best cloud logging service out there."
        }, 
        {
            "location": "/elmah-io-20140219-released/#re-designed-dashboard", 
            "text": "Like any good company, we eat our own dog food and use elmah.io for every project we do (including elmah.io itself). Navigating between the Dashboard, Search and Settings pages were quite extensive. We were surprised how often you guys did that and we decided to collect all of your feedback into a total re-design of the Dashboard page:   From the new Dashboard page, you can navigate directly to both Search and Settings of all of your logs.", 
            "title": "Re-designed Dashboard"
        }, 
        {
            "location": "/elmah-io-20140219-released/#rules", 
            "text": "Remember Ignore Filters introduced in the previous release? Well, meet Rules. To support further development on this feature, we\u2019ve decided to rename Ignore Filters to Rules. Rules will grow into a feature rich rule engine, making it possible for you to execute actions based on search filters. For now the only action is Ignore. Specifying a new search filter with an Ignore action, gives you exactly the same behavior as the previous Ignore Filters. Stay tuned for more actions like Send Mail and HTTP Request.", 
            "title": "Rules"
        }, 
        {
            "location": "/elmah-io-20140219-released/#trac-support", 
            "text": "Some of you really wanted support for Trac. We\u2019ve listened and now brings you support for creating issues directly in Trac. Configure your Trac base URL in the log settings and create issues from the error details.  As usual please reach out if you have ideas for elmah.io either through  UserVoice ,  Twitter  or  Email .", 
            "title": "Trac Support"
        }, 
        {
            "location": "/logging-to-elmah-io-from-nancy/", 
            "text": "Logging from Nancy\n\n\nThomas Ardal\n, Januar 6, 2014\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nLogging from Nancy\n\n\n\n\nAs with MVC and WebAPI, Nancy already provides ELMAH support out of the box. Start by installing the elmah.io NuGet package:\n\n\nInstall-Package elmah.io\n\n\n\n\nTo integrate Nancy and ELMAH, Christian Westman already did a great job with his Nancy.Elmah project. Install it using NuGet:\n\n\nInstall-Package Nancy.Elmah\n\n\n\n\nIt\u2019s important that you install the elmah.io package before Nancy.Elmah, because both packages likes to add the ELMAH configuration to the web.config file. If you install it the other way around, you will need to add the elmah.io ErrorLog element manually.\n\n\nIn order for Nancy to know how to log errors to Elmah, you need to add an override of the DefaultNancyBootstrapper. Create a new class in the root named Bootstrapper:\n\n\nusing Nancy;\nusing Nancy.Bootstrapper;\nusing Nancy.Elmah;\nusing Nancy.TinyIoc;\n\nnamespace Elmah.Io.NancyExample\n{\n    public class Bootstrapper : DefaultNancyBootstrapper\n    {\n        protected override void ApplicationStartup(TinyIoCContainer container, IPipelines pipelines)\n        {\n            base.ApplicationStartup(container, pipelines);\n            Elmahlogging.Enable(pipelines, \nelmah\n);\n        }\n    }\n}\n\n\n\n\nThe important thing in the code sample is line 13, where we tell Nancy.Elmah to hook into the pipeline of Nancy in order for it to catch and log HTTP errors. The second parameter for the Enable-method, lets us define a URL for the ELMAH error page, which can be used as an alternative to elmah.io for quick viewing of errors.", 
            "title": "Logging to elmah.io from Nancy"
        }, 
        {
            "location": "/logging-to-elmah-io-from-nancy/#logging-from-nancy", 
            "text": "", 
            "title": "Logging from Nancy"
        }, 
        {
            "location": "/logging-to-elmah-io-from-nancy/#thomas-ardal-januar-6-2014", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Logging from Nancy   As with MVC and WebAPI, Nancy already provides ELMAH support out of the box. Start by installing the elmah.io NuGet package:  Install-Package elmah.io  To integrate Nancy and ELMAH, Christian Westman already did a great job with his Nancy.Elmah project. Install it using NuGet:  Install-Package Nancy.Elmah  It\u2019s important that you install the elmah.io package before Nancy.Elmah, because both packages likes to add the ELMAH configuration to the web.config file. If you install it the other way around, you will need to add the elmah.io ErrorLog element manually.  In order for Nancy to know how to log errors to Elmah, you need to add an override of the DefaultNancyBootstrapper. Create a new class in the root named Bootstrapper:  using Nancy;\nusing Nancy.Bootstrapper;\nusing Nancy.Elmah;\nusing Nancy.TinyIoc;\n\nnamespace Elmah.Io.NancyExample\n{\n    public class Bootstrapper : DefaultNancyBootstrapper\n    {\n        protected override void ApplicationStartup(TinyIoCContainer container, IPipelines pipelines)\n        {\n            base.ApplicationStartup(container, pipelines);\n            Elmahlogging.Enable(pipelines,  elmah );\n        }\n    }\n}  The important thing in the code sample is line 13, where we tell Nancy.Elmah to hook into the pipeline of Nancy in order for it to catch and log HTTP errors. The second parameter for the Enable-method, lets us define a URL for the ELMAH error page, which can be used as an alternative to elmah.io for quick viewing of errors.", 
            "title": "Thomas Ardal, Januar 6, 2014"
        }, 
        {
            "location": "/elmah-io-20131227-released/", 
            "text": "elmah.io 20131227 released\n\n\nThomas Ardal\n, December 27, 2013\n\n\nA new release of elmah.io is out there waiting for you. Besides the usual minor tweaks and bugfixes, we have put all of our energy into a single large feature this time.\n\n\nIgnore Filters\n\n\nIf you are a regular elmah.io user (or even ELMAH using one of the build in persistors), you probably see irrelevant errors in your logs from time to time. Errors logged from different web crawlers like Googlebot and Bingbot, errors generated from your machine etc. Getting an overview of your log, can be extremely difficult if a lot of irrelevant errors are mingled with the important ones. At elmah.io we experienced this problem and decided to something about it: Please welcome Ignore Filters!\n\n\nIgnore filters let you ignore errors which matches a set of query parameters of your choosing. Ignore Filters can be found on the Filters tab beneath log settings:\n\n\n\n\nIn the top you will see all of the filters already added to you log. Beneath the list you can specify new filters by inputting a name and a \nLucene Query\n. In the buttom you will find the section \u201cAdd template filter\u201d which contains some of the most common filters to apply any log. In the above example, I have added the \u201cIgnore Googlebot\u201d filter to my log, meaning that no errors generated by a client with the specified user agent are logged.\n\n\nAs usual please reach out if you have ideas for elmah.io either through \nUserVoice\n, \nTwitter\n or \nEmail\n.", 
            "title": "elmah.io 20131227 released"
        }, 
        {
            "location": "/elmah-io-20131227-released/#elmahio-20131227-released", 
            "text": "", 
            "title": "elmah.io 20131227 released"
        }, 
        {
            "location": "/elmah-io-20131227-released/#thomas-ardal-december-27-2013", 
            "text": "", 
            "title": "Thomas Ardal, December 27, 2013"
        }, 
        {
            "location": "/elmah-io-20131227-released/#a-new-release-of-elmahio-is-out-there-waiting-for-you-besides-the-usual-minor-tweaks-and-bugfixes-we-have-put-all-of-our-energy-into-a-single-large-feature-this-time", 
            "text": "", 
            "title": "A new release of elmah.io is out there waiting for you. Besides the usual minor tweaks and bugfixes, we have put all of our energy into a single large feature this time."
        }, 
        {
            "location": "/elmah-io-20131227-released/#ignore-filters", 
            "text": "If you are a regular elmah.io user (or even ELMAH using one of the build in persistors), you probably see irrelevant errors in your logs from time to time. Errors logged from different web crawlers like Googlebot and Bingbot, errors generated from your machine etc. Getting an overview of your log, can be extremely difficult if a lot of irrelevant errors are mingled with the important ones. At elmah.io we experienced this problem and decided to something about it: Please welcome Ignore Filters!  Ignore filters let you ignore errors which matches a set of query parameters of your choosing. Ignore Filters can be found on the Filters tab beneath log settings:   In the top you will see all of the filters already added to you log. Beneath the list you can specify new filters by inputting a name and a  Lucene Query . In the buttom you will find the section \u201cAdd template filter\u201d which contains some of the most common filters to apply any log. In the above example, I have added the \u201cIgnore Googlebot\u201d filter to my log, meaning that no errors generated by a client with the specified user agent are logged.  As usual please reach out if you have ideas for elmah.io either through  UserVoice ,  Twitter  or  Email .", 
            "title": "Ignore Filters"
        }, 
        {
            "location": "/logging-to-elmah-io-from-servicestack/", 
            "text": "Logging from ServiceStack\n\n\nThomas Ardal\n, December 20, 2013\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nLogging to elmah.io from ServiceStack\n\n\n\n\nLogging errors to elmah.io from ServiceStack is almost as easy as installing in MVC and Web API. The folks over at ServiceStack provide you with a NuGet package named ServiceStack.Logging.Elmah. Like Web API you need to tell ServiceStack to use ELMAH as logging framework for errors, besides adding the standard ELMAH configuration in web.config. Start by installing both ServiceStack.Logging.Elmah and elmah.io into your ServiceStack web project:\n\n\nInstall-Package ServiceStack.Logging.Elmah\nInstall-Package elmah.io\n\n\n\n\nOnce installed, add the following line to your AppHost:\n\n\nLogManager.LogFactory = new ElmahLogFactory(new NLogFactory());\n\n\n\n\nThe above example assumes that you are already using NLog as the existing framework for logging. Wrapping different logger factories in each other actually makes it possible to log errors through ELMAH and other types of messages like warnings and info messages through another logging framework. If you don\u2019t need anything other than ELMAH logging, use the NullLogFactory instead of NLogFactory.\n\n\nThat\u2019s it! By installing both the ServiceStack.Logging.Elmah and elmah.io packages, you should have sufficient configuration in your web.config to start logging like a pro.", 
            "title": "Logging to elmah.io from ServiceStack"
        }, 
        {
            "location": "/logging-to-elmah-io-from-servicestack/#logging-from-servicestack", 
            "text": "", 
            "title": "Logging from ServiceStack"
        }, 
        {
            "location": "/logging-to-elmah-io-from-servicestack/#thomas-ardal-december-20-2013", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Logging to elmah.io from ServiceStack   Logging errors to elmah.io from ServiceStack is almost as easy as installing in MVC and Web API. The folks over at ServiceStack provide you with a NuGet package named ServiceStack.Logging.Elmah. Like Web API you need to tell ServiceStack to use ELMAH as logging framework for errors, besides adding the standard ELMAH configuration in web.config. Start by installing both ServiceStack.Logging.Elmah and elmah.io into your ServiceStack web project:  Install-Package ServiceStack.Logging.Elmah\nInstall-Package elmah.io  Once installed, add the following line to your AppHost:  LogManager.LogFactory = new ElmahLogFactory(new NLogFactory());  The above example assumes that you are already using NLog as the existing framework for logging. Wrapping different logger factories in each other actually makes it possible to log errors through ELMAH and other types of messages like warnings and info messages through another logging framework. If you don\u2019t need anything other than ELMAH logging, use the NullLogFactory instead of NLogFactory.  That\u2019s it! By installing both the ServiceStack.Logging.Elmah and elmah.io packages, you should have sufficient configuration in your web.config to start logging like a pro.", 
            "title": "Thomas Ardal, December 20, 2013"
        }, 
        {
            "location": "/running-elasticsearch-in-a-cluster-on-azure/", 
            "text": "Running ElasticSearch in a cluster on Azure\n\n\nThomas Ardal\n, December 16, 2013\n\n\nThis is a cross post from \nthomasardal.com\n about how we\u2019ve setup elmah.io on Windows Azure.\n\n\nIn this post I will share my experiences setting up ElasticSearch in a clustered setup of virtual machines, running on Windows Azure. Disclamer: this is in no way an official guide on how to setup ElasticSearch in a cluster. My experience with replication in ElasticSearch is pretty limited, and I only just now found out how virtual networks work in Windows Azure. Use this guide for inspiration and I would love to get some feedback on the approach used.\n\n\nIf you don\u2019t have access to Azure, there\u2019s a free trial available from the frontpage: http://www.windowsazure.com/en-us/pricing/free-trial/. You will get 30 days of Azure with a maximum of $200 worth of services. Pricing on Azure has always been a nightmare, but $200 should do just fine in order to play around with a couple of VMs. When signed up and in, start by creating a new virtual network:\n\n\n\n\nInput a name and create a new affinity group. For now we will just input values and discuss the details later:\n\n\n\n\nIn the DNS Servers and VPN Connectivity step just click Next and Azure will control the DNS. The final step should look something like this:\n\n\n\n\nWhen finished click the Complete checkmark. So let\u2019s rewind and talk about what we have done here. The virtual network is not necessary in order for ElasticSearch to work, but it makes it a hell of a lot easier, because all of the virtual machines on the same network will be able to communicate with each other, without you should worry about anything than allowing the connections through the firewall. More about that later.\n\n\nI won\u2019t go into details about the affinity group, but you can read a great introduction to affinity groups on Azure here: \nhttp://convective.wordpress.com/2012/06/10/affinity-groups-in-windows-azure/\n. Just think of the affinity group as a single container at Microsoft. Having all of your services in the same container, improves performance when communicating between different computers inside that container.\n\n\nElasticSearch requires some iron to execute. Let\u2019s create a new virtual machine:\n\n\n\n\nWe want a data center edition of Windows to run our cluster:\n\n\n\n\nGive you VM a name and pick a size of your choice:\n\n\n\n\nIn the following step, we will use the new virtual network we just created. But before that, select the Create a new cloud service option from the Cloud Service select box. Cloud Services is a funny thing in Azure, because it maps to both a way of implementing web sites (web roles) and background jobs (worker roles) as well as to scale other services like virtual machines. In the Virtual Network select box, choose the elasticsearch-cluster network or whatever you decided to name it:\n\n\n\n\nLeave the endpoints as is and click the Complete check mark:\n\n\n\n\nA few minutes later, your virtual machine will be up and running. We could go on and install ElasticSearch now, but one machine doesn\u2019t smell like a cluster, right? You guessed what next: more VMs! I\u2019ve always considered two nodes running a piece of software in a cluster as safe, but my time at eBay taught me, that you\u2019d always want three nodes in a cluster. It\u2019s probably up for debate, but having only two nodes doesn\u2019t really make it a cluster every time you need to take one out for patching or similar. That\u2019s why we create two additional VMs. The steps are exactly the same as above, except the Cloud Service select box where you should choose the es-vms cloud service you\u2019ve already created.\n\n\nI\u2019m assuming that you have three VM\u2019s up and running:\n\n\n\n\nNow for the boring part: installing ElasticSearch. Actually it\u2019s quite simple, but I wont go into detail on it, because it\u2019s fairly well documented here in the \nInstallation part\n. You might argue that we could do with installing ElasticSearch on a single VM and using that as a template for the other two VMs. You\u2019re right! Azure supports creating new VMs from existing virtual discs, but I\u2019ve never really tried, why I don\u2019t want to write something rubbish. For now just install ElasticSearch on the three VMs.\n\n\nRemember when I told the advantages about added all of the VMs to the same virtual network?  Well now it\u2019s time to collect. ElasticSearch supports different types of discovery, which in plain words makes multiple ElasticSearch instances talk to each other. The default type of discovery is multicast where you do not need to configure anything. Unfortunately multicast doesn\u2019t seem to work on Azure (yet), why we need to configure this using unicast. On each VM, open the elasticsearch.yml located in the config directory of ElasticSearch and search for \n\u201c# discovery.zen.ping.multicast.enabled: false\u201d\n. In order for ElasticSearch to use unicast, uncomment this line. Also you need to setup the IPs of the other ElasticSearch instances in our virtual network. In my case, the following line does the trick:\n\n\ndiscovery.zen.ping.unicast.hosts: [\u201c10.0.0.4\u201d, \u201c10.0.0.5\u201d, \u201c10.0.0.6\u201d]\n\n\nThe IP addresses visible from the dashboard of each VM. Make sure that you pick the internal IPs. Finally you need to specify the same cluster name for all instances using this line:\n\n\ncluster.name: elasticsearch\n\n\nElasticSearch communicates between nodes on port 9300 and accepts connections from the outside on port 9200, why you need to allow inbound access on these ports in Windows Firewall. Copy the elasticsearch.yml around and start ElasticSearch on all the VMs. Congratulations! You now have your first ElasticSearch cluster up and running.\n\n\nTo communicate with your new cluster from a Azure website or something outside Microsofts datacenters, you need access to port port 9200 on all of the VMs. If you inspect the public IPs if all three VMs you will notice, that it\u2019s the same. All three ElasticSearch instances will be able to handle requests on this IP, but in order to do so, you need to configure load balancing on Azure. Load balancing in azure is implemented in a real simple way through Endpoints. Navigate to the endpoints tab of one of your VMs and create a new endpoint:\n\n\n\n\nIn the following step input a name and port 9200 in both Public and Private Port. Make sure to check the Create a load balanced set:\n\n\n\n\nIn the final step assign a name to the new load balanced endpoint and accept the default values in the rest of the fields:\n\n\n\n\nThe only thing missing is creating the same endpoint on the remaining two virtual machines. Remember to select the existing load balanced set when creating the new endpoints. This makes Azure load balance incoming request to port 9200 on the IP of the VMs.\n\n\nIn my setup I\u2019ve installed Head plugin for ElasticSearch, which makes it possible to visualize a new index on my cluster for you guys:", 
            "title": "Running ElasticSearch in a cluster on Azure"
        }, 
        {
            "location": "/running-elasticsearch-in-a-cluster-on-azure/#running-elasticsearch-in-a-cluster-on-azure", 
            "text": "", 
            "title": "Running ElasticSearch in a cluster on Azure"
        }, 
        {
            "location": "/running-elasticsearch-in-a-cluster-on-azure/#thomas-ardal-december-16-2013", 
            "text": "", 
            "title": "Thomas Ardal, December 16, 2013"
        }, 
        {
            "location": "/running-elasticsearch-in-a-cluster-on-azure/#this-is-a-cross-post-from-thomasardalcom-about-how-weve-setup-elmahio-on-windows-azure", 
            "text": "In this post I will share my experiences setting up ElasticSearch in a clustered setup of virtual machines, running on Windows Azure. Disclamer: this is in no way an official guide on how to setup ElasticSearch in a cluster. My experience with replication in ElasticSearch is pretty limited, and I only just now found out how virtual networks work in Windows Azure. Use this guide for inspiration and I would love to get some feedback on the approach used.  If you don\u2019t have access to Azure, there\u2019s a free trial available from the frontpage: http://www.windowsazure.com/en-us/pricing/free-trial/. You will get 30 days of Azure with a maximum of $200 worth of services. Pricing on Azure has always been a nightmare, but $200 should do just fine in order to play around with a couple of VMs. When signed up and in, start by creating a new virtual network:   Input a name and create a new affinity group. For now we will just input values and discuss the details later:   In the DNS Servers and VPN Connectivity step just click Next and Azure will control the DNS. The final step should look something like this:   When finished click the Complete checkmark. So let\u2019s rewind and talk about what we have done here. The virtual network is not necessary in order for ElasticSearch to work, but it makes it a hell of a lot easier, because all of the virtual machines on the same network will be able to communicate with each other, without you should worry about anything than allowing the connections through the firewall. More about that later.  I won\u2019t go into details about the affinity group, but you can read a great introduction to affinity groups on Azure here:  http://convective.wordpress.com/2012/06/10/affinity-groups-in-windows-azure/ . Just think of the affinity group as a single container at Microsoft. Having all of your services in the same container, improves performance when communicating between different computers inside that container.  ElasticSearch requires some iron to execute. Let\u2019s create a new virtual machine:   We want a data center edition of Windows to run our cluster:   Give you VM a name and pick a size of your choice:   In the following step, we will use the new virtual network we just created. But before that, select the Create a new cloud service option from the Cloud Service select box. Cloud Services is a funny thing in Azure, because it maps to both a way of implementing web sites (web roles) and background jobs (worker roles) as well as to scale other services like virtual machines. In the Virtual Network select box, choose the elasticsearch-cluster network or whatever you decided to name it:   Leave the endpoints as is and click the Complete check mark:   A few minutes later, your virtual machine will be up and running. We could go on and install ElasticSearch now, but one machine doesn\u2019t smell like a cluster, right? You guessed what next: more VMs! I\u2019ve always considered two nodes running a piece of software in a cluster as safe, but my time at eBay taught me, that you\u2019d always want three nodes in a cluster. It\u2019s probably up for debate, but having only two nodes doesn\u2019t really make it a cluster every time you need to take one out for patching or similar. That\u2019s why we create two additional VMs. The steps are exactly the same as above, except the Cloud Service select box where you should choose the es-vms cloud service you\u2019ve already created.  I\u2019m assuming that you have three VM\u2019s up and running:   Now for the boring part: installing ElasticSearch. Actually it\u2019s quite simple, but I wont go into detail on it, because it\u2019s fairly well documented here in the  Installation part . You might argue that we could do with installing ElasticSearch on a single VM and using that as a template for the other two VMs. You\u2019re right! Azure supports creating new VMs from existing virtual discs, but I\u2019ve never really tried, why I don\u2019t want to write something rubbish. For now just install ElasticSearch on the three VMs.  Remember when I told the advantages about added all of the VMs to the same virtual network?  Well now it\u2019s time to collect. ElasticSearch supports different types of discovery, which in plain words makes multiple ElasticSearch instances talk to each other. The default type of discovery is multicast where you do not need to configure anything. Unfortunately multicast doesn\u2019t seem to work on Azure (yet), why we need to configure this using unicast. On each VM, open the elasticsearch.yml located in the config directory of ElasticSearch and search for  \u201c# discovery.zen.ping.multicast.enabled: false\u201d . In order for ElasticSearch to use unicast, uncomment this line. Also you need to setup the IPs of the other ElasticSearch instances in our virtual network. In my case, the following line does the trick:  discovery.zen.ping.unicast.hosts: [\u201c10.0.0.4\u201d, \u201c10.0.0.5\u201d, \u201c10.0.0.6\u201d]  The IP addresses visible from the dashboard of each VM. Make sure that you pick the internal IPs. Finally you need to specify the same cluster name for all instances using this line:  cluster.name: elasticsearch  ElasticSearch communicates between nodes on port 9300 and accepts connections from the outside on port 9200, why you need to allow inbound access on these ports in Windows Firewall. Copy the elasticsearch.yml around and start ElasticSearch on all the VMs. Congratulations! You now have your first ElasticSearch cluster up and running.  To communicate with your new cluster from a Azure website or something outside Microsofts datacenters, you need access to port port 9200 on all of the VMs. If you inspect the public IPs if all three VMs you will notice, that it\u2019s the same. All three ElasticSearch instances will be able to handle requests on this IP, but in order to do so, you need to configure load balancing on Azure. Load balancing in azure is implemented in a real simple way through Endpoints. Navigate to the endpoints tab of one of your VMs and create a new endpoint:   In the following step input a name and port 9200 in both Public and Private Port. Make sure to check the Create a load balanced set:   In the final step assign a name to the new load balanced endpoint and accept the default values in the rest of the fields:   The only thing missing is creating the same endpoint on the remaining two virtual machines. Remember to select the existing load balanced set when creating the new endpoints. This makes Azure load balance incoming request to port 9200 on the IP of the VMs.  In my setup I\u2019ve installed Head plugin for ElasticSearch, which makes it possible to visualize a new index on my cluster for you guys:", 
            "title": "This is a cross post from thomasardal.com about how we\u2019ve setup elmah.io on Windows Azure."
        }, 
        {
            "location": "/elmah-io-20131212-released/", 
            "text": "elmah.io 20131212 released\n\n\nThomas Ardal\n, December 12, 2013\n\n\nWe just released elmah.io. The new release primarily contain bug fixes and we want to thank all of you that found and reported bugs. Besides fixing bugs, we also upgraded to the latest versions of ASP.NET MVC and ASP.NET Web API. As always, please let us know if you experience any problems.\n\n\nHere are some new features for ya!\n\n\nHTTPS\n\n\nFinally! We now support SSL. Visit \nelmah.io\n for the secure version. You can still visit the website on the non-secure URL, but all of your errors logs are shipped through SSL when using the elmah.io NuGet package.\n\n\nRename Log\n\n\nQuite few of you asked for the possibility to rename a log. Well here you go:\n\n\n\n\nAs usual please reach out if you have ideas for elmah.io either through \nUserVoice\n, \nTwitter\n or \nEmail\n.", 
            "title": "elmah.io 20131212 released. 2013"
        }, 
        {
            "location": "/elmah-io-20131212-released/#elmahio-20131212-released", 
            "text": "", 
            "title": "elmah.io 20131212 released"
        }, 
        {
            "location": "/elmah-io-20131212-released/#thomas-ardal-december-12-2013", 
            "text": "", 
            "title": "Thomas Ardal, December 12, 2013"
        }, 
        {
            "location": "/elmah-io-20131212-released/#we-just-released-elmahio-the-new-release-primarily-contain-bug-fixes-and-we-want-to-thank-all-of-you-that-found-and-reported-bugs-besides-fixing-bugs-we-also-upgraded-to-the-latest-versions-of-aspnet-mvc-and-aspnet-web-api-as-always-please-let-us-know-if-you-experience-any-problems", 
            "text": "Here are some new features for ya!", 
            "title": "We just released elmah.io. The new release primarily contain bug fixes and we want to thank all of you that found and reported bugs. Besides fixing bugs, we also upgraded to the latest versions of ASP.NET MVC and ASP.NET Web API. As always, please let us know if you experience any problems."
        }, 
        {
            "location": "/elmah-io-20131212-released/#https", 
            "text": "Finally! We now support SSL. Visit  elmah.io  for the secure version. You can still visit the website on the non-secure URL, but all of your errors logs are shipped through SSL when using the elmah.io NuGet package.", 
            "title": "HTTPS"
        }, 
        {
            "location": "/elmah-io-20131212-released/#rename-log", 
            "text": "Quite few of you asked for the possibility to rename a log. Well here you go:   As usual please reach out if you have ideas for elmah.io either through  UserVoice ,  Twitter  or  Email .", 
            "title": "Rename Log"
        }, 
        {
            "location": "/using-multiple-elmah-io-logs-for-different-environments/", 
            "text": "Using multiple elmah.io logs for different environments\n\n\nThomas Ardal\n, December 6, 2013\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nUse multiple logs for different environments\n\n\n\n\nWe bet that you use at least two environments for hosting you website: localhost and a production environment. You probably need to log website errors all your environments, but you don\u2019t want to mix errors from different environments in the same error log. Lucky for you, Microsoft provides a great way of differentiating configuration for different environments called Web Config transformation.\n\n\nStart by creating two new logs at the elmah.io website called something like \u201cMy website\u201d and \u201cMy website development\u201d. The naming isn\u2019t really important, so pick something saying.\n\n\nIn your project install the elmah.io NuGet package:\n\n\nInstall-Package elmah.io\n\n\n\n\nDuring the installation, NuGet will ask you for your elmah.io log id. In this dialog input the log id from the log named \u201cMy website development\u201d. The default configuration is used when running your website locally. When installed open the \nweb.release.config\n file and add the following code:\n\n\nelmah xdt:Transform=\nReplace\n\n  \nerrorLog type=\nElmah.Io.ErrorLog, Elmah.Io\n LogId=\nINSERT_HERE\n /\n\n  \nsecurity allowRemoteAccess=\nfalse\n /\n\n\n/elmah\n\n\n\n\n\nReplace the \nINSERT_HERE\n value with the log id named \u201cMy website\u201d. That\u2019s it! You can now build and deploy your website using different configurations. When nothing is changed, Visual Studio will build your website using the Debug configuration. This configuration looks for the ELMAH code in the \nweb.debug.config\n file. We didn\u2019t add any ELMAH configuration to this file, why the default values from \nweb.config\n are used. When selecting the Release configuration, Web. Config transformations will replace the default values in \nweb.config\n with the new ELMAH configuration from \nweb.release.config\n.\n\n\nTo avoid spending numerous hours of debugging, remember that Web Config transformations are only run on deploy and not on build. In other words deploy your website using Visual Studio, MSBuild or third for the transformations to replace the right ELMAH config.", 
            "title": "Using multiple elmah.io logs for different environments"
        }, 
        {
            "location": "/using-multiple-elmah-io-logs-for-different-environments/#using-multiple-elmahio-logs-for-different-environments", 
            "text": "", 
            "title": "Using multiple elmah.io logs for different environments"
        }, 
        {
            "location": "/using-multiple-elmah-io-logs-for-different-environments/#thomas-ardal-december-6-2013", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Use multiple logs for different environments   We bet that you use at least two environments for hosting you website: localhost and a production environment. You probably need to log website errors all your environments, but you don\u2019t want to mix errors from different environments in the same error log. Lucky for you, Microsoft provides a great way of differentiating configuration for different environments called Web Config transformation.  Start by creating two new logs at the elmah.io website called something like \u201cMy website\u201d and \u201cMy website development\u201d. The naming isn\u2019t really important, so pick something saying.  In your project install the elmah.io NuGet package:  Install-Package elmah.io  During the installation, NuGet will ask you for your elmah.io log id. In this dialog input the log id from the log named \u201cMy website development\u201d. The default configuration is used when running your website locally. When installed open the  web.release.config  file and add the following code:  elmah xdt:Transform= Replace \n   errorLog type= Elmah.Io.ErrorLog, Elmah.Io  LogId= INSERT_HERE  / \n   security allowRemoteAccess= false  /  /elmah   Replace the  INSERT_HERE  value with the log id named \u201cMy website\u201d. That\u2019s it! You can now build and deploy your website using different configurations. When nothing is changed, Visual Studio will build your website using the Debug configuration. This configuration looks for the ELMAH code in the  web.debug.config  file. We didn\u2019t add any ELMAH configuration to this file, why the default values from  web.config  are used. When selecting the Release configuration, Web. Config transformations will replace the default values in  web.config  with the new ELMAH configuration from  web.release.config .  To avoid spending numerous hours of debugging, remember that Web Config transformations are only run on deploy and not on build. In other words deploy your website using Visual Studio, MSBuild or third for the transformations to replace the right ELMAH config.", 
            "title": "Thomas Ardal, December 6, 2013"
        }, 
        {
            "location": "/logging-errors-to-elmah-io/", 
            "text": "Logging errors to elmah.io\n\n\nThomas Ardal\n, November 11, 2013\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nLogging from ELMAH\n\n\n\n\nThis post will explain the steps necessary to log errors from your web application into elmah.io. If you don\u2019t know ELMAH, check out our \nELMAH Tutorial\n and visit the nice folks over at the \nELMAH project\n page. Let\u2019s get started!!!1\n\n\n\n\nCreate a new ASP.NET MVC project in Visual Studio (you can choose another web project type if you\u2019d like):\n\n\n\n\n\n\n\n\nSelect a project template of your choice:\n\n\n\n\n\n\n\n\nNavigate to elmah.io and login using your favorite social provider. When logged in, elmah.io redirects you to the dashboard. Click on Create new log and name your log:\n\n\n\n\n\n\n\n\nWhen created, elmah.io shows you the install instructions. Don\u2019t pay too much attention to the install steps, because the rest of this tutorial will guide you through the installation. Copy your log id from step 2 in the installation instructions (located in the dialog):\n\n\n\n\n\n\n\n\nNavigate back to your web project, right click References and select Manage NuGet Packages:\n\n\n\n\n\n\n\n\nIn the NuGet dialog, search for elmah.io:\n\n\n\n\n\n\n\n\nClick Install and input your log id in the dialog appearing during installation of the NuGet package:\n\n\n\n\n\n\n\n\nYou\u2019re ready to rock and roll. Hit F5 and input a URL you know doesn\u2019t exist (like http://localhost:64987/notfound). You should see the standard 404 message displayed in the browser. To verify that the installation of elmah.io is successful, navigate back to the elmah.io dashboard and select the Search tab of your newly created log:\n\n\n\n\n\n\nSeeing the error? Congrats! Every error on your application is now logged to elmah.io.", 
            "title": "Logging errors to elmah.io"
        }, 
        {
            "location": "/logging-errors-to-elmah-io/#logging-errors-to-elmahio", 
            "text": "", 
            "title": "Logging errors to elmah.io"
        }, 
        {
            "location": "/logging-errors-to-elmah-io/#thomas-ardal-november-11-2013", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Logging from ELMAH   This post will explain the steps necessary to log errors from your web application into elmah.io. If you don\u2019t know ELMAH, check out our  ELMAH Tutorial  and visit the nice folks over at the  ELMAH project  page. Let\u2019s get started!!!1   Create a new ASP.NET MVC project in Visual Studio (you can choose another web project type if you\u2019d like):     Select a project template of your choice:     Navigate to elmah.io and login using your favorite social provider. When logged in, elmah.io redirects you to the dashboard. Click on Create new log and name your log:     When created, elmah.io shows you the install instructions. Don\u2019t pay too much attention to the install steps, because the rest of this tutorial will guide you through the installation. Copy your log id from step 2 in the installation instructions (located in the dialog):     Navigate back to your web project, right click References and select Manage NuGet Packages:     In the NuGet dialog, search for elmah.io:     Click Install and input your log id in the dialog appearing during installation of the NuGet package:     You\u2019re ready to rock and roll. Hit F5 and input a URL you know doesn\u2019t exist (like http://localhost:64987/notfound). You should see the standard 404 message displayed in the browser. To verify that the installation of elmah.io is successful, navigate back to the elmah.io dashboard and select the Search tab of your newly created log:    Seeing the error? Congrats! Every error on your application is now logged to elmah.io.", 
            "title": "Thomas Ardal, November 11, 2013"
        }, 
        {
            "location": "/elmah-io-20131111-released/", 
            "text": "elmah.io 20131111 released\n\n\nThomas Ardal\n, November 11, 2013\n\n\nA few weeks have passed and while we are working on some major improvements that we are not quite ready to show yet, we\u2019ve just released some goodies for you.\n\n\nPimped install\n\n\nInstalling elmah.io have always been piece of cake. Believe or not it just got easier. You still install the NuGet package, but you no longer need to modify your web.config file manually. During the installation of the elmah.io NuGet package, a dialog is shown making it possible for you to input your log id:\n\n\n\n\nWhen installed, all the necessary config is automatically added and pointing to your error log in the cloud!\n\n\nLucene searches\n\n\nYou probably already love the search field. Well we have the perfect way for you to reach nerdvana! The search field now accept Lucene queries, making it possible for you to input structured queries like:\n\n\n\n\nGitHub integration\n\n\nHappy GitHub like us? Great, you will love the new GitHub integration. Setup the base URL to your GitHub issue tracker beneath settings and create a new issue right from the error details:\n\n\n\n\nDelete errors\n\n\nYou\u2019ve always had the choice of hiding individual errors. Are you one of those who like your errors gone for good when you\u2019ve handled them, you will dig the new Delete button, also located in the error details menu.\n\n\nImproved API\n\n\nOur API seems like a popular feature for you guys. That\u2019s why we\u2019ve extended it to also talk XML.\n\n\nAs usual please reach out if you have ideas for elmah.io either through \nUserVoice\n, \nTwitter\n or \nEmail\n.", 
            "title": "elmah.io 20131111 released"
        }, 
        {
            "location": "/elmah-io-20131111-released/#elmahio-20131111-released", 
            "text": "", 
            "title": "elmah.io 20131111 released"
        }, 
        {
            "location": "/elmah-io-20131111-released/#thomas-ardal-november-11-2013", 
            "text": "", 
            "title": "Thomas Ardal, November 11, 2013"
        }, 
        {
            "location": "/elmah-io-20131111-released/#a-few-weeks-have-passed-and-while-we-are-working-on-some-major-improvements-that-we-are-not-quite-ready-to-show-yet-weve-just-released-some-goodies-for-you", 
            "text": "", 
            "title": "A few weeks have passed and while we are working on some major improvements that we are not quite ready to show yet, we\u2019ve just released some goodies for you."
        }, 
        {
            "location": "/elmah-io-20131111-released/#pimped-install", 
            "text": "Installing elmah.io have always been piece of cake. Believe or not it just got easier. You still install the NuGet package, but you no longer need to modify your web.config file manually. During the installation of the elmah.io NuGet package, a dialog is shown making it possible for you to input your log id:   When installed, all the necessary config is automatically added and pointing to your error log in the cloud!", 
            "title": "Pimped install"
        }, 
        {
            "location": "/elmah-io-20131111-released/#lucene-searches", 
            "text": "You probably already love the search field. Well we have the perfect way for you to reach nerdvana! The search field now accept Lucene queries, making it possible for you to input structured queries like:", 
            "title": "Lucene searches"
        }, 
        {
            "location": "/elmah-io-20131111-released/#github-integration", 
            "text": "Happy GitHub like us? Great, you will love the new GitHub integration. Setup the base URL to your GitHub issue tracker beneath settings and create a new issue right from the error details:", 
            "title": "GitHub integration"
        }, 
        {
            "location": "/elmah-io-20131111-released/#delete-errors", 
            "text": "You\u2019ve always had the choice of hiding individual errors. Are you one of those who like your errors gone for good when you\u2019ve handled them, you will dig the new Delete button, also located in the error details menu.", 
            "title": "Delete errors"
        }, 
        {
            "location": "/elmah-io-20131111-released/#improved-api", 
            "text": "Our API seems like a popular feature for you guys. That\u2019s why we\u2019ve extended it to also talk XML.  As usual please reach out if you have ideas for elmah.io either through  UserVoice ,  Twitter  or  Email .", 
            "title": "Improved API"
        }, 
        {
            "location": "/elmah-io-20131015-released/", 
            "text": "elmah.io 20131015 released\n\n\nThomas Ardal\n, October 15, 2013\n\n\nOnce again we have been busy building the best cloud based error logger for you guys and girls.\n\n\nHere are the feature list:\n\n\nNew dashboard\n\n\nA lot of you have suggested improvements for the dashboard. We have listened and provided you with a new and hopefully much better and informative dashboard.\n\n\n\n\nEach ELMAH log now shows a graph of new errors during the last 24 hours directly on the desktop. We really hope that you like it.\n\n\nTabbed search\n\n\nWe have started splitting up different search entrances into separate tabs on the search page. There\u2019s the search filters you already know from the previous version:\n\n\n\n\nThe new statistics tab, which btw will be extended with new chart types in the near future:\n\n\n\n\nand finally a new shiny calendar view, showing you a calendar of the errors from the past 14 days:\n\n\n\n\nChange log access\n\n\nEver wanted to administrate log access on existing users? Now it\u2019s possible through the new feature in the Users tab:\n\n\n\n\nAs usual please reach out if you have ideas for elmah.io either through \nUserVoice\n, \nTwitter\n or \nEmail\n.", 
            "title": "elmah.io 20131015 released"
        }, 
        {
            "location": "/elmah-io-20131015-released/#elmahio-20131015-released", 
            "text": "", 
            "title": "elmah.io 20131015 released"
        }, 
        {
            "location": "/elmah-io-20131015-released/#thomas-ardal-october-15-2013", 
            "text": "", 
            "title": "Thomas Ardal, October 15, 2013"
        }, 
        {
            "location": "/elmah-io-20131015-released/#once-again-we-have-been-busy-building-the-best-cloud-based-error-logger-for-you-guys-and-girls", 
            "text": "Here are the feature list:", 
            "title": "Once again we have been busy building the best cloud based error logger for you guys and girls."
        }, 
        {
            "location": "/elmah-io-20131015-released/#new-dashboard", 
            "text": "A lot of you have suggested improvements for the dashboard. We have listened and provided you with a new and hopefully much better and informative dashboard.   Each ELMAH log now shows a graph of new errors during the last 24 hours directly on the desktop. We really hope that you like it.", 
            "title": "New dashboard"
        }, 
        {
            "location": "/elmah-io-20131015-released/#tabbed-search", 
            "text": "We have started splitting up different search entrances into separate tabs on the search page. There\u2019s the search filters you already know from the previous version:   The new statistics tab, which btw will be extended with new chart types in the near future:   and finally a new shiny calendar view, showing you a calendar of the errors from the past 14 days:", 
            "title": "Tabbed search"
        }, 
        {
            "location": "/elmah-io-20131015-released/#change-log-access", 
            "text": "Ever wanted to administrate log access on existing users? Now it\u2019s possible through the new feature in the Users tab:   As usual please reach out if you have ideas for elmah.io either through  UserVoice ,  Twitter  or  Email .", 
            "title": "Change log access"
        }, 
        {
            "location": "/elmah-io-20130922-released/", 
            "text": "elmah.io 20130922 released\n\n\nThomas Ardal\n, September 22, 2013\n\n\nTime for another update on new elmah.io features.\n\n\nAPI\n\n\nA lot of you asked for it. Now it\u2019s there! The new \nAPI\n makes it possible to integrate with elmah.io from your own code. We\u2019ve published three examples on how to integrate with elmah.io at our \nGitHub repository\n.\n\n\nBrowser and OS icons on error details\n\n\nShow which browser and OS the user generating this error were using. Helps you spot trends in errors relating to certain browsers or operating systems.\n\n\n\n\nClear and Delete log moved to settings\n\n\nBy popular request, we\u2019ve moved the \u201cdangerous\u201d methods like Clear and Delete log from the dashboard to a new tab on settings.\n\n\n\n\nPricing and About page\n\n\nFrom the top menu you will be able to access both Pricing and About page. We haven\u2019t published details about the actual price yet and we would love to get your input on that. The about page tells a little about us.\n\n\nAs usual please reach out if you have ideas for elmah.io either through \nUserVoice\n, \nTwitter\n or \nEmail\n.", 
            "title": "elmah.io 20130922 released"
        }, 
        {
            "location": "/elmah-io-20130922-released/#elmahio-20130922-released", 
            "text": "", 
            "title": "elmah.io 20130922 released"
        }, 
        {
            "location": "/elmah-io-20130922-released/#thomas-ardal-september-22-2013", 
            "text": "", 
            "title": "Thomas Ardal, September 22, 2013"
        }, 
        {
            "location": "/elmah-io-20130922-released/#time-for-another-update-on-new-elmahio-features", 
            "text": "", 
            "title": "Time for another update on new elmah.io features."
        }, 
        {
            "location": "/elmah-io-20130922-released/#api", 
            "text": "A lot of you asked for it. Now it\u2019s there! The new  API  makes it possible to integrate with elmah.io from your own code. We\u2019ve published three examples on how to integrate with elmah.io at our  GitHub repository .", 
            "title": "API"
        }, 
        {
            "location": "/elmah-io-20130922-released/#browser-and-os-icons-on-error-details", 
            "text": "Show which browser and OS the user generating this error were using. Helps you spot trends in errors relating to certain browsers or operating systems.", 
            "title": "Browser and OS icons on error details"
        }, 
        {
            "location": "/elmah-io-20130922-released/#clear-and-delete-log-moved-to-settings", 
            "text": "By popular request, we\u2019ve moved the \u201cdangerous\u201d methods like Clear and Delete log from the dashboard to a new tab on settings.", 
            "title": "Clear and Delete log moved to settings"
        }, 
        {
            "location": "/elmah-io-20130922-released/#pricing-and-about-page", 
            "text": "From the top menu you will be able to access both Pricing and About page. We haven\u2019t published details about the actual price yet and we would love to get your input on that. The about page tells a little about us.  As usual please reach out if you have ideas for elmah.io either through  UserVoice ,  Twitter  or  Email .", 
            "title": "Pricing and About page"
        }, 
        {
            "location": "/logging-custom-errors-to-elmah-io/", 
            "text": "Logging custom errors to elmah.io\n\n\nThomas Ardal\n, September 17. 2013\n\n\nSome of you may be thinking: \u201cI want to use elmah.io to log some custom errors, but I don\u2019t want to configure ELMAH to log every error on my webserver. Can this be done?\u201d The answer is of course: Yes! The elmah.io NuGet package has some tricks up its sleeve, making it not only an ErrorLog implementation for ELMAH, but also a client you can utilize in your .NET applications. Let me show you how by using a simple example:\n\n\nCreate a new ASP.NET MVC project:\n\n\n\n\nInstall the elmah.io NuGet package:\n\n\nInstall-Package elmah.io\n\n\n\n\nAdd the following code to \nHomeController.cs\n:\n\n\nusing System;\nusing System.Web.Mvc;\nusing Elmah;\nusing ErrorLog = Elmah.Io.ErrorLog;\n\nnamespace WebAppWithCustomLogging.Controllers\n{\n    public class HomeController : Controller\n    {\n        private readonly ErrorLog _errorLog;\n\n        public HomeController()\n        {\n            _errorLog = new ErrorLog(\n                new Guid(\nREPLACE WITH YOUR LOG ID\n));\n        }\n\n        public ActionResult Index(int dividend, int divisor)\n        {\n            var result = 0;\n            try\n            {\n                result = dividend / divisor;\n            }\n            catch (Exception e)\n            {\n                _errorLog.Log(new Error(e));\n            }\n\n            return View(result);\n        }\n    }\n}\n\n\n\n\nIn the constructor we create a new instance of the \nErrorLog\n class from the \nElmah.Io\n assembly. The class contain multiple constructors, but if you want to use elmah.io for custom logging, pick the one accepting your Log Id (found at the dashboard on elmah.io). In line 27 we need to log the exception when the division throws an exception. This is done using the \nLog\n method of the \nErrorLog\n class.\n\n\nErrorLog\n also provides methods for extracting both single and multiple errors from elmah.io.", 
            "title": "Logging custom errors to elmah.io"
        }, 
        {
            "location": "/logging-custom-errors-to-elmah-io/#logging-custom-errors-to-elmahio", 
            "text": "", 
            "title": "Logging custom errors to elmah.io"
        }, 
        {
            "location": "/logging-custom-errors-to-elmah-io/#thomas-ardal-september-17-2013", 
            "text": "Some of you may be thinking: \u201cI want to use elmah.io to log some custom errors, but I don\u2019t want to configure ELMAH to log every error on my webserver. Can this be done?\u201d The answer is of course: Yes! The elmah.io NuGet package has some tricks up its sleeve, making it not only an ErrorLog implementation for ELMAH, but also a client you can utilize in your .NET applications. Let me show you how by using a simple example:  Create a new ASP.NET MVC project:   Install the elmah.io NuGet package:  Install-Package elmah.io  Add the following code to  HomeController.cs :  using System;\nusing System.Web.Mvc;\nusing Elmah;\nusing ErrorLog = Elmah.Io.ErrorLog;\n\nnamespace WebAppWithCustomLogging.Controllers\n{\n    public class HomeController : Controller\n    {\n        private readonly ErrorLog _errorLog;\n\n        public HomeController()\n        {\n            _errorLog = new ErrorLog(\n                new Guid( REPLACE WITH YOUR LOG ID ));\n        }\n\n        public ActionResult Index(int dividend, int divisor)\n        {\n            var result = 0;\n            try\n            {\n                result = dividend / divisor;\n            }\n            catch (Exception e)\n            {\n                _errorLog.Log(new Error(e));\n            }\n\n            return View(result);\n        }\n    }\n}  In the constructor we create a new instance of the  ErrorLog  class from the  Elmah.Io  assembly. The class contain multiple constructors, but if you want to use elmah.io for custom logging, pick the one accepting your Log Id (found at the dashboard on elmah.io). In line 27 we need to log the exception when the division throws an exception. This is done using the  Log  method of the  ErrorLog  class.  ErrorLog  also provides methods for extracting both single and multiple errors from elmah.io.", 
            "title": "Thomas Ardal, September 17. 2013"
        }, 
        {
            "location": "/configuring-elmah-io-from-code/", 
            "text": "Configuring elmah.io from code\n\n\nThomas Ardal\n, September 11, 2013\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nConfigure elmah.io from code\n\n\n\n\n@saxx wrote an excellent question on Twitter:\n\n\n\n\n@elmah_io Is there a nice way to move the config (LogId) from web.config into the code? I want to push my web.config into public GitHub.\n\u2014 saxx (@saxx) September 2, 2013\n\n\n\n\nSo the question really boils down to this: Can I configure elmah.io through C# code? Sure! With a little help from ELMAH and some custom code, you will be able to configure any ELMAH error logger through code. Here\u2019s what @saxx ended up implementing:\n\n\nusing Elmah;\nusing System.Collections.Generic;\nusing System.ComponentModel.Design;\n\n[assembly: WebActivatorEx.PreApplicationStartMethod(typeof(EvernoteMvcExample.ElmahConfig), \nStart\n)]\n\nnamespace EvernoteMvcExample\n{\n    public static class ElmahConfig\n    {\n        public static void Start()\n        {\n            ServiceCenter.Current = CreateServiceProviderQueryHandler(ServiceCenter.Current);\n        }\n\n        private static ServiceProviderQueryHandler CreateServiceProviderQueryHandler(ServiceProviderQueryHandler sp)\n        {\n            return context =\n\n            {\n                var container = new ServiceContainer(sp(context));\n\n                var config = new Dictionary\nstring, string\n();\n                config[\nLogId\n] = Configuration.ElmahLogId;\n                var log = new Elmah.Io.ErrorLog(config);\n\n                container.AddService(typeof(ErrorLog), log);\n                return container;\n            };\n        }\n    }\n}\n\n\n\n\nThe original can be found in the \nEverMark\n project on GitHub.\n\n\nLet\u2019s look at the code. In line 5, the ElmahConfig class is configured as a PreApplicationStartMethod which means, that ASP.NET (MVC) will execute the Start method when the web application starts up. In line 13 the ServiceCenter.Current property is set to the return type of the CreateServiceProviderQueryHandler-method. This method is where the magic happens. Besides creating the new ServiceContainer, we actually created the Elmah.Io.ErrorLog class normally configured through XML. The Dictionary should contain the LogId found on the dashboard of the elmah.io website. @saxx doesn\u2019t want to show of the LogId on GitHub (understandable), why this is pulled in through configuration. If your code is private, you can hardcode your LogId instead if you like.\n\n\nThat\u2019s it! You no longer need the \nelmah\n element in your web.config.", 
            "title": "Configuring elmah.io from code"
        }, 
        {
            "location": "/configuring-elmah-io-from-code/#configuring-elmahio-from-code", 
            "text": "", 
            "title": "Configuring elmah.io from code"
        }, 
        {
            "location": "/configuring-elmah-io-from-code/#thomas-ardal-september-11-2013", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Configure elmah.io from code   @saxx wrote an excellent question on Twitter:   @elmah_io Is there a nice way to move the config (LogId) from web.config into the code? I want to push my web.config into public GitHub.\n\u2014 saxx (@saxx) September 2, 2013   So the question really boils down to this: Can I configure elmah.io through C# code? Sure! With a little help from ELMAH and some custom code, you will be able to configure any ELMAH error logger through code. Here\u2019s what @saxx ended up implementing:  using Elmah;\nusing System.Collections.Generic;\nusing System.ComponentModel.Design;\n\n[assembly: WebActivatorEx.PreApplicationStartMethod(typeof(EvernoteMvcExample.ElmahConfig),  Start )]\n\nnamespace EvernoteMvcExample\n{\n    public static class ElmahConfig\n    {\n        public static void Start()\n        {\n            ServiceCenter.Current = CreateServiceProviderQueryHandler(ServiceCenter.Current);\n        }\n\n        private static ServiceProviderQueryHandler CreateServiceProviderQueryHandler(ServiceProviderQueryHandler sp)\n        {\n            return context = \n            {\n                var container = new ServiceContainer(sp(context));\n\n                var config = new Dictionary string, string ();\n                config[ LogId ] = Configuration.ElmahLogId;\n                var log = new Elmah.Io.ErrorLog(config);\n\n                container.AddService(typeof(ErrorLog), log);\n                return container;\n            };\n        }\n    }\n}  The original can be found in the  EverMark  project on GitHub.  Let\u2019s look at the code. In line 5, the ElmahConfig class is configured as a PreApplicationStartMethod which means, that ASP.NET (MVC) will execute the Start method when the web application starts up. In line 13 the ServiceCenter.Current property is set to the return type of the CreateServiceProviderQueryHandler-method. This method is where the magic happens. Besides creating the new ServiceContainer, we actually created the Elmah.Io.ErrorLog class normally configured through XML. The Dictionary should contain the LogId found on the dashboard of the elmah.io website. @saxx doesn\u2019t want to show of the LogId on GitHub (understandable), why this is pulled in through configuration. If your code is private, you can hardcode your LogId instead if you like.  That\u2019s it! You no longer need the  elmah  element in your web.config.", 
            "title": "Thomas Ardal, September 11, 2013"
        }, 
        {
            "location": "/logging-to-elmah-io-from-web-api/", 
            "text": "Logging to elmah.io from Web API\n\n\nThomas Ardal\n, September 10, 2013\n\n\n\n\nThis post has been adapted as part of our official documentation. To read the most updated version, please check out \nLogging from Web API\n\n\n\n\nIn this post we\u2019ll show you how to log errors from ASP.NET Web API.\n\n\nWeb API provides its own mechanism for handling errors, why ELMAH\u2019s modules and handlers doesn\u2019t work there. Luckily Richard Dingwall created the \nElmah.Contrib.WebApi\n NuGet package to fix this.\n\n\nTo start logging exceptions from Web API, install the NuGet packages:\n\n\nInstall-Package elmah.io\nInstall-Package Elmah.Contrib.WebApi\n\n\n\n\nAdd the following code to your \nWebApiConfig.cs\n file:\n\n\npublic static class WebApiConfig\n{\n    public static void Register(HttpConfiguration config)\n    {\n        ...\n        config.Services.Add(typeof(IExceptionLogger), new ElmahExceptionLogger());\n        ...\n    }\n}\n\n\n\n\nIExceptionLogger\n is a new concept in Web API 2. It intercepts all thrown exceptions, even errors in controller contructors and routing errors.\n\n\nIf you are using Web API 1, there\u2019s another way to add exception logging:\n\n\nprotected void Application_Start()\n{\n    ...\n    GlobalConfiguration.Configuration.Filters.Add(new ElmahHandleErrorApiAttribute());\n    ...\n}\n\n\n\n\nIn this case you register a new global filter with Web API. The downside of this approach is, that only errors thrown in controller actions are logged.", 
            "title": "Logging to elmah.io from Web API"
        }, 
        {
            "location": "/logging-to-elmah-io-from-web-api/#logging-to-elmahio-from-web-api", 
            "text": "", 
            "title": "Logging to elmah.io from Web API"
        }, 
        {
            "location": "/logging-to-elmah-io-from-web-api/#thomas-ardal-september-10-2013", 
            "text": "This post has been adapted as part of our official documentation. To read the most updated version, please check out  Logging from Web API   In this post we\u2019ll show you how to log errors from ASP.NET Web API.  Web API provides its own mechanism for handling errors, why ELMAH\u2019s modules and handlers doesn\u2019t work there. Luckily Richard Dingwall created the  Elmah.Contrib.WebApi  NuGet package to fix this.  To start logging exceptions from Web API, install the NuGet packages:  Install-Package elmah.io\nInstall-Package Elmah.Contrib.WebApi  Add the following code to your  WebApiConfig.cs  file:  public static class WebApiConfig\n{\n    public static void Register(HttpConfiguration config)\n    {\n        ...\n        config.Services.Add(typeof(IExceptionLogger), new ElmahExceptionLogger());\n        ...\n    }\n}  IExceptionLogger  is a new concept in Web API 2. It intercepts all thrown exceptions, even errors in controller contructors and routing errors.  If you are using Web API 1, there\u2019s another way to add exception logging:  protected void Application_Start()\n{\n    ...\n    GlobalConfiguration.Configuration.Filters.Add(new ElmahHandleErrorApiAttribute());\n    ...\n}  In this case you register a new global filter with Web API. The downside of this approach is, that only errors thrown in controller actions are logged.", 
            "title": "Thomas Ardal, September 10, 2013"
        }, 
        {
            "location": "/elmah-io-20130908-released/", 
            "text": "elmah.io 20130908 released\n\n\nThomas Ardal\n, September 8, 2013\n\n\nWe just released a new version of elmah.io.\n\n\nWe have been busy building the best cloud enabled error log for .NET web applications. Here are some of the new features:\n\n\n\n\nA lot of you commented on the necessary URL when creating a new log. You now input a name when creating new logs, giving you the change to create logs like \u201cMy Site\u201d, \u201cMy Site Staging\u201d, \u201cMy Site localhost\u201d and so on.\n\n\nA lot of style changes based on your input. Our responsive design now supports monitors with larger resolutions as well.\n\n\nPreviously you would add a new user to your log using an email. You can still do that, but you will be presented with a search result, giving you a better chance to find the user which should be added.\n\n\nWe fixed all known bugs. Please help us and report bugs on our \nUserVoice\n.", 
            "title": "elmah.io 20130908 released"
        }, 
        {
            "location": "/elmah-io-20130908-released/#elmahio-20130908-released", 
            "text": "", 
            "title": "elmah.io 20130908 released"
        }, 
        {
            "location": "/elmah-io-20130908-released/#thomas-ardal-september-8-2013", 
            "text": "", 
            "title": "Thomas Ardal, September 8, 2013"
        }, 
        {
            "location": "/elmah-io-20130908-released/#we-just-released-a-new-version-of-elmahio", 
            "text": "We have been busy building the best cloud enabled error log for .NET web applications. Here are some of the new features:   A lot of you commented on the necessary URL when creating a new log. You now input a name when creating new logs, giving you the change to create logs like \u201cMy Site\u201d, \u201cMy Site Staging\u201d, \u201cMy Site localhost\u201d and so on.  A lot of style changes based on your input. Our responsive design now supports monitors with larger resolutions as well.  Previously you would add a new user to your log using an email. You can still do that, but you will be presented with a search result, giving you a better chance to find the user which should be added.  We fixed all known bugs. Please help us and report bugs on our  UserVoice .", 
            "title": "We just released a new version of elmah.io."
        }, 
        {
            "location": "/elmah-elasticsearch-tutorial/", 
            "text": "ELMAH Elasticsearch Tutorial\n\n\nThomas Ardal\n, September 4. 2013\n\n\n\n\nThis article shows how Elasticsearch can be used as a logging backend for ELMAH. A basic knowledge about ELMAH is a prerequisite to reading this article. If you\u2019re new to ELMAH, please read our \nELMAH Tutorial\n.\n\n\n\n\nElasticsearch\n\n\nSo what\u2019s \nElasticsearch\n and why is it ideal for storing ELMAH errors? To answer the first question, Elasticsearch is a powerful search engine based on Lucene indexes. Why do we think it\u2019s ideal to store ELMAH errors? Well because of three things in fact: Search, Search and Search! Nobody wants to log errors from their webserver, without being able to search them. Elasticsearch provides some really kick-ass search mechanisms, which simply isn\u2019t possible in a SQL Database or requires a lot of knowledge about configuring individual products.\n\n\nElmah.Io.Elasticsearch\n\n\nAt \nelmah.io\n we love ELMAH and Elasticsearch so much, that we wrote our own implementation of a ELMAH error logger for Elasticsearch. The code is \nopen sourced\n at GitHub and we accept pull requests as well as feature requests like pretty much any other open source project. Elmah.Io.Elasticsearch is in fact a competitor to elmah.io itself, because you could build your own UI on top of our NuGet package. We believe that our product is strong enough for you to want to try it out anyway.\n\n\nElmah.Io.Elasticsearch is distributed through NuGet and works like any other error log implementation for ELMAH. Before we start looking at the ELMAH configuration, let\u2019s install Elasticsearch.\n\n\nInstallation\n\n\nBefore installing Elasticsearch, you need to install a Java JRE. We know it sounds like a world of pain, but Elasticsearch is based on Java and therefore require you to install it :( Just do us a favor and unclick the option which tries to cheat you into installing the Ask toolbar. Java is downloaded from the \ndownload page\n.\n\n\nNow that we forever infected our machine (3 billion devices is infected with Java, right?), we are ready to install Elasticsearch. Head over to the \nElasticsearch download page\n and download the Zip. When downloaded unpack the zip somewhere on your hard drive. Locate the bin folder and double click elasticsearch.bat. If everything have been setup correctly (you probably will experience some sort of obscure Java problem like JAVA_HOME not being specified), Elasticsearch should startup in a new command prompt:\n\n\n\n\nHooray! Elasticsearch is running.\n\n\nConfiguring ELMAH\n\n\nWe know we promised some configuration. Before doing that you need to install the Elmah.Elasticsearch NuGet package (name differ to align with other storage packages for ELMAH):\n\n\nInstall-Package Elmah.Elasticsearch\n\n\n\n\n... and now for the XML. The downloaded NuGet packages already added a hell of a lot of XML to your web.config. In order for ELMAH to use the Elasticsearch error logger, located in the Elmah.Io.Elasticsearch assembly, locate the \nelmah\n element and make it look like so:\n\n\nelmah\n\n  \nerrorLog\n    type=\nElmah.Io.Elasticsearch.ElasticsearchErrorLog, Elmah.Io.Elasticsearch\n\n    connectionStringName=\nElmahIoElasticsearch\n /\n\n\n/elmah\n\n\n\n\n\nNotice something missing? You\u2019re right! The connection string to Elasticsearch specified in line 4. That little sucker is actually a name pointer to a standard connection string in the web.config:\n\n\nconnectionStrings\n\n  \nadd name=\nElmahIoElasticsearch\n connectionString=\nhttp://localhost:9200\n/\n\n\n/connectionStrings\n\n\n\n\n\nThere you have it. ELMAH is now configured to use Elasticsearch using the Elmah.Io.Elasticsearch package. It doesn\u2019t get much easier than that. You can use the default UI in ELMAH by accessing /elmah.axd in your browser. Doing that can be fine, but doesn\u2019t really provide you with the strong search capabilities that we promissed you earlier. Elasticsearch comes with a UI called Head, which can help you do those funky searched. Unfortunatly you need to install Head yourself, but it\u2019s a no brainer using this \ninstallation guide\n.", 
            "title": "ELMAH Elasticsearch Tutorial"
        }, 
        {
            "location": "/elmah-elasticsearch-tutorial/#elmah-elasticsearch-tutorial", 
            "text": "", 
            "title": "ELMAH Elasticsearch Tutorial"
        }, 
        {
            "location": "/elmah-elasticsearch-tutorial/#thomas-ardal-september-4-2013", 
            "text": "This article shows how Elasticsearch can be used as a logging backend for ELMAH. A basic knowledge about ELMAH is a prerequisite to reading this article. If you\u2019re new to ELMAH, please read our  ELMAH Tutorial .", 
            "title": "Thomas Ardal, September 4. 2013"
        }, 
        {
            "location": "/elmah-elasticsearch-tutorial/#elasticsearch", 
            "text": "So what\u2019s  Elasticsearch  and why is it ideal for storing ELMAH errors? To answer the first question, Elasticsearch is a powerful search engine based on Lucene indexes. Why do we think it\u2019s ideal to store ELMAH errors? Well because of three things in fact: Search, Search and Search! Nobody wants to log errors from their webserver, without being able to search them. Elasticsearch provides some really kick-ass search mechanisms, which simply isn\u2019t possible in a SQL Database or requires a lot of knowledge about configuring individual products.", 
            "title": "Elasticsearch"
        }, 
        {
            "location": "/elmah-elasticsearch-tutorial/#elmahioelasticsearch", 
            "text": "At  elmah.io  we love ELMAH and Elasticsearch so much, that we wrote our own implementation of a ELMAH error logger for Elasticsearch. The code is  open sourced  at GitHub and we accept pull requests as well as feature requests like pretty much any other open source project. Elmah.Io.Elasticsearch is in fact a competitor to elmah.io itself, because you could build your own UI on top of our NuGet package. We believe that our product is strong enough for you to want to try it out anyway.  Elmah.Io.Elasticsearch is distributed through NuGet and works like any other error log implementation for ELMAH. Before we start looking at the ELMAH configuration, let\u2019s install Elasticsearch.", 
            "title": "Elmah.Io.Elasticsearch"
        }, 
        {
            "location": "/elmah-elasticsearch-tutorial/#installation", 
            "text": "Before installing Elasticsearch, you need to install a Java JRE. We know it sounds like a world of pain, but Elasticsearch is based on Java and therefore require you to install it :( Just do us a favor and unclick the option which tries to cheat you into installing the Ask toolbar. Java is downloaded from the  download page .  Now that we forever infected our machine (3 billion devices is infected with Java, right?), we are ready to install Elasticsearch. Head over to the  Elasticsearch download page  and download the Zip. When downloaded unpack the zip somewhere on your hard drive. Locate the bin folder and double click elasticsearch.bat. If everything have been setup correctly (you probably will experience some sort of obscure Java problem like JAVA_HOME not being specified), Elasticsearch should startup in a new command prompt:   Hooray! Elasticsearch is running.", 
            "title": "Installation"
        }, 
        {
            "location": "/elmah-elasticsearch-tutorial/#configuring-elmah", 
            "text": "We know we promised some configuration. Before doing that you need to install the Elmah.Elasticsearch NuGet package (name differ to align with other storage packages for ELMAH):  Install-Package Elmah.Elasticsearch  ... and now for the XML. The downloaded NuGet packages already added a hell of a lot of XML to your web.config. In order for ELMAH to use the Elasticsearch error logger, located in the Elmah.Io.Elasticsearch assembly, locate the  elmah  element and make it look like so:  elmah \n   errorLog\n    type= Elmah.Io.Elasticsearch.ElasticsearchErrorLog, Elmah.Io.Elasticsearch \n    connectionStringName= ElmahIoElasticsearch  /  /elmah   Notice something missing? You\u2019re right! The connection string to Elasticsearch specified in line 4. That little sucker is actually a name pointer to a standard connection string in the web.config:  connectionStrings \n   add name= ElmahIoElasticsearch  connectionString= http://localhost:9200 /  /connectionStrings   There you have it. ELMAH is now configured to use Elasticsearch using the Elmah.Io.Elasticsearch package. It doesn\u2019t get much easier than that. You can use the default UI in ELMAH by accessing /elmah.axd in your browser. Doing that can be fine, but doesn\u2019t really provide you with the strong search capabilities that we promissed you earlier. Elasticsearch comes with a UI called Head, which can help you do those funky searched. Unfortunatly you need to install Head yourself, but it\u2019s a no brainer using this  installation guide .", 
            "title": "Configuring ELMAH"
        }, 
        {
            "location": "/elmah-tutorial/", 
            "text": "ELMAH Tutorial\n\n\nThomas Ardal\n, August 29. 2013\n\n\nThere are a lot of articles trying to explain ELMAH out there, but most of them assume that you already know about ELMAH. This article is an attempt to explain how to get up and running with ELMAH in the simplest possible way.\n\n\nSo let\u2019s start by talking about what ELMAH is. ELMAH is basically a NuGet package for .NET web applications, logging every exception occurring on one or more websites to some storage of your choosing. Unlike other logging frameworks ELMAH will, when configured in its most simple form, log every exception automatically. Sure, there\u2019s an API you can use to log custom errors, but most people only use the automatic part. In this tutorial we will only focus on the basic parts.\n\n\nInstallation\n\n\nThe easiest way of setting up ELMAH is through NuGet.\n\n\nRun the following command:\n\n\nInstall-Package ELMAH\n\n\n\n\n... Or add ELMAH by right-clicking on References:\n\n\n\n\nand search for ELMAH:\n\n\n\n\nClick Install and ELMAH is installed in your project.\n\n\nA lot of configuration has been setup in your web.config, but for now just start your web project. When started, navigate to: http://localhost:port/elmah.axd (replace port with your web applications port number). You should see a website looking like this:\n\n\n\n\nLogging errors\n\n\nIn the default configuration, ELMAH uses an in-memory logger which means that errors on the webserver are logged in-memory only. The in-memory logger is meant for development only and we will look at configuring a persistent logger later in this article.\n\n\nFor now generate a 404 by inputting an URL not found like: http://localhost:port/generate-an-error. Unless you configured custom error pages, the default error page is shown:\n\n\n\n\nBehind the curtain, ELMAH silently hooked into the error event and logged the error.\n\n\nThe error list\n\n\nTry navigating to ELMAH again: http://localhost:port/elmah.axd:\n\n\n\n\nThe error just generated by accessing the illegal URL (/generate-an-error) now shows up on the list. ELMAH shows the most important variables in the table, but if you want the full picture, you can click the Details\u2026 link at the end of the error message. This will show ELMAH\u2019s details view:\n\n\n\n\nThe details view shows you some detailed information about the thrown error. Often you would head straight for the stacktrace, but sometimes debugging is easier if you look at the server variables (cookies, http headers etc.). Scroll down for a view of all the server variables included in the failing HTTP request:\n\n\n\n\nLogging to SQL Server\n\n\nPerfect! Our new error log works as it should. If you can live with errors being logged in-memory, you can finish the tutorial now. However, remember that errors are cleared if your website is recycled or similar. Most people configure one of the supported logger implementations to be able to keep the errors. The chances that you are running a SQL Server are probably larger than any other database, which is why we chose to show the SQL Server logger in this tutorial. Please visit the official ELMAH site for a description of the other loggers.\n\n\nSetting up new loggers typically involve a bit of ELMAH configuration as well as some sort of connection string. Open your web.config file and locate the\n\n\nelement. The formatting may be a bit screwed up, but that is easily fixed by clicking Edit | Advanced | Format Document in Visual Studio. The markup looks like this:\n\n\nelmah\n\n  \n!--\n    See http://code.google.com/p/elmah/wiki/SecuringErrorLogPages for\n    more information on remote access and securing ELMAH.\n  --\n\n  \nsecurity allowRemoteAccess=\nfalse\n /\n\n\n/elmah\n\n\n\n\n\nGo ahead and delete the comment if you like. Notice that no logger configuration is present other than the security element. As mentioned before, ELMAH uses the in-memory logger when no logger has been specified. The allowRemoteAccess=\"false\" attribute on the security elements tells ELMAH not to allow connections to errors other than from localhost. You typically don't want to allow for others to look through you error log, which is why we advise you to keep these security settings. More about this later.\n\n\nTo configure the SQL Server log, add a new error logger like this:\n\n\nelmah\n\n  \nerrorLog type=\nElmah.SqlErrorLog, Elmah\n connectionStringName=\nErrorLog\n/\n\n  \nsecurity allowRemoteAccess=\nfalse\n /\n\n\n/elmah\n\n\n\n\n\nIn line 2 a new element has been added. Every error logger in ELMAH is configured using this element. You can only have one error logger per project. The type attribute tells ELMAH what error logger to use. In this case we use the SqlErrorLog class from the Elmah assembly, which we already added through NuGet. Other error loggers may require you to add additional packages. The SqlErrorLog logger requires another attribute named connectionStringName. Again, different error loggers require different configuration to run. The connectionStringName should point to a SQL connection string name ErrorLog:\n\n\nconnectionStrings\n\n  \nadd\n    name=\nErrorLog\n\n    connectionString=\nData Source=localhost;Initial Catalog=ELMAH;Integrated Security=SSPI;\n\n    providerName=\nSystem.Data.SqlClient\n /\n\n\n/connectionStrings\n\n\n\n\n\nIn this example we chose to configure ELMAH to use its own database named ELMAH located on a SQL Server instance on localhost. We recommend using a separate database for ELMAH, but you can use your existing database if you like.\n\n\nELMAH requires some tables and stored procedures to be created on the configured database. The scripts for ELMAH 1.2 can be found here: \nELMAH v1.2 MS Sql Server DB script\n.\n\n\nManually logging errors\n\n\nOften you want to catch errors before returning an error response to the client. Since ELMAH only logs uncaught exceptions, you need some way of logging errors to ELMAH manually. With ELMAH\u2019s \nErrorSignal\n class we can do exactly that:\n\n\ntry\n{\n    int i = 0;\n    int result = 42 / i;\n}\ncatch (DivideByZeroException e)\n{\n    ErrorSignal.FromCurrentContext().Raise(e);\n}\n\n\n\n\nIn the example above, we use the \nFromCurrentContext\n helper to create a new instance of \nErrorSignal\n. ELMAH also works outside the context of a webserver and in this case, you would simply use the default logger with null as the HTTP context:\n\n\nErrorLog.GetDefault(null).Log(new Error(e));\n\n\n\n\nSecuring the error log\n\n\nWhen installed through NuGet, ELMAH automatically sets the \nallowRemoteAccess\n attribute to \nfalse\n. This means that you're only allowed to access \nelmah.axd\n when running on localhost. Like mentioned previously, it's not recommended to set this to \ntrue\n.\n\n\nTo secure access to elmah.axd, ELMAH supports authorization through the authorization feature in ASP.NET. To allow only a single role to access \nelmah.axd\n, locate the configuration section for \nelmah.axd\nand deny all users except users with the admin role (role name may vary from your setup):\n\n\nlocation path=\nelmah.axd\n\n    \nsystem.web\n\n        \nhttpHandlers\n\n            \nadd verb=\nPOST,GET,HEAD\n\n                 path=\nelmah.axd\n\n                 type=\nElmah.ErrorLogPageFactory, Elmah\n /\n\n        \n/httpHandlers\n\n        \nauthorization\n\n            \nallow roles=\nadmin\n /\n\n            \ndeny users=\n*\n /\n\n        \n/authorization\n\n    \n/system.web\n\n    \nsystem.webServer\n\n        \nhandlers\n\n            \nadd name=\nELMAH\n\n                 verb=\nPOST,GET,HEAD\n\n                 path=\nelmah.axd\n\n                 type=\nElmah.ErrorLogPageFactory, Elmah\n\n                 preCondition=\nintegratedMode\n /\n\n        \n/handlers\n\n    \n/system.webServer\n\n\n/location", 
            "title": "ELMAH tutorial"
        }, 
        {
            "location": "/elmah-tutorial/#elmah-tutorial", 
            "text": "", 
            "title": "ELMAH Tutorial"
        }, 
        {
            "location": "/elmah-tutorial/#thomas-ardal-august-29-2013", 
            "text": "There are a lot of articles trying to explain ELMAH out there, but most of them assume that you already know about ELMAH. This article is an attempt to explain how to get up and running with ELMAH in the simplest possible way.  So let\u2019s start by talking about what ELMAH is. ELMAH is basically a NuGet package for .NET web applications, logging every exception occurring on one or more websites to some storage of your choosing. Unlike other logging frameworks ELMAH will, when configured in its most simple form, log every exception automatically. Sure, there\u2019s an API you can use to log custom errors, but most people only use the automatic part. In this tutorial we will only focus on the basic parts.", 
            "title": "Thomas Ardal, August 29. 2013"
        }, 
        {
            "location": "/elmah-tutorial/#installation", 
            "text": "The easiest way of setting up ELMAH is through NuGet.  Run the following command:  Install-Package ELMAH  ... Or add ELMAH by right-clicking on References:   and search for ELMAH:   Click Install and ELMAH is installed in your project.  A lot of configuration has been setup in your web.config, but for now just start your web project. When started, navigate to: http://localhost:port/elmah.axd (replace port with your web applications port number). You should see a website looking like this:", 
            "title": "Installation"
        }, 
        {
            "location": "/elmah-tutorial/#logging-errors", 
            "text": "In the default configuration, ELMAH uses an in-memory logger which means that errors on the webserver are logged in-memory only. The in-memory logger is meant for development only and we will look at configuring a persistent logger later in this article.  For now generate a 404 by inputting an URL not found like: http://localhost:port/generate-an-error. Unless you configured custom error pages, the default error page is shown:   Behind the curtain, ELMAH silently hooked into the error event and logged the error.", 
            "title": "Logging errors"
        }, 
        {
            "location": "/elmah-tutorial/#the-error-list", 
            "text": "Try navigating to ELMAH again: http://localhost:port/elmah.axd:   The error just generated by accessing the illegal URL (/generate-an-error) now shows up on the list. ELMAH shows the most important variables in the table, but if you want the full picture, you can click the Details\u2026 link at the end of the error message. This will show ELMAH\u2019s details view:   The details view shows you some detailed information about the thrown error. Often you would head straight for the stacktrace, but sometimes debugging is easier if you look at the server variables (cookies, http headers etc.). Scroll down for a view of all the server variables included in the failing HTTP request:", 
            "title": "The error list"
        }, 
        {
            "location": "/elmah-tutorial/#logging-to-sql-server", 
            "text": "Perfect! Our new error log works as it should. If you can live with errors being logged in-memory, you can finish the tutorial now. However, remember that errors are cleared if your website is recycled or similar. Most people configure one of the supported logger implementations to be able to keep the errors. The chances that you are running a SQL Server are probably larger than any other database, which is why we chose to show the SQL Server logger in this tutorial. Please visit the official ELMAH site for a description of the other loggers.  Setting up new loggers typically involve a bit of ELMAH configuration as well as some sort of connection string. Open your web.config file and locate the  element. The formatting may be a bit screwed up, but that is easily fixed by clicking Edit | Advanced | Format Document in Visual Studio. The markup looks like this:  elmah \n   !--\n    See http://code.google.com/p/elmah/wiki/SecuringErrorLogPages for\n    more information on remote access and securing ELMAH.\n  -- \n   security allowRemoteAccess= false  /  /elmah   Go ahead and delete the comment if you like. Notice that no logger configuration is present other than the security element. As mentioned before, ELMAH uses the in-memory logger when no logger has been specified. The allowRemoteAccess=\"false\" attribute on the security elements tells ELMAH not to allow connections to errors other than from localhost. You typically don't want to allow for others to look through you error log, which is why we advise you to keep these security settings. More about this later.  To configure the SQL Server log, add a new error logger like this:  elmah \n   errorLog type= Elmah.SqlErrorLog, Elmah  connectionStringName= ErrorLog / \n   security allowRemoteAccess= false  /  /elmah   In line 2 a new element has been added. Every error logger in ELMAH is configured using this element. You can only have one error logger per project. The type attribute tells ELMAH what error logger to use. In this case we use the SqlErrorLog class from the Elmah assembly, which we already added through NuGet. Other error loggers may require you to add additional packages. The SqlErrorLog logger requires another attribute named connectionStringName. Again, different error loggers require different configuration to run. The connectionStringName should point to a SQL connection string name ErrorLog:  connectionStrings \n   add\n    name= ErrorLog \n    connectionString= Data Source=localhost;Initial Catalog=ELMAH;Integrated Security=SSPI; \n    providerName= System.Data.SqlClient  /  /connectionStrings   In this example we chose to configure ELMAH to use its own database named ELMAH located on a SQL Server instance on localhost. We recommend using a separate database for ELMAH, but you can use your existing database if you like.  ELMAH requires some tables and stored procedures to be created on the configured database. The scripts for ELMAH 1.2 can be found here:  ELMAH v1.2 MS Sql Server DB script .", 
            "title": "Logging to SQL Server"
        }, 
        {
            "location": "/elmah-tutorial/#manually-logging-errors", 
            "text": "Often you want to catch errors before returning an error response to the client. Since ELMAH only logs uncaught exceptions, you need some way of logging errors to ELMAH manually. With ELMAH\u2019s  ErrorSignal  class we can do exactly that:  try\n{\n    int i = 0;\n    int result = 42 / i;\n}\ncatch (DivideByZeroException e)\n{\n    ErrorSignal.FromCurrentContext().Raise(e);\n}  In the example above, we use the  FromCurrentContext  helper to create a new instance of  ErrorSignal . ELMAH also works outside the context of a webserver and in this case, you would simply use the default logger with null as the HTTP context:  ErrorLog.GetDefault(null).Log(new Error(e));", 
            "title": "Manually logging errors"
        }, 
        {
            "location": "/elmah-tutorial/#securing-the-error-log", 
            "text": "When installed through NuGet, ELMAH automatically sets the  allowRemoteAccess  attribute to  false . This means that you're only allowed to access  elmah.axd  when running on localhost. Like mentioned previously, it's not recommended to set this to  true .  To secure access to elmah.axd, ELMAH supports authorization through the authorization feature in ASP.NET. To allow only a single role to access  elmah.axd , locate the configuration section for  elmah.axd and deny all users except users with the admin role (role name may vary from your setup):  location path= elmah.axd \n     system.web \n         httpHandlers \n             add verb= POST,GET,HEAD \n                 path= elmah.axd \n                 type= Elmah.ErrorLogPageFactory, Elmah  / \n         /httpHandlers \n         authorization \n             allow roles= admin  / \n             deny users= *  / \n         /authorization \n     /system.web \n     system.webServer \n         handlers \n             add name= ELMAH \n                 verb= POST,GET,HEAD \n                 path= elmah.axd \n                 type= Elmah.ErrorLogPageFactory, Elmah \n                 preCondition= integratedMode  / \n         /handlers \n     /system.webServer  /location", 
            "title": "Securing the error log"
        }, 
        {
            "location": "/category/tutorials/", 
            "text": "Tutorials", 
            "title": "Tuts"
        }, 
        {
            "location": "/category/tutorials/#tutorials", 
            "text": "", 
            "title": "Tutorials"
        }, 
        {
            "location": "/category/changelog/", 
            "text": "Changelogs", 
            "title": "CL"
        }, 
        {
            "location": "/category/changelog/#changelogs", 
            "text": "", 
            "title": "Changelogs"
        }, 
        {
            "location": "/", 
            "text": "elmah.io Blog\n\n\nLatest", 
            "title": "Docs"
        }, 
        {
            "location": "/#elmahio-blog", 
            "text": "", 
            "title": "elmah.io Blog"
        }, 
        {
            "location": "/#latest", 
            "text": "", 
            "title": "Latest"
        }, 
        {
            "location": "/faq/", 
            "text": "FAQ\n\n\nGeneral\n\n\nIs elmah.io a high available site?\n\n\nYes. elmah.io is running as a Windows Azure website. Websites in Windows Azure are highly available and distributed across data centers and continents. Below the cover, elmah.io stores its data in a cluster of Elasticsearch instances.\n\n\nIs elmah.io secure?\n\n\nYes. Every error logged from your website are send to elmah.io through HTTPS. The elmah.io website is accessible through HTTPS only.\nBesides HTTPS we are working with an external security specialist in order to make sure, that your errors are kept safe at all times.\n\n\nWe use different social providers for our authentication needs, why we don\u2019t have any other information about users than a name and an email.\n\n\nBe aware that you should never give away your log id to someone outside your team or corporation. Log ids are used as the id for getting errors through our public API, why this id should always be a secret.\n\n\nMy log contains so many errors that I lost track\n\n\nYou are in luck! This problem can be solved in numerous ways using elmah.io:\n\n\n\n\nExpand individual errors and click the Hide option in the tools menu. This hides the error until you decide to unhide it.\n\n\nExpand individual errors and click the Delete option in the tools menu. This removes an error for good.\n\n\nNavigate to your log settings and select the Actions tab. Beneath this tab you can clear your entire log.\n\n\nUse the Ignore Filter feature to ignore certain errors when they are logged.\n\n\n\n\nWhat is the difference between ELMAH and elmah.io?\n\n\nELMAH stands for Error Logging Modules and Handlers for ASP.NET and is the original and very successful open source project for logging errors from .NET web applications. elmah.io is a cloud service offering logging to the cloud from every web framework already supporting ELMAH.\n\n\nIs elmah.io developed by the guys developing ELMAH?\n\n\nNo. A group of talented developers are maintaining and doing new development of ELMAH. elmah.io is maintained by us, though we love to help out on the ELMAH framework as well. Lucky for us, the maintainers behind ELMAH have been kind enough to send us multiple pull requests on the parts of elmah.io which are open source.\n\n\nIs elmah.io open source?\n\n\nYes and no. The persistence part and the elmah.io website are not open source. We open sourced a couple of the components we have written in order to make elmah.io work, as well as our NuGet package for logging errors to elmah.io.\n\n\nA lot of the internals of elmah.io are based on open source and we love making contributions to other projects.\n\n\nIs elmah.io supported in other languages than .NET?\n\n\nelmah.io builds on top of ELMAH, which is an error logging framework for .NET web applications. Integrating with elmah.io from other languages than .NET is possible, if someone wrote an integration for ELMAH from that language or web framework. If no integrations are there, you can use our API to manually log errors to elmah.io.\n\n\nCan I browse errors from outside elmah.io?\n\n\nThere are a few options for browsing through your errors, without visiting elmah.io:\n\n\n\n\nUsing the Rules tab of the log settings, you can execute custom rules each time a new error occurs. This way you can send yourself an email or make a HTTP request when new errors are logged.\n\n\nELMAH offers an error browser as well. This browser is available by visiting /elmah.axd on your own site.\n\n\nWe\u2019ve developed an \nelmah.io Visual Studio extension\n, making it possible to browse your log(s) from within Visual Studio.\n\n\nFinally we provide an API, making it possible to integrate anything with elmah.io. Please let us know if you build something cool.\n\n\n\n\nInstallation\n\n\nWhich (web)frameworks support elmah.io?\n\n\nIn theory every framework supporting ELMAH also supports elmah.io. We do a lot to test elmah.io with as many frameworks as possible and love blogging about it. Find out how to integrate with elmah.io from various frameworks, by visiting \ndocs.elmah.io\n.\n\n\nThe Input Log Id dialog doesn't show during install. Why not?\n\n\nHard to say, but most likely this issue is caused by one of two reasons:\n\n\n\n\nYou already have elmah.io configuration in your web.config file. Look for the \n element.\n\n\nPowershell does not have sufficient privileges to execute the install.ps1 script from the elmah.io NuGet package. Start Visual Studio as administrator or set \nExecutionPolicy\n.\n\n\n\n\nMy website isn't logging errors to elmah.io. What's wrong?\n\n\nCould be one of many reasons. You should check the following:\n\n\n\n\nYour project references both elmah.dll and elmah.io.dll\n\n\nYour web.config contains the ELMAH config as \ndescribed here\n.\n\n\nYou are referencing the most recent version of the \nelmah.io NuGet package\n.\n\n\nThe server hosting your website is able to invoke HTTPS requests on https://elmah.io/api/errors/.\n\n\n\n\nPayment\n\n\nIs elmah.io free?\n\n\nNo. We provide 30 days of free trial but after that, you will need to pay if you want to continue to use elmah.io. Even though it would be cool, we cannot host a lot of logs and keep innovate on the platform for free. We really hope that you want to help us keep the releases on elmah.io flowing, by checking out our \nplans and pricing page\n and consider purchasing a paid plan.\n\n\nCan I get back my money if I'm not satisfied?\n\n\nNo. Please try out elmah.io by signing up for the trial plan. When you feel satisfied, upgrade to a paid plan for the full monty.\n\n\nDo I get money back if I cancel my subscription in between payments?\n\n\nNo. We\u2019re working with an external partner to handle payments through elmah.io. Our partner does not support this, yet.", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#general", 
            "text": "Is elmah.io a high available site?  Yes. elmah.io is running as a Windows Azure website. Websites in Windows Azure are highly available and distributed across data centers and continents. Below the cover, elmah.io stores its data in a cluster of Elasticsearch instances.  Is elmah.io secure?  Yes. Every error logged from your website are send to elmah.io through HTTPS. The elmah.io website is accessible through HTTPS only.\nBesides HTTPS we are working with an external security specialist in order to make sure, that your errors are kept safe at all times.  We use different social providers for our authentication needs, why we don\u2019t have any other information about users than a name and an email.  Be aware that you should never give away your log id to someone outside your team or corporation. Log ids are used as the id for getting errors through our public API, why this id should always be a secret.  My log contains so many errors that I lost track  You are in luck! This problem can be solved in numerous ways using elmah.io:   Expand individual errors and click the Hide option in the tools menu. This hides the error until you decide to unhide it.  Expand individual errors and click the Delete option in the tools menu. This removes an error for good.  Navigate to your log settings and select the Actions tab. Beneath this tab you can clear your entire log.  Use the Ignore Filter feature to ignore certain errors when they are logged.   What is the difference between ELMAH and elmah.io?  ELMAH stands for Error Logging Modules and Handlers for ASP.NET and is the original and very successful open source project for logging errors from .NET web applications. elmah.io is a cloud service offering logging to the cloud from every web framework already supporting ELMAH.  Is elmah.io developed by the guys developing ELMAH?  No. A group of talented developers are maintaining and doing new development of ELMAH. elmah.io is maintained by us, though we love to help out on the ELMAH framework as well. Lucky for us, the maintainers behind ELMAH have been kind enough to send us multiple pull requests on the parts of elmah.io which are open source.  Is elmah.io open source?  Yes and no. The persistence part and the elmah.io website are not open source. We open sourced a couple of the components we have written in order to make elmah.io work, as well as our NuGet package for logging errors to elmah.io.  A lot of the internals of elmah.io are based on open source and we love making contributions to other projects.  Is elmah.io supported in other languages than .NET?  elmah.io builds on top of ELMAH, which is an error logging framework for .NET web applications. Integrating with elmah.io from other languages than .NET is possible, if someone wrote an integration for ELMAH from that language or web framework. If no integrations are there, you can use our API to manually log errors to elmah.io.  Can I browse errors from outside elmah.io?  There are a few options for browsing through your errors, without visiting elmah.io:   Using the Rules tab of the log settings, you can execute custom rules each time a new error occurs. This way you can send yourself an email or make a HTTP request when new errors are logged.  ELMAH offers an error browser as well. This browser is available by visiting /elmah.axd on your own site.  We\u2019ve developed an  elmah.io Visual Studio extension , making it possible to browse your log(s) from within Visual Studio.  Finally we provide an API, making it possible to integrate anything with elmah.io. Please let us know if you build something cool.", 
            "title": "General"
        }, 
        {
            "location": "/faq/#installation", 
            "text": "Which (web)frameworks support elmah.io?  In theory every framework supporting ELMAH also supports elmah.io. We do a lot to test elmah.io with as many frameworks as possible and love blogging about it. Find out how to integrate with elmah.io from various frameworks, by visiting  docs.elmah.io .  The Input Log Id dialog doesn't show during install. Why not?  Hard to say, but most likely this issue is caused by one of two reasons:   You already have elmah.io configuration in your web.config file. Look for the   element.  Powershell does not have sufficient privileges to execute the install.ps1 script from the elmah.io NuGet package. Start Visual Studio as administrator or set  ExecutionPolicy .   My website isn't logging errors to elmah.io. What's wrong?  Could be one of many reasons. You should check the following:   Your project references both elmah.dll and elmah.io.dll  Your web.config contains the ELMAH config as  described here .  You are referencing the most recent version of the  elmah.io NuGet package .  The server hosting your website is able to invoke HTTPS requests on https://elmah.io/api/errors/.", 
            "title": "Installation"
        }, 
        {
            "location": "/faq/#payment", 
            "text": "Is elmah.io free?  No. We provide 30 days of free trial but after that, you will need to pay if you want to continue to use elmah.io. Even though it would be cool, we cannot host a lot of logs and keep innovate on the platform for free. We really hope that you want to help us keep the releases on elmah.io flowing, by checking out our  plans and pricing page  and consider purchasing a paid plan.  Can I get back my money if I'm not satisfied?  No. Please try out elmah.io by signing up for the trial plan. When you feel satisfied, upgrade to a paid plan for the full monty.  Do I get money back if I cancel my subscription in between payments?  No. We\u2019re working with an external partner to handle payments through elmah.io. Our partner does not support this, yet.", 
            "title": "Payment"
        }
    ]
}